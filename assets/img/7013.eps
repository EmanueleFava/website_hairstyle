%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: Windows Roman
%%Title: apr-10-39.eps
%%Creator: Adobe Illustrator(R) 16.0
%%For: Rixwan
%%CreationDate: 4/11/2018
%%BoundingBox: 0 0 800 800
%%HiResBoundingBox: 0 0 800 800
%%CropBox: 0 0 800 800
%%LanguageLevel: 2
%%DocumentData: Clean7Bit
%ADOBeginClientInjection: DocumentHeader "AI11EPS"
%%AI8_CreatorVersion: 16.0.0%AI9_PrintingDataBegin%ADO_BuildNumber: Adobe Illustrator(R) 16.0.0 x682 R agm 4.6676 ct 5.2591%ADO_ContainsXMP: MainFirst
%ADOEndClientInjection: DocumentHeader "AI11EPS"
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentFonts: 
%%DocumentNeededFonts: 
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentProcessColors:  Cyan Magenta Yellow Black
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EndComments
                                                                                                                                                                                                               
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 32 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq {pop /AGMCORE_currentbg load}{/Procedure get_res}ifelse
	dup currentblackgeneration eq {pop}{setblackgeneration}ifelse
	dup null eq {pop /AGMCORE_currentucr load}{/Procedure get_res}ifelse
	dup currentundercolorremoval eq {pop}{setundercolorremoval}ifelse
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0
%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 2.31 0
10 dict begin
/Adobe_CoolType_Passthru currentdict def
/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known def
Adobe_CoolType_Core_Defined
	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}
if
userdict/Adobe_CoolType_Core 70 dict dup begin put
/Adobe_CoolType_Version 2.31 def
/Level2?
	systemdict/languagelevel known dup
		{pop systemdict/languagelevel get 2 ge}
	if def
Level2? not
	{
	/currentglobal false def
	/setglobal/pop load def
	/gcheck{pop false}bind def
	/currentpacking false def
	/setpacking/pop load def
	/SharedFontDirectory 0 dict def
	}
if
currentpacking
true setpacking
currentglobal false setglobal
userdict/Adobe_CoolType_Data 2 copy known not
	{2 copy 10 dict put}
if
get
	 begin
	/@opStackCountByLevel 32 dict def
	/@opStackLevel 0 def
	/@dictStackCountByLevel 32 dict def
	/@dictStackLevel 0 def
	 end
setglobal
currentglobal true setglobal
userdict/Adobe_CoolType_GVMFonts known not
	{userdict/Adobe_CoolType_GVMFonts 10 dict put}
if
setglobal
currentglobal false setglobal
userdict/Adobe_CoolType_LVMFonts known not
	{userdict/Adobe_CoolType_LVMFonts 10 dict put}
if
setglobal
/ct_VMDictPut
	{
	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse
	3 1 roll put
	}bind def
/ct_VMDictUndef
	{
	dup Adobe_CoolType_GVMFonts exch known
		{Adobe_CoolType_GVMFonts exch undef}
		{
			dup Adobe_CoolType_LVMFonts exch known
			{Adobe_CoolType_LVMFonts exch undef}
			{pop}
			ifelse
		}ifelse
	}bind def
/ct_str1 1 string def
/ct_xshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_yshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0 exch
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_xyshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			{_ct_na _ct_i 1 add get}stopped 
			{pop pop pop}
			{
				_ct_x _ct_y moveto
				rmoveto
			}
			ifelse
		}
		ifelse
		/_ct_i _ct_i 2 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def
/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def
/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind def
currentglobal true setglobal
/ct_T3Defs
{
/BuildChar
{
	1 index/Encoding get exch get
	1 index/BuildGlyph get exec
}bind def
/BuildGlyph
{
	exch begin
	GlyphProcs exch get exec
	end
}bind def
}bind def
setglobal
/@_SaveStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@vmState currentglobal def false setglobal
		@opStackCountByLevel
		@opStackLevel
		2 copy known not
			{
			2 copy
			3 dict dup/args
			7 index
			5 add array put
			put get
			}
			{
			get dup/args get dup length 3 index lt
				{
				dup length 5 add array exch
				1 index exch 0 exch putinterval
				1 index exch/args exch put
				}
				{pop}
			ifelse
			}
		ifelse
			begin
			count 1 sub
			1 index lt
				{pop count}
			if
			dup/argCount exch def
			dup 0 gt
				{
				args exch 0 exch getinterval 
			astore pop
				}
				{pop}
			ifelse
			count
			/restCount exch def
			end
		/@opStackLevel @opStackLevel 1 add def
		countdictstack 1 sub
		@dictStackCountByLevel exch @dictStackLevel exch put
		/@dictStackLevel @dictStackLevel 1 add def
		@vmState setglobal
		end
	}bind def
/@_RestoreStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		@opStackCountByLevel @opStackLevel get
			begin
			count restCount sub dup 0 gt
				{{pop}repeat}
				{pop}
			ifelse
			args 0 argCount getinterval{}forall
			end
		/@dictStackLevel @dictStackLevel 1 sub def
		@dictStackCountByLevel @dictStackLevel get
		end
	countdictstack exch sub dup 0 gt
		{{end}repeat}
		{pop}
	ifelse
	}bind def
/@_PopStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		/@dictStackLevel @dictStackLevel 1 sub def
		end
	}bind def
/@Raise
	{
	exch cvx exch errordict exch get exec
	stop
	}bind def
/@ReRaise
	{
	cvx $error/errorname get errordict exch get exec
	stop
	}bind def
/@Stopped
	{
	0 @#Stopped
	}bind def
/@#Stopped
	{
	@_SaveStackLevels
	stopped
		{@_RestoreStackLevels true}
		{@_PopStackLevels false}
	ifelse
	}bind def
/@Arg
	{
	Adobe_CoolType_Data
		begin
		@opStackCountByLevel @opStackLevel 1 sub get
		begin
		args exch
		argCount 1 sub exch sub get
		end
		end
	}bind def
currentglobal true setglobal
/CTHasResourceForAllBug
	Level2?
		{
		1 dict dup
				/@shouldNotDisappearDictValue true def
				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put
				begin
				count @_SaveStackLevels
					{(*){pop stop}128 string/Category resourceforall}
				stopped pop
				@_RestoreStackLevels
				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll
					{
						 /@shouldNotDisappearDictValue known
								{
										 {
												end
												currentdict 1 index eq
													{pop exit}
												if
										 }
									 loop
								}
						 if
					}
					{
						 pop
						 end
					}
				ifelse
		}
		{false}
	ifelse
	def
true setglobal
/CTHasResourceStatusBug
	Level2?
		{
		mark
			{/steveamerige/Category resourcestatus}
		stopped
			{cleartomark true}
			{cleartomark currentglobal not}
		ifelse
		}
		{false}
	ifelse
	def
setglobal
/CTResourceStatus
		{
		mark 3 1 roll
		/Category findresource
			begin
			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
				{cleartomark false}
				{{3 2 roll pop true}{cleartomark false}ifelse}
			ifelse
			end
		}bind def
/CTWorkAroundBugs
	{
	Level2?
		{
		/cid_PreLoad/ProcSet resourcestatus
			{
			pop pop
			currentglobal
			mark
				{
				(*)
					{
					dup/CMap CTHasResourceStatusBug
						{CTResourceStatus}
						{resourcestatus}
					ifelse
						{
						pop dup 0 eq exch 1 eq or
							{
							dup/CMap findresource gcheck setglobal
							/CMap undefineresource
							}
							{
							pop CTHasResourceForAllBug
								{exit}
								{stop}
							ifelse
							}
						ifelse
						}
						{pop}
					ifelse
					}
				128 string/CMap resourceforall
				}
			stopped
				{cleartomark}
			stopped pop
			setglobal
			}
		if
		}
	if
	}bind def
/ds
	{
	Adobe_CoolType_Core
		begin
		CTWorkAroundBugs
		/mo/moveto load def
		/nf/newencodedfont load def
		/msf{makefont setfont}bind def
		/uf{dup undefinefont ct_VMDictUndef}bind def
		/ur/undefineresource load def
		/chp/charpath load def
		/awsh/awidthshow load def
		/wsh/widthshow load def
		/ash/ashow load def
		/@xshow/xshow load def
		/@yshow/yshow load def
		/@xyshow/xyshow load def
		/@cshow/cshow load def
		/sh/show load def
		/rp/repeat load def
		/.n/.notdef def
		end
		currentglobal false setglobal
	 userdict/Adobe_CoolType_Data 2 copy known not
		 {2 copy 10 dict put}
		if
		get
		begin
		/AddWidths? false def
		/CC 0 def
		/charcode 2 string def
		/@opStackCountByLevel 32 dict def
		/@opStackLevel 0 def
		/@dictStackCountByLevel 32 dict def
		/@dictStackLevel 0 def
		/InVMFontsByCMap 10 dict def
		/InVMDeepCopiedFonts 10 dict def
		end
		setglobal
	}bind def
/dt
	{
	currentdict Adobe_CoolType_Core eq
		{end}
	if
	}bind def
/ps
	{
	Adobe_CoolType_Core begin
	Adobe_CoolType_GVMFonts begin
	Adobe_CoolType_LVMFonts begin
	SharedFontDirectory begin
	}bind def
/pt
	{
	end
	end
	end
	end
	}bind def
/unload
	{
	systemdict/languagelevel known
		{
		systemdict/languagelevel get 2 ge
			{
			userdict/Adobe_CoolType_Core 2 copy known
				{undef}
				{pop pop}
			ifelse
			}
		if
		}
	if
	}bind def
/ndf
	{
	1 index where
		{pop pop pop}
		{dup xcheck{bind}if def}
	ifelse
	}def
/findfont systemdict
	begin
	userdict
		begin
		/globaldict where{/globaldict get begin}if
			dup where pop exch get
		/globaldict where{pop end}if
		end
	end
Adobe_CoolType_Core_Defined
	{/systemfindfont exch def}
	{
	/findfont 1 index def
	/systemfindfont exch def
	}
ifelse
/undefinefont
	{pop}ndf
/copyfont
	{
	currentglobal 3 1 roll
	1 index gcheck setglobal
	dup null eq{0}{dup length}ifelse
	2 index length add 1 add dict
		begin
		exch
			{
			1 index/FID eq
				{pop pop}
				{def}
			ifelse
			}
		forall
		dup null eq
			{pop}
			{{def}forall}
		ifelse
		currentdict
		end
	exch setglobal
	}bind def
/copyarray
	{
	currentglobal exch
	dup gcheck setglobal
	dup length array copy
	exch setglobal
	}bind def
/newencodedfont
	{
	currentglobal
		{
		SharedFontDirectory 3 index known
			{SharedFontDirectory 3 index get/FontReferenced known}
			{false}
		ifelse
		}
		{
		FontDirectory 3 index known
			{FontDirectory 3 index get/FontReferenced known}
			{
			SharedFontDirectory 3 index known
				{SharedFontDirectory 3 index get/FontReferenced known}
				{false}
			ifelse
			}
		ifelse
		}
	ifelse
	dup
		{
		3 index findfont/FontReferenced get
		2 index dup type/nametype eq
			{findfont}
		if ne
			{pop false}
		if
		}
	if
	dup
		{
		1 index dup type/nametype eq
			{findfont}
		 if
		dup/CharStrings known
			{
			/CharStrings get length
			4 index findfont/CharStrings get length
			ne
				{
				pop false
				}
			if 
			}
			{pop}
			ifelse
		}
	if
		{
		pop
		1 index findfont
		/Encoding get exch
		0 1 255
			{2 copy get 3 index 3 1 roll put}
		for
		pop pop pop
		}
		{
		currentglobal
	 4 1 roll
		dup type/nametype eq
		 {findfont}
	 if
	 dup gcheck setglobal
		dup dup maxlength 2 add dict
			begin
			exch
				{
				1 index/FID ne
				2 index/Encoding ne and
					{def}
					{pop pop}
				ifelse
				}
			forall
			/FontReferenced exch def
			/Encoding exch dup length array copy def
			/FontName 1 index dup type/stringtype eq{cvn}if def dup
			currentdict
			end
		definefont ct_VMDictPut
		setglobal
		}
	ifelse
	}bind def
/SetSubstituteStrategy
	{
	$SubstituteFont
		begin
		dup type/dicttype ne
			{0 dict}
		if
		currentdict/$Strategies known
			{
			exch $Strategies exch 
			2 copy known
				{
				get
				2 copy maxlength exch maxlength add dict
					begin
					{def}forall
					{def}forall
					currentdict
					dup/$Init known
						{dup/$Init get exec}
					if
					end
				/$Strategy exch def
				}
				{pop pop pop}
			ifelse
			}
			{pop pop}
		ifelse
		end
	}bind def
/scff
	{
	$SubstituteFont
		begin
		dup type/stringtype eq
			{dup length exch}
			{null}
		ifelse
		/$sname exch def
		/$slen exch def
		/$inVMIndex
			$sname null eq
				{
				1 index $str cvs
				dup length $slen sub $slen getinterval cvn
				}
				{$sname}
			ifelse def
		end
		{findfont}
	@Stopped
		{
		dup length 8 add string exch
		1 index 0(BadFont:)putinterval
		1 index exch 8 exch dup length string cvs putinterval cvn
			{findfont}
		@Stopped
			{pop/Courier findfont}
		if
		}
	if
	$SubstituteFont
		begin
		/$sname null def
		/$slen 0 def
		/$inVMIndex null def
		end
	}bind def
/isWidthsOnlyFont
	{
	dup/WidthsOnly known
		{pop pop true}
		{
		dup/FDepVector known
			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}
			{
			dup/FDArray known
				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}
				{pop}
			ifelse
			}
		ifelse
		}
	ifelse
	}bind def
/ct_StyleDicts 4 dict dup begin
		 /Adobe-Japan1 4 dict dup begin
					 Level2?
								{
								/Serif
								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMin-W3}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMin-W3/CIDFont resourcestatus
								{pop pop/HeiseiMin-W3}
								{/Ryumin-Light}
								ifelse
							}
							{/Ryumin-Light}
							ifelse
								}
								ifelse
								def
								/SansSerif
								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiKakuGo-W5/CIDFont resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{/GothicBBB-Medium}
								ifelse
							}
							{/GothicBBB-Medium}
							ifelse
								}
								ifelse
								def
								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMaruGo-W4/CIDFont resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
									/Jun101-Light-RKSJ-H/Font resourcestatus
									{pop pop/Jun101-Light}
									{SansSerif}
									ifelse
								}
								ifelse
							}
							{
								/Jun101-Light-RKSJ-H/Font resourcestatus
								{pop pop/Jun101-Light}
								{SansSerif}
								ifelse
							}
							ifelse
								}
								ifelse
								/RoundSansSerif exch def
								/Default Serif def
								}
								{
								/Serif/Ryumin-Light def
								/SansSerif/GothicBBB-Medium def
								{
								(fonts/Jun101-Light-83pv-RKSJ-H)status
								}stopped
								{pop}{
										 {pop pop pop pop/Jun101-Light}
										 {SansSerif}
										 ifelse
										 /RoundSansSerif exch def
								}ifelse
								/Default Serif def
								}
					 ifelse
		 end
		 def
		 /Adobe-Korea1 4 dict dup begin
					/Serif/HYSMyeongJo-Medium def
					/SansSerif/HYGoThic-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-GB1 4 dict dup begin
					/Serif/STSong-Light def
					/SansSerif/STHeiti-Regular def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-CNS1 4 dict dup begin
					/Serif/MKai-Medium def
					/SansSerif/MHei-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
end
def
Level2?{currentglobal true setglobal}if
/ct_BoldRomanWidthProc 
	{
	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth
	0 0
	}bind def
/ct_Type0WidthProc 
	{
	 dup stringwidth 0 0 moveto 
	 2 index true charpath pathbbox
	 0 -1 
	 7 index 2 div .88 
	 setcachedevice2
	 pop
	0 0
	}bind def
/ct_Type0WMode1WidthProc 
	{
	 dup stringwidth 
	 pop 2 div neg -0.88
	2 copy
	moveto 
	0 -1
	 5 -1 roll true charpath pathbbox
	 setcachedevice
	}bind def
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
/ct_BoldBaseFont 
	 11 dict begin
		/FontType 3 def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/Encoding cHexEncoding def 
		/_setwidthProc/ct_BoldRomanWidthProc load def
		/_bcstr1 1 string def
		/BuildChar
		{
			exch begin
				_basefont setfont
				_bcstr1 dup 0 4 -1 roll put
				dup 
				_setwidthProc
				3 copy 
				moveto				
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
systemdict/composefont known
{
/ct_DefineIdentity-H
{
	/Identity-H/CMap resourcestatus
	{
		pop pop
	}
	{
		/CIDInit/ProcSet findresource begin
		 12 dict begin
		 begincmap
		 /CIDSystemInfo 3 dict dup begin
			 /Registry(Adobe)def
			 /Ordering(Identity)def
			 /Supplement 0 def
		 end def
		 /CMapName/Identity-H def
		 /CMapVersion 1.000 def
		 /CMapType 1 def
		 1 begincodespacerange
		 <0000><FFFF>
		 endcodespacerange
		 1 begincidrange
		 <0000><FFFF>0
		 endcidrange
		 endcmap
		 CMapName currentdict/CMap defineresource pop
		 end
		 end
	 }
	 ifelse
}
def
/ct_BoldBaseCIDFont 
	 11 dict begin
		/CIDFontType 1 def
		/CIDFontName/ct_BoldBaseCIDFont def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/_setwidthProc/ct_Type0WidthProc load def
		/_bcstr2 2 string def
		/BuildGlyph
		{
			exch begin		 
				_basefont setfont
				_bcstr2 1 2 index 256 mod put
				_bcstr2 0 3 -1 roll 256 idiv put
				_bcstr2 dup _setwidthProc		 
				3 copy 
				moveto
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
}if
Level2?{setglobal}if
/ct_CopyFont{
	{
		1 index/FID ne 2 index/UniqueID ne and
		{def}{pop pop}ifelse
	}forall
}bind def
/ct_Type0CopyFont 
{
	exch
	dup length dict
	begin
	ct_CopyFont
	[
	exch
	FDepVector 
	{
		 dup/FontType get 0 eq
		{	
		1 index ct_Type0CopyFont 
		/_ctType0 exch definefont
		}
		{
		/_ctBaseFont exch
		2 index exec
		}
		 ifelse 
		 exch
	}
	forall 
	pop
	]				
	/FDepVector exch def
	currentdict
	end
}bind def
/ct_MakeBoldFont
{
	 dup/ct_SyntheticBold known
	{
		dup length 3 add dict begin 
		ct_CopyFont 
		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 
		/ct_SyntheticBold true def
		currentdict 
		end 
		definefont
	}
	{
		dup dup length 3 add dict
		begin
			ct_CopyFont
			/PaintType 2 def
			/StrokeWidth .03 0 FontMatrix idtransform pop def
			/dummybold currentdict
		end
		definefont
		dup/FontType get dup 9 ge exch 11 le and 
		{
			ct_BoldBaseCIDFont
			dup length 3 add dict copy begin
			dup/CIDSystemInfo get/CIDSystemInfo exch def
			ct_DefineIdentity-H
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefont exch def
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefonto exch def
			currentdict
			end
			/CIDFont defineresource
		}
		{
			ct_BoldBaseFont
			dup length 3 add dict copy begin
			/_basefont exch def
			/_basefonto exch def
			currentdict
			end
			definefont
		}
		ifelse
	}
	ifelse
}bind def
/ct_MakeBold{
	1 index 
	1 index
	findfont
	currentglobal 5 1 roll
	dup gcheck setglobal
		dup
		 /FontType get 0 eq
			{
				dup/WMode known{dup/WMode get 1 eq}{false}ifelse
				version length 4 ge
				and
					{version 0 4 getinterval cvi 2015 ge}
					{true}
				ifelse 
					{/ct_Type0WidthProc}
					{/ct_Type0WMode1WidthProc}
				ifelse
				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put
						{ct_MakeBoldFont}ct_Type0CopyFont definefont
			}
			{
				dup/_fauxfont known not 1 index/SubstMaster known not and
				{
					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put
					 ct_MakeBoldFont 
				}
				{
				2 index 2 index eq
					{exch pop	}
					{
						dup length dict begin
						ct_CopyFont
						currentdict
						end
						definefont 
					}
				ifelse
				}
			ifelse
			}
		 ifelse
		 pop pop pop
		 setglobal
}bind def
/?str1 256 string def
/?set
	{
	$SubstituteFont
		begin
		/$substituteFound false def
		/$fontname 1 index def
		/$doSmartSub false def
		end
	dup
	 findfont
	$SubstituteFont
		begin
		$substituteFound
			{false}
			{
			dup/FontName known
				{
				dup/FontName get $fontname eq
				1 index/DistillerFauxFont known not and
				/currentdistillerparams where
					{pop false 2 index isWidthsOnlyFont not and}
				if
				}
				{false}
			ifelse
			}
		ifelse
		exch pop
		/$doSmartSub true def
		end
		{
		5 1 roll pop pop pop pop
		findfont
		}
		{
		1 index
		findfont
		dup/FontType get 3 eq
		{
			6 1 roll pop pop pop pop pop false
		}
		{pop true}
		ifelse
		{
		$SubstituteFont
		begin
		pop pop
		/$styleArray 1 index def
		/$regOrdering 2 index def
		pop pop
		0 1 $styleArray length 1 sub
		{
			$styleArray exch get
			ct_StyleDicts $regOrdering
			2 copy known
			{
				get
				exch 2 copy known not
				{pop/Default}
				if
				get
				dup type/nametype eq
				{
				?str1 cvs length dup 1 add exch
				?str1 exch(-)putinterval
				exch dup length exch ?str1 exch 3 index exch putinterval
				add ?str1 exch 0 exch getinterval cvn
				}
				{
				pop pop/Unknown
				}
				ifelse
			}
			{
				pop pop pop pop/Unknown
			}
			ifelse
		}
		for
		end
		findfont 
		}if
		}
	ifelse
	currentglobal false setglobal 3 1 roll
	null copyfont definefont pop
	setglobal
	}bind def
setpacking
userdict/$SubstituteFont 25 dict put
1 dict
	begin
	/SubstituteFont
		dup $error exch 2 copy known
			{get}
			{pop pop{pop/Courier}bind}
		ifelse def
	/currentdistillerparams where dup
		{
		pop pop
		currentdistillerparams/CannotEmbedFontPolicy 2 copy known
			{get/Error eq}
			{pop pop false}
		ifelse
		}
	if not
		{
		countdictstack array dictstack 0 get
			begin
			userdict
				begin
				$SubstituteFont
					begin
					/$str 128 string def
					/$fontpat 128 string def
					/$slen 0 def
					/$sname null def
					/$match false def
					/$fontname null def
					/$substituteFound false def
					/$inVMIndex null def
					/$doSmartSub true def
					/$depth 0 def
					/$fontname null def
					/$italicangle 26.5 def
					/$dstack null def
					/$Strategies 10 dict dup
						begin
						/$Type3Underprint
							{
							currentglobal exch false setglobal
							11 dict
								begin
								/UseFont exch
									$WMode 0 ne
										{
										dup length dict copy
										dup/WMode $WMode put
										/UseFont exch definefont
										}
									if def
								/FontName $fontname dup type/stringtype eq{cvn}if def
								/FontType 3 def
								/FontMatrix[.001 0 0 .001 0 0]def
								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def
								/FontBBox[0 0 0 0]def
								/CCInfo 7 dict dup
									begin
									/cc null def
									/x 0 def
									/y 0 def
									end def
								/BuildChar
									{
									exch
										begin
										CCInfo
											begin
											1 string dup 0 3 index put exch pop
											/cc exch def
											UseFont 1000 scalefont setfont
											cc stringwidth/y exch def/x exch def
											x y setcharwidth
											$SubstituteFont/$Strategy get/$Underprint get exec
											0 0 moveto cc show
											x y moveto
											end
										end
									}bind def
								currentdict
								end
							exch setglobal
							}bind def
						/$GetaTint
							2 dict dup
								begin
								/$BuildFont
									{
									dup/WMode known
										{dup/WMode get}
										{0}
									ifelse
									/$WMode exch def
									$fontname exch
									dup/FontName known
										{
										dup/FontName get
										dup type/stringtype eq{cvn}if
										}
										{/unnamedfont}
									ifelse
									exch
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
									1 index/FontName get known
										{
										pop
										Adobe_CoolType_Data/InVMDeepCopiedFonts get
										1 index get
										null copyfont
										}
										{$deepcopyfont}
									ifelse
									exch 1 index exch/FontBasedOn exch put
									dup/FontName $fontname dup type/stringtype eq{cvn}if put
									definefont
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
										begin
										dup/FontBasedOn get 1 index def
										end
									}bind def
								/$Underprint
									{
									gsave
									x abs y abs gt
										{/y 1000 def}
										{/x -1000 def 500 120 translate}
									ifelse
									Level2?
										{
										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]
										setcolorspace
										}
										{0 setgray}
									ifelse
									10 setlinewidth
									x .8 mul
									[7 3]
										{
										y mul 8 div 120 sub x 10 div exch moveto
										0 y 4 div neg rlineto
										dup 0 rlineto
										0 y 4 div rlineto
										closepath
										gsave
										Level2?
											{.2 setcolor}
											{.8 setgray}
										ifelse
										fill grestore
										stroke
										}
									forall
									pop
									grestore
									}bind def
								end def
						/$Oblique
							1 dict dup
								begin
								/$BuildFont
									{
									currentglobal exch dup gcheck setglobal
									null copyfont
										begin
										/FontBasedOn
										currentdict/FontName known
											{
											FontName
											dup type/stringtype eq{cvn}if
											}
											{/unnamedfont}
										ifelse
										def
										/FontName $fontname dup type/stringtype eq{cvn}if def
										/currentdistillerparams where
											{pop}
											{
											/FontInfo currentdict/FontInfo known
												{FontInfo null copyfont}
												{2 dict}
											ifelse
											dup
												begin
												/ItalicAngle $italicangle def
												/FontMatrix FontMatrix
												[1 0 ItalicAngle dup sin exch cos div 1 0 0]
												matrix concatmatrix readonly
												end
											4 2 roll def
											def
											}
										ifelse
										FontName currentdict
										end
									definefont
									exch setglobal
									}bind def
								end def
						/$None
							1 dict dup
								begin
								/$BuildFont{}bind def
								end def
						end def
					/$Oblique SetSubstituteStrategy
					/$findfontByEnum
						{
						dup type/stringtype eq{cvn}if
						dup/$fontname exch def
						$sname null eq
							{$str cvs dup length $slen sub $slen getinterval}
							{pop $sname}
						ifelse
						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval
						/$match false def
						$SubstituteFont/$dstack countdictstack array dictstack put
						mark
							{
							$fontpat 0 $slen 7 add getinterval
								{/$match exch def exit}
							$str filenameforall
							}
						stopped
							{
							cleardictstack
							currentdict
							true
							$SubstituteFont/$dstack get
								{
								exch
									{
									1 index eq
										{pop false}
										{true}
									ifelse
									}
									{begin false}
								ifelse
								}
							forall
							pop
							}
						if
						cleartomark
						/$slen 0 def
						$match false ne
							{$match(fonts/)anchorsearch pop pop cvn}
							{/Courier}
						ifelse
						}bind def
					/$ROS 1 dict dup
						begin
						/Adobe 4 dict dup
							begin
							/Japan1 [/Ryumin-Light/HeiseiMin-W3
										 /GothicBBB-Medium/HeiseiKakuGo-W5
										 /HeiseiMaruGo-W4/Jun101-Light]def
							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def
							/GB1	 [/STSong-Light/STHeiti-Regular]def
							/CNS1	[/MKai-Medium/MHei-Medium]def
							end def
						end def
					/$cmapname null def
					/$deepcopyfont
						{
						dup/FontType get 0 eq
							{
							1 dict dup/FontName/copied put copyfont
								begin
								/FDepVector FDepVector copyarray
								0 1 2 index length 1 sub
									{
									2 copy get $deepcopyfont
									dup/FontName/copied put
									/copied exch definefont
									3 copy put pop pop
									}
								for
								def
								currentdict
								end
							}
							{$Strategies/$Type3Underprint get exec}
						ifelse
						}bind def
					/$buildfontname
						{
						dup/CIDFont findresource/CIDSystemInfo get
							begin
							Registry length Ordering length Supplement 8 string cvs
							3 copy length 2 add add add string
							dup 5 1 roll dup 0 Registry putinterval
							dup 4 index(-)putinterval
							dup 4 index 1 add Ordering putinterval
							4 2 roll add 1 add 2 copy(-)putinterval
							end
						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch
						anchorsearch
							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}
							{pop pop pop pop pop}
						ifelse
						length
						$str 1 index(-)putinterval 1 add
						$str 1 index $cmapname $fontpat cvs putinterval
						$cmapname length add
						$str exch 0 exch getinterval cvn
						}bind def
					/$findfontByROS
						{
						/$fontname exch def
						$ROS Registry 2 copy known
							{
							get Ordering 2 copy known
								{get}
								{pop pop[]}
							ifelse
							}
							{pop pop[]}
						ifelse
						false exch
							{
							dup/CIDFont resourcestatus
								{
								pop pop
								save
								1 index/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get}
									{false}
								ifelse
								exch pop
								exch restore
									{pop}
									{exch pop true exit}
								ifelse
								}
								{pop}
							ifelse
							}
						forall
							{$str cvs $buildfontname}
							{
							false(*)
								{
								save exch
								dup/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get not}
									{true}
								ifelse
								exch/CIDSystemInfo get
								dup/Registry get Registry eq
								exch/Ordering get Ordering eq and and
									{exch restore exch pop true exit}
									{pop restore}
								ifelse
								}
							$str/CIDFont resourceforall
								{$buildfontname}
								{$fontname $findfontByEnum}
							ifelse
							}
						ifelse
						}bind def
					end
				end
				currentdict/$error known currentdict/languagelevel known and dup
					{pop $error/SubstituteFont known}
				if
				dup
					{$error}
					{Adobe_CoolType_Core}
				ifelse
				begin
					{
					/SubstituteFont
					/CMap/Category resourcestatus
						{
						pop pop
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{
								$sname null eq
									{dup $str cvs dup length $slen sub $slen getinterval cvn}
									{$sname}
								ifelse
								Adobe_CoolType_Data/InVMFontsByCMap get
								1 index 2 copy known
									{
									get
									false exch
										{
										pop
										currentglobal
											{
											GlobalFontDirectory 1 index known
												{exch pop true exit}
												{pop}
											ifelse
											}
											{
											FontDirectory 1 index known
												{exch pop true exit}
												{
												GlobalFontDirectory 1 index known
													{exch pop true exit}
													{pop}
												ifelse
												}
											ifelse
											}
										ifelse
										}
									forall
									}
									{pop pop false}
								ifelse
									{
									exch pop exch pop
									}
									{
									dup/CMap resourcestatus
										{
										pop pop
										dup/$cmapname exch def
										/CMap findresource/CIDSystemInfo get{def}forall
										$findfontByROS
										}
										{
										128 string cvs
										dup(-)search
											{
											3 1 roll search
												{
												3 1 roll pop
													{dup cvi}
												stopped
													{pop pop pop pop pop $findfontByEnum}
													{
													4 2 roll pop pop
													exch length
													exch
													2 index length
													2 index
													sub
													exch 1 sub -1 0
														{
														$str cvs dup length
														4 index
														0
														4 index
														4 3 roll add
														getinterval
														exch 1 index exch 3 index exch
														putinterval
														dup/CMap resourcestatus
															{
															pop pop
															4 1 roll pop pop pop
															dup/$cmapname exch def
															/CMap findresource/CIDSystemInfo get{def}forall
															$findfontByROS
															true exit
															}
															{pop}
														ifelse
														}
													for
													dup type/booleantype eq
														{pop}
														{pop pop pop $findfontByEnum}
													ifelse
													}
												ifelse
												}
												{pop pop pop $findfontByEnum}
											ifelse
											}
											{pop pop $findfontByEnum}
										ifelse
										}
									ifelse
									}
								ifelse
								}
								{//SubstituteFont exec}
							ifelse
							/$slen 0 def
							end
						}
						}
						{
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{$findfontByEnum}
								{//SubstituteFont exec}
							ifelse
							end
						}
						}
					ifelse
					bind readonly def
					Adobe_CoolType_Core/scfindfont/systemfindfont load put
					}
					{
					/scfindfont
						{
						$SubstituteFont
							begin
							dup systemfindfont
							dup/FontName known
								{dup/FontName get dup 3 index ne}
								{/noname true}
							ifelse
							dup
								{
								/$origfontnamefound 2 index def
								/$origfontname 4 index def/$substituteFound true def
								}
							if
							exch pop
								{
								$slen 0 gt
								$sname null ne
								3 index length $slen gt or and
									{
									pop dup $findfontByEnum findfont
									dup maxlength 1 add dict
										begin
											{1 index/FID eq{pop pop}{def}ifelse}
										forall
										currentdict
										end
									definefont
									dup/FontName known{dup/FontName get}{null}ifelse
									$origfontnamefound ne
										{
										$origfontname $str cvs print
										( substitution revised, using )print
										dup/FontName known
											{dup/FontName get}{(unspecified font)}
										ifelse
										$str cvs print(.\n)print
										}
									if
									}
									{exch pop}
								ifelse
								}
								{exch pop}
							ifelse
							end
						}bind def
					}
				ifelse
				end
			end
		Adobe_CoolType_Core_Defined not
			{
			Adobe_CoolType_Core/findfont
				{
				$SubstituteFont
					begin
					$depth 0 eq
						{
						/$fontname 1 index dup type/stringtype ne{$str cvs}if def
						/$substituteFound false def
						}
					if
					/$depth $depth 1 add def
					end
				scfindfont
				$SubstituteFont
					begin
					/$depth $depth 1 sub def
					$substituteFound $depth 0 eq and
						{
						$inVMIndex null ne
							{dup $inVMIndex $AddInVMFont}
						if
						$doSmartSub
							{
							currentdict/$Strategy known
								{$Strategy/$BuildFont get exec}
							if
							}
						if
						}
					if
					end
				}bind put
			}
		if
		}
	if
	end
/$AddInVMFont
	{
	exch/FontName 2 copy known
		{
		get
		1 dict dup begin exch 1 index gcheck def end exch
		Adobe_CoolType_Data/InVMFontsByCMap get exch
		$DictAdd
		}
		{pop pop pop}
	ifelse
	}bind def
/$DictAdd
	{
	2 copy known not
		{2 copy 4 index length dict put}
	if
	Level2? not
		{
		2 copy get dup maxlength exch length 4 index length add lt
		2 copy get dup length 4 index length add exch maxlength 1 index lt
			{
			2 mul dict
				begin
				2 copy get{forall}def
				2 copy currentdict put
				end
			}
			{pop}
		ifelse
		}
	if
	get
		begin
			{def}
		forall
		end
	}bind def
end
end
%%EndResource
currentglobal true setglobal
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.
%%Version: 1.23 0
systemdict/languagelevel known dup
	{currentglobal false setglobal}
	{false}
ifelse
exch
userdict/Adobe_CoolType_Utility 2 copy known
	{2 copy get dup maxlength 27 add dict copy}
	{27 dict}
ifelse put
Adobe_CoolType_Utility
	begin
	/@eexecStartData
		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E
		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C
		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def
	/@recognizeCIDFont null def
	/ct_Level2? exch def
	/ct_Clone? 1183615869 internaldict dup
			/CCRun known not
			exch/eCCRun known not
			ct_Level2? and or def
ct_Level2?
	{globaldict begin currentglobal true setglobal}
if
	/ct_AddStdCIDMap
		ct_Level2?
			{{
				mark
				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put
					{
					((Hex)57 StartData
					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0
					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60
					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8
					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec
					}
				stopped
					{
					 cleartomark
					 Adobe_CoolType_Utility/@recognizeCIDFont get
					 countdictstack dup array dictstack
					 exch 1 sub -1 0
						 {
						 2 copy get 3 index eq
								{1 index length exch sub 1 sub{end}repeat exit}
								{pop}
						 ifelse
						 }
					 for
					 pop pop
					 Adobe_CoolType_Utility/@eexecStartData get eexec
					}
					{cleartomark}
				ifelse
			}}
			{{
				Adobe_CoolType_Utility/@eexecStartData get eexec
			}}
		ifelse bind def
userdict/cid_extensions known
dup{cid_extensions/cid_UpdateDB known and}if
	{
	 cid_extensions
	 begin
	/cid_GetCIDSystemInfo
		{
		 1 index type/stringtype eq
			{exch cvn exch}
		 if
		 cid_extensions
			 begin
			 dup load 2 index known
				{
				 2 copy
				 cid_GetStatusInfo
				 dup null ne
					{
					 1 index load
					 3 index get
					 dup null eq
						 {pop pop cid_UpdateDB}
						 {
						 exch
						 1 index/Created get eq
							 {exch pop exch pop}
							 {pop cid_UpdateDB}
						 ifelse
						 }
					 ifelse
					}
					{pop cid_UpdateDB}
				 ifelse
				}
				{cid_UpdateDB}
			 ifelse
			 end
		}bind def
	 end
	}
if
ct_Level2?
	{end setglobal}
if
	/ct_UseNativeCapability? systemdict/composefont known def
	/ct_MakeOCF 35 dict def
	/ct_Vars 25 dict def
	/ct_GlyphDirProcs 6 dict def
	/ct_BuildCharDict 15 dict dup
		begin
		/charcode 2 string def
		/dst_string 1500 string def
		/nullstring()def
		/usewidths? true def
		end def
	ct_Level2?{setglobal}{pop}ifelse
	ct_GlyphDirProcs
		begin
		/GetGlyphDirectory
			{
			systemdict/languagelevel known
				{pop/CIDFont findresource/GlyphDirectory get}
				{
				1 index/CIDFont findresource/GlyphDirectory
				get dup type/dicttype eq
					{
					dup dup maxlength exch length sub 2 index lt
						{
						dup length 2 index add dict copy 2 index
						/CIDFont findresource/GlyphDirectory 2 index put
						}
					if
					}
				if
				exch pop exch pop
				}
			ifelse
			+
			}def
		/+
			{
			systemdict/languagelevel known
				{
				currentglobal false setglobal
				3 dict begin
					/vm exch def
				}
				{1 dict begin}
			ifelse
			/$ exch def
			systemdict/languagelevel known
				{
				vm setglobal
				/gvm currentglobal def
				$ gcheck setglobal
				}
			if
			?{$ begin}if
			}def
		/?{$ type/dicttype eq}def
		/|{
			userdict/Adobe_CoolType_Data known
				{
			Adobe_CoolType_Data/AddWidths? known
				{
				 currentdict Adobe_CoolType_Data
					begin
					 begin
						AddWidths?
								{
								Adobe_CoolType_Data/CC 3 index put
								?{def}{$ 3 1 roll put}ifelse
								CC charcode exch 1 index 0 2 index 256 idiv put
								1 index exch 1 exch 256 mod put
								stringwidth 2 array astore
								currentfont/Widths get exch CC exch put
								}
								{?{def}{$ 3 1 roll put}ifelse}
							ifelse
					end
				end
				}
				{?{def}{$ 3 1 roll put}ifelse}	ifelse
				}
				{?{def}{$ 3 1 roll put}ifelse}
			ifelse
			}def
		/!
			{
			?{end}if
			systemdict/languagelevel known
				{gvm setglobal}
			if
			end
			}def
		/:{string currentfile exch readstring pop}executeonly def
		end
	ct_MakeOCF
		begin
		/ct_cHexEncoding
		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
		/ct_CID_STR_SIZE 8000 def
		/ct_mkocfStr100 100 string def
		/ct_defaultFontMtx[.001 0 0 .001 0 0]def
		/ct_1000Mtx[1000 0 0 1000 0 0]def
		/ct_raise{exch cvx exch errordict exch get exec stop}bind def
		/ct_reraise
			{cvx $error/errorname get(Error: )print dup(						 )cvs print
					errordict exch get exec stop
			}bind def
		/ct_cvnsi
			{
			1 index add 1 sub 1 exch 0 4 1 roll
				{
				2 index exch get
				exch 8 bitshift
				add
				}
			for
			exch pop
			}bind def
		/ct_GetInterval
			{
			Adobe_CoolType_Utility/ct_BuildCharDict get
				begin
				/dst_index 0 def
				dup dst_string length gt
					{dup string/dst_string exch def}
				if
				1 index ct_CID_STR_SIZE idiv
				/arrayIndex exch def
				2 index arrayIndex get
				2 index
				arrayIndex ct_CID_STR_SIZE mul
				sub
					{
					dup 3 index add 2 index length le
						{
						2 index getinterval
						dst_string dst_index 2 index putinterval
						length dst_index add/dst_index exch def
						exit
						}
						{
						1 index length 1 index sub
						dup 4 1 roll
						getinterval
						dst_string dst_index 2 index putinterval
						pop dup dst_index add/dst_index exch def
						sub
						/arrayIndex arrayIndex 1 add def
						2 index dup length arrayIndex gt
							 {arrayIndex get}
							 {
							 pop
							 exit
							 }
						ifelse
						0
						}
					ifelse
					}
				loop
				pop pop pop
				dst_string 0 dst_index getinterval
				end
			}bind def
		ct_Level2?
			{
			/ct_resourcestatus
			currentglobal mark true setglobal
				{/unknowninstancename/Category resourcestatus}
			stopped
				{cleartomark setglobal true}
				{cleartomark currentglobal not exch setglobal}
			ifelse
				{
					{
					mark 3 1 roll/Category findresource
						begin
						ct_Vars/vm currentglobal put
						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
							{cleartomark false}
							{{3 2 roll pop true}{cleartomark false}ifelse}
						ifelse
						ct_Vars/vm get setglobal
						end
					}
				}
				{{resourcestatus}}
			ifelse bind def
			/CIDFont/Category ct_resourcestatus
				{pop pop}
				{
				currentglobal true setglobal
				/Generic/Category findresource
				dup length dict copy
				dup/InstanceType/dicttype put
				/CIDFont exch/Category defineresource pop
				setglobal
				}
			ifelse
			ct_UseNativeCapability?
				{
				/CIDInit/ProcSet findresource begin
				12 dict begin
				begincmap
				/CIDSystemInfo 3 dict dup begin
				 /Registry(Adobe)def
				 /Ordering(Identity)def
				 /Supplement 0 def
				end def
				/CMapName/Identity-H def
				/CMapVersion 1.000 def
				/CMapType 1 def
				1 begincodespacerange
				<0000><FFFF>
				endcodespacerange
				1 begincidrange
				<0000><FFFF>0
				endcidrange
				endcmap
				CMapName currentdict/CMap defineresource pop
				end
				end
				}
			if
			}
			{
			/ct_Category 2 dict begin
			/CIDFont 10 dict def
			/ProcSet	2 dict def
			currentdict
			end
			def
			/defineresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					dup dup maxlength exch length eq
						{
						dup length 10 add dict copy
						ct_Category 2 index 2 index put
						}
					if
					3 index 3 index put
					pop exch pop
					}
					{pop pop/defineresource/undefined ct_raise}
				ifelse
				}bind def
			/findresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index 2 copy known
						{get 3 1 roll pop pop}
						{pop pop/findresource/undefinedresource ct_raise}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/resourcestatus
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index known
					exch pop exch pop
						{
						0 -1 true
						}
						{
						false
						}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/ct_resourcestatus/resourcestatus load def
			}
		ifelse
		/ct_CIDInit 2 dict
			begin
			/ct_cidfont_stream_init
				{
					{
					dup(Binary)eq
						{
						pop
						null
						currentfile
						ct_Level2?
							{
								{cid_BYTE_COUNT()/SubFileDecode filter}
							stopped
								{pop pop pop}
							if
							}
						if
						/readstring load
						exit
						}
					if
					dup(Hex)eq
						{
						pop
						currentfile
						ct_Level2?
							{
								{null exch/ASCIIHexDecode filter/readstring}
							stopped
								{pop exch pop(>)exch/readhexstring}
							if
							}
							{(>)exch/readhexstring}
						ifelse
						load
						exit
						}
					if
					/StartData/typecheck ct_raise
					}
				loop
				cid_BYTE_COUNT ct_CID_STR_SIZE le
					{
					2 copy cid_BYTE_COUNT string exch exec
					pop
					1 array dup
					3 -1 roll
					0 exch put
					}
					{
					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi
					dup array exch 2 sub 0 exch 1 exch
						{
						2 copy
						5 index
						ct_CID_STR_SIZE
						string
						6 index exec
						pop
						put
						pop
						}
					for
					2 index
					cid_BYTE_COUNT ct_CID_STR_SIZE mod string
					3 index exec
					pop
					1 index exch
					1 index length 1 sub
					exch put
					}
				ifelse
				cid_CIDFONT exch/GlyphData exch put
				2 index null eq
					{
					pop pop pop
					}
					{
					pop/readstring load
					1 string exch
						{
						3 copy exec
						pop
						dup length 0 eq
							{
							pop pop pop pop pop
							true exit
							}
						if
						4 index
						eq
							{
							pop pop pop pop
							false exit
							}
						if
						}
					loop
					pop
					}
				ifelse
				}bind def
			/StartData
				{
				mark
					{
					currentdict
					dup/FDArray get 0 get/FontMatrix get
					0 get 0.001 eq
						{
						dup/CDevProc known not
							{
							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known
								{get}
								{
								pop pop
								{pop pop pop pop pop 0 -1000 7 index 2 div 880}
								}
							ifelse
							def
							}
						if
						}
						{
						/CDevProc
							{
							 pop pop pop pop pop
							 0
							 1 cid_temp/cid_CIDFONT get
							/FDArray get 0 get
							/FontMatrix get 0 get div
							 7 index 2 div
							 1 index 0.88 mul
							}def
						}
					ifelse
					/cid_temp 15 dict def
					cid_temp
						begin
						/cid_CIDFONT exch def
						3 copy pop
						dup/cid_BYTE_COUNT exch def 0 gt
							{
							ct_cidfont_stream_init
							FDArray
								{
								/Private get
								dup/SubrMapOffset known
									{
									begin
									/Subrs SubrCount array def
									Subrs
									SubrMapOffset
									SubrCount
									SDBytes
									ct_Level2?
										{
										currentdict dup/SubrMapOffset undef
										dup/SubrCount undef
										/SDBytes undef
										}
									if
									end
									/cid_SD_BYTES exch def
									/cid_SUBR_COUNT exch def
									/cid_SUBR_MAP_OFFSET exch def
									/cid_SUBRS exch def
									cid_SUBR_COUNT 0 gt
										{
										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval
										0 cid_SD_BYTES ct_cvnsi
										0 1 cid_SUBR_COUNT 1 sub
											{
											exch 1 index
											1 add
											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add
											GlyphData exch cid_SD_BYTES ct_GetInterval
											0 cid_SD_BYTES ct_cvnsi
											cid_SUBRS 4 2 roll
											GlyphData exch
											4 index
											1 index
											sub
											ct_GetInterval
											dup length string copy put
											}
										for
										pop
										}
									if
									}
									{pop}
								ifelse
								}
							forall
							}
						if
						cleartomark pop pop
						end
					CIDFontName currentdict/CIDFont defineresource pop
					end end
					}
				stopped
					{cleartomark/StartData ct_reraise}
				if
				}bind def
			currentdict
			end def
		/ct_saveCIDInit
			{
			/CIDInit/ProcSet ct_resourcestatus
				{true}
				{/CIDInitC/ProcSet ct_resourcestatus}
			ifelse
				{
				pop pop
				/CIDInit/ProcSet findresource
				ct_UseNativeCapability?
					{pop null}
					{/CIDInit ct_CIDInit/ProcSet defineresource pop}
				ifelse
				}
				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}
			ifelse
			ct_Vars exch/ct_oldCIDInit exch put
			}bind def
		/ct_restoreCIDInit
			{
			ct_Vars/ct_oldCIDInit get dup null ne
				{/CIDInit exch/ProcSet defineresource pop}
				{pop}
			ifelse
			}bind def
		/ct_BuildCharSetUp
			{
			1 index
				begin
				CIDFont
					begin
					Adobe_CoolType_Utility/ct_BuildCharDict get
						begin
						/ct_dfCharCode exch def
						/ct_dfDict exch def
						CIDFirstByte ct_dfCharCode add
						dup CIDCount ge
							{pop 0}
						if
						/cid exch def
							{
							GlyphDirectory cid 2 copy known
								{get}
								{pop pop nullstring}
							ifelse
							dup length FDBytes sub 0 gt
								{
								dup
								FDBytes 0 ne
									{0 FDBytes ct_cvnsi}
									{pop 0}
								ifelse
								/fdIndex exch def
								dup length FDBytes sub FDBytes exch getinterval
								/charstring exch def
								exit
								}
								{
								pop
								cid 0 eq
									{/charstring nullstring def exit}
								if
								/cid 0 def
								}
							ifelse
							}
						loop
			}def
		/ct_SetCacheDevice
			{
			0 0 moveto
			dup stringwidth
			3 -1 roll
			true charpath
			pathbbox
			0 -1000
			7 index 2 div 880
			setcachedevice2
			0 0 moveto
			}def
		/ct_CloneSetCacheProc
			{
			1 eq
				{
				stringwidth
				pop -2 div -880
				0 -1000 setcharwidth
				moveto
				}
				{
				usewidths?
					{
					currentfont/Widths get cid
					2 copy known
						{get exch pop aload pop}
						{pop pop stringwidth}
					ifelse
					}
					{stringwidth}
				ifelse
				setcharwidth
				0 0 moveto
				}
			ifelse
			}def
		/ct_Type3ShowCharString
			{
			ct_FDDict fdIndex 2 copy known
				{get}
				{
				currentglobal 3 1 roll
				1 index gcheck setglobal
				ct_Type1FontTemplate dup maxlength dict copy
					begin
					FDArray fdIndex get
					dup/FontMatrix 2 copy known
						{get}
						{pop pop ct_defaultFontMtx}
					ifelse
					/FontMatrix exch dup length array copy def
					/Private get
					/Private exch def
					/Widths rootfont/Widths get def
					/CharStrings 1 dict dup/.notdef
						<d841272cf18f54fc13>dup length string copy put def
					currentdict
					end
				/ct_Type1Font exch definefont
				dup 5 1 roll put
				setglobal
				}
			ifelse
			dup/CharStrings get 1 index/Encoding get
			ct_dfCharCode get charstring put
			rootfont/WMode 2 copy known
				{get}
				{pop pop 0}
			ifelse
			exch
			1000 scalefont setfont
			ct_str1 0 ct_dfCharCode put
			ct_str1 exch ct_dfSetCacheProc
			ct_SyntheticBold
				{
				currentpoint
				ct_str1 show
				newpath
				moveto
				ct_str1 true charpath
				ct_StrokeWidth setlinewidth
				stroke
				}
				{ct_str1 show}
			ifelse
			}def
		/ct_Type4ShowCharString
			{
			ct_dfDict ct_dfCharCode charstring
			FDArray fdIndex get
			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not
				{ct_1000Mtx matrix concatmatrix concat}
				{pop}
			ifelse
			/Private get
			Adobe_CoolType_Utility/ct_Level2? get not
				{
				ct_dfDict/Private
				3 -1 roll
					{put}
				1183615869 internaldict/superexec get exec
				}
			if
			1183615869 internaldict
			Adobe_CoolType_Utility/ct_Level2? get
				{1 index}
				{3 index/Private get mark 6 1 roll}
			ifelse
			dup/RunInt known
				{/RunInt get}
				{pop/CCRun}
			ifelse
			get exec
			Adobe_CoolType_Utility/ct_Level2? get not
				{cleartomark}
			if
			}bind def
		/ct_BuildCharIncremental
			{
				{
				Adobe_CoolType_Utility/ct_MakeOCF get begin
				ct_BuildCharSetUp
				ct_ShowCharString
				}
			stopped
				{stop}
			if
			end
			end
			end
			end
			}bind def
		/BaseFontNameStr(BF00)def
		/ct_Type1FontTemplate 14 dict
			begin
			/FontType 1 def
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/PaintType 0 def
			currentdict
			end def
		/BaseFontTemplate 11 dict
			begin
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/BuildChar/ct_BuildCharIncremental load def
			ct_Clone?
				{
				/FontType 3 def
				/ct_ShowCharString/ct_Type3ShowCharString load def
				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def
				/ct_SyntheticBold false def
				/ct_StrokeWidth 1 def
				}
				{
				/FontType 4 def
				/Private 1 dict dup/lenIV 4 put def
				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def
				/PaintType 0 def
				/ct_ShowCharString/ct_Type4ShowCharString load def
				}
			ifelse
			/ct_str1 1 string def
			currentdict
			end def
		/BaseFontDictSize BaseFontTemplate length 5 add def
		/ct_matrixeq
			{
			true 0 1 5
				{
				dup 4 index exch get exch 3 index exch get eq and
				dup not
					{exit}
				if
				}
			for
			exch pop exch pop
			}bind def
		/ct_makeocf
			{
			15 dict
				begin
				exch/WMode exch def
				exch/FontName exch def
				/FontType 0 def
				/FMapType 2 def
			dup/FontMatrix known
				{dup/FontMatrix get/FontMatrix exch def}
				{/FontMatrix matrix def}
			ifelse
				/bfCount 1 index/CIDCount get 256 idiv 1 add
					dup 256 gt{pop 256}if def
				/Encoding
					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for
					bfCount 1 255{2 copy bfCount put pop}for
					def
				/FDepVector bfCount dup 256 lt{1 add}if array def
				BaseFontTemplate BaseFontDictSize dict copy
					begin
					/CIDFont exch def
					CIDFont/FontBBox known
						{CIDFont/FontBBox get/FontBBox exch def}
					if
					CIDFont/CDevProc known
						{CIDFont/CDevProc get/CDevProc exch def}
					if
					currentdict
					end
				BaseFontNameStr 3(0)putinterval
				0 1 bfCount dup 256 eq{1 sub}if
					{
					FDepVector exch
					2 index BaseFontDictSize dict copy
						begin
						dup/CIDFirstByte exch 256 mul def
						FontType 3 eq
							{/ct_FDDict 2 dict def}
						if
						currentdict
						end
					1 index 16
					BaseFontNameStr 2 2 getinterval cvrs pop
					BaseFontNameStr exch definefont
					put
					}
				for
				ct_Clone?
					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}
				if
				FontName
				currentdict
				end
			definefont
			ct_Clone?
				{
				gsave
				dup 1000 scalefont setfont
				ct_BuildCharDict
					begin
					/usewidths? false def
					currentfont/Widths get
						begin
						exch/CIDFont get/GlyphDirectory get
							{
							pop
							dup charcode exch 1 index 0 2 index 256 idiv put
							1 index exch 1 exch 256 mod put
							stringwidth 2 array astore def
							}
						forall
						end
					/usewidths? true def
					end
				grestore
				}
				{exch pop}
			ifelse
			}bind def
		currentglobal true setglobal
		/ct_ComposeFont
			{
			ct_UseNativeCapability?
				{				
				2 index/CMap ct_resourcestatus
					{pop pop exch pop}
					{
					/CIDInit/ProcSet findresource
						begin
						12 dict
							begin
							begincmap
							/CMapName 3 index def
							/CMapVersion 1.000 def
							/CMapType 1 def
							exch/WMode exch def
							/CIDSystemInfo 3 dict dup
								begin
								/Registry(Adobe)def
								/Ordering
								CMapName ct_mkocfStr100 cvs
								(Adobe-)search
									{
									pop pop
									(-)search
										{
										dup length string copy
										exch pop exch pop
										}
										{pop(Identity)}
									ifelse
									}
									{pop (Identity)}
								ifelse
								def
								/Supplement 0 def
								end def
							1 begincodespacerange
							<0000><FFFF>
							endcodespacerange
							1 begincidrange
							<0000><FFFF>0
							endcidrange
							endcmap
							CMapName currentdict/CMap defineresource pop
							end
						end
					}
				ifelse
				composefont
				}
				{
				3 2 roll pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
			setglobal
		/ct_MakeIdentity
			{
			ct_UseNativeCapability?
				{
				1 index/CMap ct_resourcestatus
					{pop pop}
					{
					/CIDInit/ProcSet findresource begin
					12 dict begin
					begincmap
					/CMapName 2 index def
					/CMapVersion 1.000 def
					/CMapType 1 def
					/CIDSystemInfo 3 dict dup
						begin
						/Registry(Adobe)def
						/Ordering
						CMapName ct_mkocfStr100 cvs
						(Adobe-)search
							{
							pop pop
							(-)search
								{dup length string copy exch pop exch pop}
								{pop(Identity)}
							ifelse
							}
							{pop(Identity)}
						ifelse
						def
						/Supplement 0 def
						end def
					1 begincodespacerange
					<0000><FFFF>
					endcodespacerange
					1 begincidrange
					<0000><FFFF>0
					endcidrange
					endcmap
					CMapName currentdict/CMap defineresource pop
					end
					end
					}
				ifelse
				composefont
				}
				{
				exch pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
		currentdict readonly pop
		end
	end
%%EndResource
setglobal
%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0
%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.
%%Version: 1.0 0
userdict/ct_T42Dict 15 dict put
ct_T42Dict begin
/Is2015?
{
 version
 cvi
 2015
 ge
}bind def
/AllocGlyphStorage
{
 Is2015?
 {	
	pop
 }
 {
	{string}forall
 }ifelse
}bind def
/Type42DictBegin
{
25 dict begin
 /FontName exch def
 /CharStrings 256 dict 
begin
	 /.notdef 0 def
	 currentdict 
end def
 /Encoding exch def
 /PaintType 0 def
 /FontType 42 def
 /FontMatrix[1 0 0 1 0 0]def
 4 array astore cvx/FontBBox exch def
 /sfnts
}bind def
/Type42DictEnd 
{
 currentdict dup/FontName get exch definefont end
ct_T42Dict exch
dup/FontName get exch put
}bind def
/RD{string currentfile exch readstring pop}executeonly def
/PrepFor2015
{
Is2015?
{		 
	/GlyphDirectory 
	 16
	 dict def
	 sfnts 0 get
	 dup
	 2 index
	(glyx)
	 putinterval
	 2 index 
	(locx)
	 putinterval
	 pop
	 pop
}
{
	 pop
	 pop
}ifelse			
}bind def
/AddT42Char
{
Is2015?
{
	/GlyphDirectory get 
	begin
	def
	end
	pop
	pop
}
{
	/sfnts get
	4 index
	get
	3 index
 2 index
	putinterval
	pop
	pop
	pop
	pop
}ifelse
}bind def
/T0AddT42Mtx2
{
/CIDFont findresource/Metrics2 get begin def end
}bind def
end
%%EndResource
currentglobal true setglobal
%%BeginFile: MMFauxFont.prc
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. 
%%All Rights Reserved.
userdict /ct_EuroDict 10 dict put
ct_EuroDict begin
/ct_CopyFont 
{
    { 1 index /FID ne {def} {pop pop} ifelse} forall
} def
/ct_GetGlyphOutline
{
   gsave
   initmatrix newpath
   exch findfont dup 
   length 1 add dict 
   begin 
		ct_CopyFont 
		/Encoding Encoding dup length array copy 
		dup
		4 -1 roll
		0 exch put   
		def
		currentdict
   end
   /ct_EuroFont exch definefont
   1000 scalefont setfont
   0 0 moveto
   [
       <00> stringwidth 
       <00> false charpath
       pathbbox
       [
       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall
   grestore
   counttomark 8 add
}
def
/ct_MakeGlyphProc
{
   ] cvx
   /ct_PSBuildGlyph cvx
   ] cvx
} def
/ct_PSBuildGlyph 
{ 
 	gsave 
	8 -1 roll pop 
	7 1 roll 
        6 -2 roll ct_FontMatrix transform 6 2 roll
        4 -2 roll ct_FontMatrix transform 4 2 roll
        ct_FontMatrix transform 
	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  
	dup  9 1 roll 
	{  
		currentdict /StrokeWidth 2 copy known  
		{   
			get 2 div   
			0 ct_FontMatrix dtransform pop
			5 1 roll  
			4 -1 roll 4 index sub   
			4 1 roll   
			3 -1 roll 4 index sub  
			3 1 roll   
			exch 4 index add exch  
			4 index add  
			5 -1 roll pop  
		}  
		{	 
			pop pop 
		}  
		ifelse  
	}       
    if  
	setcachedevice  
        ct_FontMatrix concat
        ct_PSPathOps begin 
		exec 
	end 
	{  
		currentdict /StrokeWidth 2 copy known  
			{ get }  
			{ pop pop 0 }  
  	    ifelse  
		setlinewidth stroke  
	}  
	{   
	    fill  
	}  
	ifelse  
    grestore
} def 
/ct_PSPathOps 4 dict dup begin 
	/m {moveto} def 
	/l {lineto} def 
	/c {curveto} def 
	/cp {closepath} def 
end 
def 
/ct_matrix1000 [1000 0 0 1000 0 0] def
/ct_AddGlyphProc  
{
   2 index findfont dup length 4 add dict 
   begin 
	ct_CopyFont 
	/CharStrings CharStrings dup length 1 add dict copy
      begin
         3 1 roll def  
         currentdict 
      end 
      def
      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def
      /ct_PSBuildGlyph /ct_PSBuildGlyph load def
      /ct_PSPathOps /ct_PSPathOps load def
      currentdict
   end
   definefont pop
}
def
systemdict /languagelevel known
{
	/ct_AddGlyphToPrinterFont {
		2 copy
		ct_GetGlyphOutline 3 add -1 roll restore 
		ct_MakeGlyphProc 
		ct_AddGlyphProc
	} def
}
{
	/ct_AddGlyphToPrinterFont {
	    pop pop restore
		Adobe_CTFauxDict /$$$FONTNAME get
		/Euro
		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get
		ct_EuroDict exch get
		ct_AddGlyphProc
	} def
} ifelse
/AdobeSansMM 
{ 
556 0 24 -19 541 703 
	{ 
	541 628 m 
	510 669 442 703 354 703 c 
	201 703 117 607 101 444 c 
	50 444 l 
	25 372 l 
	97 372 l 
	97 301 l 
	49 301 l 
	24 229 l 
	103 229 l 
	124 67 209 -19 350 -19 c 
	435 -19 501 25 509 32 c 
	509 131 l 
	492 105 417 60 343 60 c 
	267 60 204 127 197 229 c 
	406 229 l 
	430 301 l 
	191 301 l 
	191 372 l 
	455 372 l 
	479 444 l 
	194 444 l 
	201 531 245 624 348 624 c 
	433 624 484 583 509 534 c 
	cp 
	556 0 m 
	}
ct_PSBuildGlyph
} def
/AdobeSerifMM 
{ 
500 0 10 -12 484 692 
	{ 
	347 298 m 
	171 298 l 
	170 310 170 322 170 335 c 
	170 362 l 
	362 362 l 
	374 403 l 
	172 403 l 
	184 580 244 642 308 642 c 
	380 642 434 574 457 457 c 
	481 462 l 
	474 691 l 
	449 691 l 
	433 670 429 657 410 657 c 
	394 657 360 692 299 692 c 
	204 692 94 604 73 403 c 
	22 403 l 
	10 362 l 
	70 362 l 
	69 352 69 341 69 330 c 
	69 319 69 308 70 298 c 
	22 298 l 
	10 257 l 
	73 257 l 
	97 57 216 -12 295 -12 c 
	364 -12 427 25 484 123 c 
	458 142 l 
	425 101 384 37 316 37 c 
	256 37 189 84 173 257 c 
	335 257 l 
	cp 
	500 0 m 
	} 
ct_PSBuildGlyph 
} def 
end		
%%EndFile
setglobal
Adobe_CoolType_Core begin /$Oblique SetSubstituteStrategy end
%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get exec
Adobe_AGM_Image/ds gx
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
%ADOBeginClientInjection: PageSetup Start "AI11EPS"
%AI12_RMC_Transparency: Balance=75 RasterRes=300 GradRes=150 Text=0 Stroke=1 Clip=1 OP=0
%ADOEndClientInjection: PageSetup Start "AI11EPS"
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get exec
Adobe_AGM_Image/ps gx
%ADOBeginClientInjection: PageSetup End "AI11EPS"
/currentdistillerparams where{pop currentdistillerparams /CoreDistVersion get 5000 lt} {true} ifelse{ userdict /AI11_PDFMark5 /cleartomark load putuserdict /AI11_ReadMetadata_PDFMark5 {flushfile cleartomark } bind put}{ userdict /AI11_PDFMark5 /pdfmark load putuserdict /AI11_ReadMetadata_PDFMark5 {/PUT pdfmark} bind put } ifelse[/NamespacePush AI11_PDFMark5[/_objdef {ai_metadata_stream_123} /type /stream /OBJ AI11_PDFMark5[{ai_metadata_stream_123}currentfile 0 (%  &&end XMP packet marker&&)/SubFileDecode filter AI11_ReadMetadata_PDFMark5<?xpacket begin="﻿" id="W5M0MpCehiHzreSzNTczkc9d"?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 5.3-c011 66.145661, 2012/02/06-14:56:27        ">
   <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
      <rdf:Description rdf:about=""
            xmlns:dc="http://purl.org/dc/elements/1.1/">
         <dc:format>application/postscript</dc:format>
         <dc:title>
            <rdf:Alt>
               <rdf:li xml:lang="x-default">Web</rdf:li>
            </rdf:Alt>
         </dc:title>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xmp="http://ns.adobe.com/xap/1.0/"
            xmlns:xmpGImg="http://ns.adobe.com/xap/1.0/g/img/">
         <xmp:CreatorTool>Adobe Illustrator CS6 (Windows)</xmp:CreatorTool>
         <xmp:CreateDate>2018-04-11T13:16:15+05:00</xmp:CreateDate>
         <xmp:ModifyDate>2018-04-11T13:16:15+05:00</xmp:ModifyDate>
         <xmp:MetadataDate>2018-04-11T13:16:15+05:00</xmp:MetadataDate>
         <xmp:Thumbnails>
            <rdf:Alt>
               <rdf:li rdf:parseType="Resource">
                  <xmpGImg:width>256</xmpGImg:width>
                  <xmpGImg:height>256</xmpGImg:height>
                  <xmpGImg:format>JPEG</xmpGImg:format>
                  <xmpGImg:image>/9j/4AAQSkZJRgABAgEB9AH0AAD/7QAsUGhvdG9zaG9wIDMuMAA4QklNA+0AAAAAABAB9AAAAAEA&#xA;AQH0AAAAAQAB/+4ADkFkb2JlAGTAAAAAAf/bAIQABgQEBAUEBgUFBgkGBQYJCwgGBggLDAoKCwoK&#xA;DBAMDAwMDAwQDA4PEA8ODBMTFBQTExwbGxscHx8fHx8fHx8fHwEHBwcNDA0YEBAYGhURFRofHx8f&#xA;Hx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8f/8AAEQgBAAEAAwER&#xA;AAIRAQMRAf/EAaIAAAAHAQEBAQEAAAAAAAAAAAQFAwIGAQAHCAkKCwEAAgIDAQEBAQEAAAAAAAAA&#xA;AQACAwQFBgcICQoLEAACAQMDAgQCBgcDBAIGAnMBAgMRBAAFIRIxQVEGE2EicYEUMpGhBxWxQiPB&#xA;UtHhMxZi8CRygvElQzRTkqKyY3PCNUQnk6OzNhdUZHTD0uIIJoMJChgZhJRFRqS0VtNVKBry4/PE&#xA;1OT0ZXWFlaW1xdXl9WZ2hpamtsbW5vY3R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo+Ck5SVlpeYmZ&#xA;qbnJ2en5KjpKWmp6ipqqusra6voRAAICAQIDBQUEBQYECAMDbQEAAhEDBCESMUEFURNhIgZxgZEy&#xA;obHwFMHR4SNCFVJicvEzJDRDghaSUyWiY7LCB3PSNeJEgxdUkwgJChgZJjZFGidkdFU38qOzwygp&#xA;0+PzhJSktMTU5PRldYWVpbXF1eX1RlZmdoaWprbG1ub2R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo&#xA;+DlJWWl5iZmpucnZ6fkqOkpaanqKmqq6ytrq+v/aAAwDAQACEQMRAD8A9U4q7FXYq7FXYq7FXYq7&#xA;FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7F&#xA;XYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FW&#xA;JXX1zzD5rv8ASWvbix0jRY7dp4rORoJrqe5DP8c8ZWVIo0UUEbKWYmpotCqmOiaDqOkajMsWpT3u&#xA;izoXW2vpHuLiCcMKCK4cmRomQmqyEkECh3OKpL5f0+fzZZPr+p6jexQ3jzLp+n2V1NZxW8EcrRxl&#xA;jbPG8szBOTmRiATxCim6qM8vXWsrNrvl6S8+tXelel+j9SuFBdo7qItCLhUCB3idWBYU5LQneuKp&#xA;Z5DJivobLUrzV7bzLFbMdS0/UZmnt7soVV7q3ZxJFwDvt9XZKVAdBsMVW6T5ivrL8yvMtnqd2x0a&#xA;5df0aJXPp28tlp9rPcItdlEiXXqf7Bj3xVW/KfV9Z1ax12/1SSRjcaqbixgkYt6Fnc2Vrc28K1+z&#xA;xjmBI2+InbFVv5YRadqGhaVqvr6vLqgsraS9kvp9VFvJNPADI0cd04tpVLVIMalRsRTbFW9e0C2/&#xA;xpotut5qcdvqYv5byGPVNRjRmjVHTiqTqI1UuaKlB2pTFU21Oe4tfNvlmxhmkW1lhvhNEXZvU9KO&#xA;LgZCxJcrXq1TiqBsre581atqs15fXdtpWl3b6daadZTy2hd4UUyzzzQNHMSzvREDhQorQltlU68v&#xA;aRquk/WbS41GTUtOqr6fLdHndx1r6sUstB6ig0KMfi3INaA4qxbyQ01tqVpY69farbebBHK19b3c&#xA;7S2OoGgLy2gYPbiNC3JEg9ORRs4IrVVk3nbULjT/ACjq13a3aWV4ltItncyLyC3DjhDRaNVmkZQo&#xA;4ncjY9MVYl+Xfml3k43M1+1rq9+1jpVjqTJLf289rayT3n1qjcok5RcVRviBoaBXFFWSfmFdNbeW&#xA;GkEtxEjXumxTvaGZZzDLqEEcyxm3/fcnjdlpH8RrtviqSeSdY9Tznqml2cmpR6TFZwzxWut/WRcG&#xA;UyMjS2v12ty0BWgcuaBqAU3xV3lJLLVdf1g3dxqz6hZapdNEfrGqRWIiglURxji6WT0rvHvUVqKV&#xA;xVHfmDLrl+1j5Z8v3r6fq1+Jrx72PrDBZqGXlTcCW5eGM+KF8VQvmjzTcX35RXvmHT5JLK8kshJW&#xA;NikkE6sElj5ChDRyBkPyxVP/ADjdXFtpFvJbytFI2p6VEzoSpKS6lbxyLUdnRipHcHFUt8/aRC9p&#xA;BqCXV/b3L3+mWrfVr+9tozFcahBBKPShmjjq0crLy41960xVGatoGoWuhhPLtzcjULGYXltHdXc9&#xA;wLhlBDW00lw8r+nKhKirUVqMNxiqB8p61eebNRHmKBri08vW8TW1hZyBomuLgkC5mmTbaFl9FFP7&#xA;Qdv5cVZhirsVdirsVdirsVdirsVSLVfLl1Lqq6zo99+jdUMa290zxfWLe5hRiyJPDyiYmMu3BkdW&#xA;HIjcbYq7RfL2oW+ozarrOpnVNSdDDb8Ivq1tbwswZkhgDymrMByd3ZiABWgxVDL5W1nTri6Pl3Vo&#xA;7GxvJHnewu7U3cUU8rc5Xtis1s0YdyXZGLLyJIAqcVRWm+VYrPTNQtnvbiXUNW5vqOrhhHctK8Yi&#xA;DxlBxi9JABEqj4adzUlVDWPlfWG1ix1PXdWTUn0uOVLBIbX6r8cyhHmmIll5yenVfhCLufh6UVQn&#xA;mT8ubXXbPVLea+ltzqOoR6gssI4tGBZxWE0NeXxCa3SRCdvt+26qf6To0enXWqTRuCmpXKXIiChR&#xA;EEtILUIKHcUtuXbrTtiqV+WtA81aNZabpj6tY3Ol6dBFaqg0+aO4eKGMRpWU3joGooqfTp7YqmV9&#xA;oi3WuaZqpmKHTVuFEPGvP6yqr9qu3Hh4Yq6+0RbrXNM1UzFDpq3CiHjXn9ZVV+1Xbjw8MVQN15a1&#xA;KDVbjU9A1FNOlviH1C0ubc3VrLKqCNZxGstvIkvBVVislGAFVqK4qqaP5Zmtbe9fUdSn1HVNRX07&#xA;rUB/o5WNQVjjt0jNIVTkSKGvIliScVQdj5S1k6hpk+ta0NTg0VnksEFsIJmmaNoRLcyiSQSMsUjj&#xA;4EQEmpGKpp5l0Fdb05bX12tbiCeC7tLlVD+nPbSLLGxRvhcVWhB/XviqQ2P5fXaecIvN19qkc+rq&#xA;n1eaOC0SC2eD0yn2GeaX1q8f3plPwjhTicVZB5k0efVtK+qW9wtrcJcWt1BPJGZkElncx3KBow8R&#xA;ZWaEA0cbd8VQemeX9XXXF1rWdTjvbqG2ltLSC2tvqtvHHcPFJK3F5LmRmY28fWSgodt8VQ1j5c80&#xA;abdXx07VrFbK9vJr0w3GnzSyqZ25MnqpeQqfY+niqIn8k6Lfa7e6vrFtb6pJcRwwWkV1bxyC2hhD&#xA;EqhcPu8kjMx2rsP2cVWWnkbSrfSNb0NQF0PWHlZbGJRELdbmIJMkRBoAzhpFoo4sxxVDx+UvMlwb&#xA;ODW/MI1DT7K4iuhHHaJbTzyW8izQfWJVkdGVJEVqRxJUjfFU81zSRqtlHamX0fTu7O75heVfqd1F&#xA;dcaVH2/R417VriqPxVKfKugLoGiRaWs5uBFLcSiUrwJ+sTyT0pVvs+pTriqbYq7FXYq7FXYq7FXY&#xA;q7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq&#xA;7FXYq7FXYq7FXYq7FXYq7FWNaj5vvvrtxZaBolxrktm/pXlxHLb29tFLQMYfVndWeQAjl6aMF6MQ&#xA;22Ko3y75hbVluYbqxl0vVLF1S80+4aN2XmvJJEeJnR43FeLA9QQQCCMVTjFXYq7FUi1Pzz5S0vVp&#xA;NJ1LU4bK9htVvpVn5RxrbvKIFdpmAiFZWC05V9sVTSz1PTb17hLK7huXtJTBdLDIshilX7UcgUni&#xA;47qd8VROKuxV2KuxVKfMnmGHRbISBBc387rBYWIcI000leK8iG4IArO70PFFZu2KqnlvWhreh2mq&#xA;iBrdbtOaxk8gV5EK6NQco5AOcbUFVINB0xVMsVdirsVYH58PmTX7mXQPLk8kEenxi41ma2uHtLhn&#xA;mUi3tbe5T+7lA/ftXbaNW+CQ4qxryp+Z+taDKmlecBJdWkdIn1QoVu7SQbGK+hPxMoHxrKtSY/jr&#xA;Kqyyqq9hxV2KuxV2KuxV2KuxV2KvOl8tX3m+6bzLOujvbXMf1Wxs9T0xtR9OG2uJ+EyO1xbhWnWQ&#xA;M4CU2UVNK4qq/wDKr/8Alz8qf+E7/wBnuKoe68l6j5dr5lsI9Cjm0eC4uDaafpLae1yohasLzrdT&#xA;cQe1UNDQ0xV6LDMk0Mc0ZrHIodD02YVGKr8VdirxzQovNPmjylpWkaFrNtAn1WLVdU1SC3kHp6hK&#xA;VvI7dpVuDyke4k9WYKNlFGH7wDFWTeTdZutV81NeTT27XMulrDqlpDEYpbW5tbggW84M0/xI00tO&#xA;gPUbHFWe4q7FWHec/OE1rex+X9MjvPr1woa+1O1srm8Sxt3DUekMM6tO/EiJCKftNsKMqxXWWXVW&#xA;by3cvr8+jagyywav+i74XNo0BWQW87SWq+pFI6mSNjy4uOL1WgxVndjqHlqwkuZLLT7m2e8lae7a&#xA;LTLxDLK32nekHxMe5OKo618w6Zc3kdmhnjuZVZ4o7i2uLfmsdOfEzRxg8eQrTFUyxV2KrJpoYIZJ&#xA;55FihiUvLK5CqqqKszMdgAOpxV4Xd+WtT88+bNRuba1jNtftFMuqzSTQX2mWjpHEtu1KpPFeWyyz&#xA;fUnUBRIGk3fZV7sqqqhVAVVFFUbAAdhireKuxVLfMWtR6NpE9+0ZnlXjHa2qEB57iVhHBCte8kjK&#xA;vtWp2xVg/wDhhNLvy/mKwuddS6tlm9azSWZf0rJLK13J6SEekzq8UcErf3caceaAbqu8vaNJ5vXR&#xA;LzWI/VtdChSKW+LAy396gAmjM0ZpLaQyrR/2ZpV5U4L8ar0rFXYq7FXYq7FXYq7FVs0scMTyyHjH&#xA;Gpd23NAoqTtiryjy15G85Sad5VvE1ghItPsW+sEhJLNlidrhI4ERobj6z6qoxlaq8a1JxVnP6B8z&#xA;f9TNP/0i2n/VPFWOzeRPOM3miS8fXWNpLEUe+qonMRi9M2v1T0vq/Dn+89TlyrtTvirJvIkssvkj&#xA;y/JKxaZ9NtDKSKHn6Ccqjsa9sVTzFXYq8m8lw/lvB5Q0WGZLuO4jsbdbiOP9J8VmES+qB6fwfbr9&#xA;nbFU98l2/lk+d9Zn0SOVVj02wWaSb6zydpZ7vr9Z+L4RCKU23xVnmKuxVhM2geVb/wDMLU4db0yy&#xA;vLy6sbSawN5BFKzxQtLHN6RkVifTZk5gdOS16jFU2/5V55A/6lnSv+kG2/5oxVbJ5B/LyKNpJPLm&#xA;kJGgqztZWwAA7klMVYh5RtPK0/n9bry/p1nbwxreyxT2kEUVbQx2ttG9Y1UiOa5iuPSrs4VmWoxV&#xA;6jirsVeefmBr7X2sQ+UbFUurlljnuLBiSLl3J9GCYLutsnH1rpv5AsfxerTFWY+XtDh0bTEtFka4&#xA;nZmmvLyQD1Li4kPKWZ6d2boBsooo+EAYqmWKuxV2KvNfzee2W+0JtWF4uhIbiRr3T5jbTWl8ojW2&#xA;uEcbSOqPKEiP2viHGRuKFVT8u6t5m83LLoR1G21Py7CsZvPN2nloJLyJ1qbL0QvGG4I/v3if4VPw&#xA;iN2oir0q3t4La3itreNYbeFFjhhQBUREFFVVGwAAoBiqpirsVdirsVdirsVdiq2aKOaJ4ZVDxSKU&#xA;dDuCrChB+YxVj8PkewgiSGDUdUihiUJFGL+4IVVFFUFmJ2HicVXf4Ntv+rrqv/SfP/zVirv8G23/&#xA;AFddV/6T5/8AmrFU30zTbPTNPttPs0MdraxrFCjMzsFQUHJ3LMx8Sxqe+KonFXYqwS5uPP3leSTT&#xA;9D8tJ5j0p5Zri0nW/hspIFmkMpt3jmUhgjuwjZW+xQEAipVT7yxpuqI13rGsxxw6xqnpGa1hf1Y7&#xA;aGFSIrZZSqepxLu7NxHxO1NqYqnuKuxVhet/l1Frvna31zVpUuNOsoFFjaqHinhuFEi80nRwQGWd&#xA;yePE8gn8oxVNP8D6L/y06r/3GNV/7KcVUbz8ufLN7Abe8Oo3NuxVmhm1XU5EJRgykq1yRswBHviq&#xA;B0P8uYtB87XGt6TLHb6Zd25W7tGV5J5bhhGhdp3ckqFt4yvLkQS/8+Ks0xV2KsQ0qw8xL+Y2qahd&#xA;QMNMmtvQhnb0TGEi9FrdYSrerVne6M3IfydgKqsvxV2KuxVRvbuGys57yckQ20bzSlQWPGNSzUA3&#xA;OwxVhepa35rmhsNbntbaz8tF4UvNLkdLq4uor6RIUd2VfSh9D1PU4o8nqbio2qqzoAAUGwHQYq7F&#xA;XYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYqkVv&#xA;5F8o21zFcQaXCjW7iW2iHL0IpFNVeKAn0o2U7gqoIOKp7irsVdirsVdirsVdirsVdirsVQ+oX9pp&#xA;9jPfXknpWtshkmkozUVRU0VQWJ9gKnFUkm/MDy7AvKdNShXsZNK1NK9tuVsK9e2Kpto2s6brWnRa&#xA;jpspmtJS6o7I8bconaKRWSRUdWV0ZSGAIIxVG4q7FUBq+vaTo8UcmoT+kZm9O3hVXlmmeleEMMYe&#xA;WVqb8UUnFUt/xvpnMRmx1UTsCUi/Rl9VlHfn6Xpj/ZMPxGKo/SPMejas80VlcE3NvQ3FpNHJb3MY&#xA;avEyQTLHKgah4krQ9sVTLFXYq7FXYqx3VfPeiWWrjQrXnqvmBlL/AKIseMkyIONXmZmSKBR6i7yu&#xA;vUUriqaaHrFrrGmQ39urxrJyWWCUASwyxsUlhlAJAeKRWRhXqMVR2KuxV2KuxV2KuxV2KpLeedPK&#xA;lncyWtzqlulxCeM0XMMUb+VuNaN7HFVH/H/k3/q7Qfef6YqidO83+WNRu1s7LU7ea7cM0duHAdgu&#xA;7FVNC3HvTFU3xV2KuxV2KuxV2KuxV2Ksf8//APKG6t/xgP6xirzn/nIk2DHy/FdxXMg/0tla1tIb&#xA;plI9AUZpmHAGvQKa06im6rLvyU9D/lWmlCD1fREl4EE6qkgpezCjIgCrTwHTFWcYq0xIUkDkQNl8&#xA;fbFXjnlHXfPoub7Uf8LjX/MXNrfUrmW6tLGa3PPktr6TzXBgiRKMqoKPs/Jy3MqsnufO35kWttNN&#xA;ceRBGkFXeY6vZiBYlFWkZ2VWAUVJ+DFWDXX5la55v8vWvmOw8tfo2eCV4dK1SO6t5ryO6qKW625e&#xA;2nYzUFYGjIdSrEUocVe32D3b2Ns94gju2iQ3EYAAWQqC4ADSDZv8o/M4qr4qpXd5aWVrLd3kyW9r&#xA;ApknnlYIiIoqWZmoAB74qwvWPzl8j2MHG0uzqmqNJ6EWj2qsbv1T9lZIWAeMN1XktX/YDGgKrFNC&#xA;t/NttoFvpsvlySx8x2t82oeWZbeOtuIZ2bmmoXQAQHgXjnL/AL10ZXCmWoVV6X5Z0K40qG8lvLlb&#xA;rUtTuDeX8kaCKESmNIuMMYqQipEoqzMx6k4qnOKpJ5kvtRgutDtLGZbc6lfNbTysgkIjSyubn4QS&#xA;BUvbr9FcVQNu/mSTzPqGlHVR6FrZWV0jfVo+Re5luo3B36AWy0xVX1uPzFYaLf30WrBpbW2mnQNb&#xA;R0LRxlhXf2xVaZtettOsb+XUFnE0tkksJgRQRdTRxNQg1FBISMVZJiqB1zVY9I0e81OSNpVtIml9&#xA;JKBnKjZATsCx23xVh3li6/MC3sru3s9L0K9WPUL95ZE1m6HCW4u5bh4WppjjlEZuDb9R26YqnH6Q&#xA;/M7/AKsGif8Acau/+8ViqR+ZdS88CfSZr/StFgksrl762hj1eeS4uDBbSiSK3WTToFMhikb9sbVr&#xA;tU4qz2zu4LyzgvLc8oLmNJomIIJR1DKaHpscVVsVdirsVdirsVdirsVY/wCf/wDlDdW/4wH9YxV5&#xA;v+f6241PRJJdQGmH0ZwJjDDL6oDxkpWSWJl49TQd8VZp+Tjwv+XWmGG5N5F6l4FuWpVgL2Yfs7Cn&#xA;Sg28MVZpirsVSrVvK+japcR3dxC0WoRLwi1C2kktrlUrXh60LI5Su/BiVPcYql2p+Sp9T0a80e98&#xA;w6nLY38UlvcoRYcjBMhjePn9V5UKkjlXl74q8q0m7vdH8zz63IW1vzvaMLfzJpsdrb2lraafbQtF&#xA;9amvJjwhllijSb1PVHqpxURqoqir2/R9WsdX0u21Oxcva3SCSMsCrDsVdTurqaqyncEEHFUZirzn&#xA;87p7hNH0KCSKWfQ7rWIItfht43lmNmsUsrSKIw70haJZTxHL4dsVYT+Snl630v8AMX0tP1i28xaF&#xA;a6CbbTtVt7CK0hMkNzGsiQSR81ndUdTczI/xs6ht0oFXvmKuxV2KsI/NKyW9Xyzbtp/6UDaux+pe&#xA;lbT8qabemvC8eKE8evxN8t8VQ/lDT/Q1PUtP0/T/APDV5FDa3F0v1HTYvXimedITysppg3BoZNnp&#xA;Su3XFWQarbanbaXeXN3qnq2kMEklxF9ViblGiEuvFjQ1UdDirA4dAtYpNLvYfKP6PT69p7x3v1HR&#xA;YfTVruKh521zJMtQafCp+7FXreKsf8//APKG6t/xgP6xiqK8sADTZgBQfX9RO3ib6YnFU2xViv5h&#xA;f7x6X/zHf9is+Kpr5T/5RXRv+YG2/wCTK4qmuKuxV2KuxV2KuxV2Ksf/ADAIHkvWGOypbMzE9Aq0&#xA;LE+wAqcVebfnL5q0S/TSZdEvtE1V4DcJP6/6KvljEnplafWpVZC3pn7Gxp8XRcVZt+Ts8k/5d6ZL&#xA;IkMbvJeHjbIkUNPrk1DGkZaMKRuOB4/y7UxVmeKuxV2KuxViWsND5a1x9YmKp5d1pkg1z1Kenb3X&#xA;ERQXbV2CSqFgl/55nYBziqW/llpjabd6jBozyz+TJj6+nTzp6aiZnNVtannJB6fH94VAYjkC5Zmx&#xA;Vn+KsM/MmW+jn8qPZM8ci69aBpUp/dyrJbyqa/zRTv8AdiqbXnD/AB1pFQef6L1Pi1dqfWLCu33Y&#xA;qnuKuxV2KpT5h0S61M6dLaXn1K7026N3BKYhMpLW81syshZNuNwT164qlUXlbzXHq9zqi+YYfrF1&#xA;bwWsg+oDjwtnmdKfvutblq4qqah5d83X1hc2UvmCERXUTwyFbAV4yKVNP33gcVXQeW/MPp2lte61&#xA;HcWVtJBI0SWYiZ/qzrIg5+q9PijFdsVZLiqSedrW5uvKeqwWsTT3DW7mOFBV3KjlxUd2NKAYqlOh&#xA;ebtGsra4huriRuV3dTwFLK+U+lcTvOqyI8NVdPUKn5V2rQKpj/jzyz/v+f8A6Q7v/qliqQ+bfMek&#xA;6pBaC0e4lFpJJctBHZXrzyutvJHFFEoiAqzS7knanvUKsw0CzmstC06znAE9tawwygGo5xxqrUPz&#xA;GKo7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq06I6MjqGRgQykVBB2IIOKt4q7FUFq+h6RrEEdv&#xA;qdrHdwxSCaJJRULIFKhh4Hi5H04qh9M8qeXNLuzeafp8NtdGNofXRfj9N2VmQE70ZkUkewxVNcVd&#xA;irsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdiqlPd2tvx+sTRw8q&#xA;8fUYLWnWlT74qqghgCDUHcEdCMVdirsVdiqA1vX9F0KxN9q95FZWobgJZWpyahbio6s3FSaAVoDi&#xA;rtE17RtcsVv9IvIr20Y8fViaoDAAlWHVWoQaHfFUfirsVdiqyaaGCJ5ppFiijHJ5HIVVA6kk7DFU&#xA;Hpuv6FqjOmmala3zRV9VbaaOYrQ0PIIzUxVH4q7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXm/wCa&#xA;3m78w9EdJfKGlLqcOmpFdavHyUu0U7SIqiM/EVX0DyKsCOQb7KtVVgmnX3l7W9Ok1GTzfoCSXrPc&#xA;y6xfaZJba9bySt6npWzPd1DQ8wsPDlwXgOLg1ZVln5b/AJkecdf1SO51CC1n8raldyadoupQK8Es&#xA;skEE05naFjIArrbNypIeLELQFXAVer4q7FXmH5lee9Fi1ibyzdavFpdvBpt1eXkklxHarcXSCL6t&#xA;Yeqzo/xrN6siJRmXiK8SwxVBflv5CsdU8oabqiXNhHHcxco3sLCzlZlRioWe4uluzLx48fg4U+yK&#xA;UxVE3Om3nlLUo1sbiztGcxn1rJRa21Z3McS6lpys8axzyrwW7gCsr9V48qqvQvL+tRazpcd6kTW8&#xA;hZ4rm1kp6kM8LmOaJ6bEo6kVGx6jY4qmOKuxV5h+bM+narDZro2oW175h0a6S5j0ZYzftLxdZOEs&#xA;EId0+KJSGbiOo5LXmqqb+R77yPYmUWvDRNZ1hkur/RLqR4ZY7h15SJFBP6ZoHZt414nr4YqzjFXY&#xA;q7FXml4t95n1uEFYZGuJ7v8ARiXSevbWVlps628t39XPwTXdxMw9Evsibj7Lq6qX+dLDWtDvbW71&#xA;6Vdb8uc/STUWW3ttR06ilvVgmtorb0iiqzclJ5UCcRyrir0DylqGoXFldWWpuJtS0i5exu7gAL63&#xA;FElhmIUKoaW3mjdwooGJA2GKp3iqS+crbWrny5dx6NK8d8ODhYmEcssaOGmgjlP9080YaNZP2Sa1&#xA;FK4qlHkbWYF9PRxcyXdlPB9e8vXs7O8stkWAe3laT4zNaOwRufxcSnIl+eKsxxV2KuxV2KuxV2Ku&#xA;xV2KuxV2KpBYFIvPOsQmoaewsLhSf2qSXUThfHhxUn/WGKoXVPyx8l6peveXllI8krM00S3Nwtu4&#xA;kKNKjW4kEPGZoUaUcPjKjlXFVXXo7eHWfJ9lbIsaw38rx28ahVSCLTLuKoUbKqmVF+kYqyTFXYq8&#xA;r8ozeaH8zea9S0HTrG/T69Jpt9JqF7NZSfWLS5uJgUWK0veSC3u4YwSV+x0pTFWUfl/c6iV1q01K&#xA;G3hvYNQlmkFncNdQEXYE6hZXit2JXnxaqDcYqp+frHTrm80VLwhYbxr7T79z/wAsE+nXEs4b/J9W&#xA;3hb5gYqpflnc3dxDqU11UXNx+j7m8U/s3U2l2pmG3Q7KSPevfFWa4q86/MzQdX1PVNPt+atpWpyW&#xA;lgpaWotXEsk11N9TkjltrlprdfTQzKfTYVoakYqnmm/lt5c06xhsrabU0hhQIAmq6jEDQU5cIp44&#xA;1J6/CoHgMVdqf5a+W9RsZrK6l1OSGZSpD6rqMoBI2bhNPJGxHUclI8RiqRflnoWs6bq2oQF1XStM&#xA;ku7BispH1pzLHNazfU444ra2aG3YxuYQPUY14igxV6NirsVYDY2Wp2WrzR2CLNqWgzXPGykf0xd6&#xA;VqsouUKORRXhljMaFtiY2BK8+QVR2uSaz5h0+TTrvSZNE0aQctYvNRltGb6qvxSxwpazXI5SKCrO&#xA;7KEUkip2xVMfJazTadcazPGYptduW1AQsOLLCyJDahlO6v8AVYYi4PRqjFU/xV2KvOfNek6npuuW&#xA;UWliOK01bUY7qyvZWZI9O1Lcz/CgJdL+Iupj+EGQtVg0gOKvRsVdirsVdirsVdirsVdirsVdiqUa&#xA;95eXU5La8trmTT9Xsef1LUIgrFVkp6kUsbfDLDJwXmh8AVKsFYKvL7b88NZl8szakk3lad0iuZYr&#xA;o6tJbsy27OFJ05oZZw8nCqRrMeX842xV6P5a0lHdfMN1fjV9QvoF9C9VPRgjtZeMgjtYauY43IVm&#xA;5MzsQOTGigKsgxV2KsM0nVNM0XWfNXqQXJFzrCvSzs7q7+L9F2BcuLWKbhyLV+Kld/fFUh/L7X7D&#xA;Rp9at9TS6tZprlbhEazuj8Eqll5cYjxbiQSjUYdxiqG813smq6q080d0+nXsbWFnaS2zW13c27lW&#xA;uLKytJmWZmuWUC4upljSOIfD+1IFXoPlXSLrTtOke/ZX1XUJnvdSdN0E0gCiNDQVSGJEhQncqgrv&#xA;iqc4qxjz1FeSjQUs7hba4OqxcJmj9UL+4m/Y5JX78VV/0V5y/wCpgg/6QB/1WxV36K85f9TBB/0g&#xA;D/qtiqh5FivIhryXlwtzcDVZecyx+kG/cQ/scnp9+KsnxV2Ksd82Wt1bPa+ZNPiaa90nn9Zt0BL3&#xA;FhJQ3MKqK8pF4LLEKVLoF2DNiqF1q7t/M11Z+X7GRbjSrqGPUNZuI2BRrFzWCAEdfrjKQexiVxty&#xA;XFWWYq7FXYq8w/Mbyf5x1u8kS2NxPYte2lxALe+e2RLWBFMlu8Ky26+obhPVWWrNTZShAbFV1hE1&#xA;5dXtpHoeurdafKIrmFvMN0COah43H+m/ErowII2rUdQQFUadEvqfDoWucu1fMV1Svv8A6af1YqzD&#xA;y9b6rbaJZQatMs+pRQqt1KrFwXA/nKx8/duK8utB0xVMMVdirsVdirsVdirsVdiqRzeSPK83rLJZ&#xA;fubhzLParJKttI7Eli9uriFuRYlqrvU1xVO1VVUKoCqooqjYADsMVbxV2KpNe+UNGvLya8c3kE9w&#xA;Vac2l/e2ayMqLGHdLaaJGbgiryIrQAdhiqET8vfLiSyzRyamk05BmlTV9UV3KrxXmwuQWouwr0xV&#xA;MdI8s6FpEkk1hZpHdTALPeOWluZQDUCW4lLyvT/KY4qmeKuxVBaxpNtqtibS4Z4wHjmimiIWSOWF&#xA;1likQkMKq6A7gg9CCKjFUsGgeZQKDzPckDYFrWzLH58YlFfkBirjoHmUih8z3IB2JW1sww+XKJhX&#xA;5g4qmej6TbaVYi0t2eQF5JpZpSGkklmdpZZHICirO5OwAHQACgxVG4q7FXYqluh+XNH0OK5i0u3F&#xA;ul3O91OOTNWRwBtyJoqqoVVGyqAAAMVTLFXYq7FXYqsW3gWd7hY1FxIqxyTBRzZIyxRS3UhTIxA7&#xA;VPjiq/FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7&#xA;FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq8/m1jzQPOUmsCWP/DVteQ6D+jfUYSM87Kr3bR8GHNb&#xA;iSNUFR+65seoxV6BirsVdirFvzB0LVdY06zisjLJBBc+tf2VvOtvLcQ+k68Ed1aJmV2VgklFNPtK&#xA;QDiqSflj54e6hOg6vHc2l7Dc3Vvpj37q9xNDbytwhuGDPxu4oOLOjEl0pKpYFuKr0TFXYq7FUu1/&#xA;XbbRrD6zNHJcTSusFnZQANPcTvXhFEpKjkaEkkhVUFmIUEhVJL3RPPOqadcvLrv6GvpI3+p2enxx&#xA;PDFIRWMTzzxySzUanIxiKo2p3xVD6GfM9zolprOk6rJeNKlbjRtWWEhZUJSa3W5toopI5I5VZCzr&#xA;KKj7PfFWR6BrttrNh9Zhjkt5onaC8spwFnt50pzilUFhyFQQQSrKQykqQSqmOKuxVj+uea2sdbst&#xA;AsLI32sX8MtzFG8qW8CQwMqu8kjcnPxSAcYo3buQBviqQ65+ZOveWmlufMvlh7XRIR+81Wzu0u0r&#xA;SrERlIHCjtz4sx+FVZiqlVn2KuxV2KuxV5Tpnmq4k0TQtXGqa0+o30ulveRy2FxHp3G8uIVuqSyW&#xA;iRLEI5X4N6nhQ4q9WxV2KuxV2KuxV2KuxV2KuxVA61q0Ok6bJfSxyTBGjjjgiCmSWWaRYoo05FV5&#xA;PI6qOTAb7kYq8vuPMgsPPM+ua75Um0syW1usU1/PbRwJdRmVDMLkSNaGWSGVI68+dF49NsVekeWf&#xA;Mln5g097y2QxmKVreeIvFJxkSh2eF5I2VlYMpVuh7HbFU2xV2KpF5yv9UstKjlsGkiVriNL28ghN&#xA;1Nb2zV5yxwBX5kGi/ZIUHmQQtCq85hGm+eE1L9G31ve+Z9JlMTzwsbeDVrSB+VvOkkf2JoHbgtxF&#xA;X0Z1YfYbgVWR+RPzGmvYZLLXba8gltbwaZFq9xatDFcT0jHpzBAUhnWSURN/uqST+6Yg8Qq9AxV2&#xA;KsdaNL3z/SbddF02Oa2U9PV1GaaN5KfzIllxU+Dt4nFUm8m6L5ls9Vs3vbe6geG1lj1y9ubz6zDf&#xA;3TGPhNbwiaUpujkF0Tgp4BSPsqpx5KmhnXW5rNxLpcmq3DafKpqjgpH9ZKkbEfXPXG2KtiH6n5/D&#xA;Q0Caxpskl0tafvdOmiSNwvdmS9Ks3gijsMVZFirsVeS+ar/yFPr11p35mXrckuTJotk8kiWSwAUj&#xA;kX6qQ3qUb4/rBry+x8NDirGvMdv+RTPHqOkeZ203UrRVGnrD9YuEWVVpGxRQLlgO/GZR44q9c/Ly&#xA;68x3XlDT7jzEUbVJFYyMjRvyTkRGWaKkZYpQniB8h0xVkeKuxVJ/MWrXtl9RtbG1jurzU52tYRNO&#xA;1tGpWCWdi0qRzuDwhbjRDv4Yq82s7f8AMQ+ZP8JSSQTaVY2FvKlk99EFIt5IuNZ00kSGuwICj2IO&#xA;KvTvLurz6pYSTXFuttcQXE9rPFHIZo+dvI0bFJCkRZar3QYqmeKuxV2KuxV2KuxV2KuxVi35ltGn&#xA;lTlLNJbxjUdJLzwgmRB+lLarIAr1YdvhOKobSr3WJxJJ5b8xWfmOCAhJ7K/KR3EbU+w1zaJ+6/1Z&#xA;LZm98VTHygt4r60t5a29lOL9eVvaStNCo+pW1OLtFbk16n4BirIcVdirsVYN508lztONd0IyQajB&#xA;Ibh0twvq+rxCtcW6sQplKjjLE3wTp8LUYI6qpZ5WvfL3mnVpkudQa01oPbX2q6Dbyx/VL2S2K/V7&#xA;6NZENxxrbqGUMrKU9OVaruq9MxV2KsZ8wTJoeu2vmOWiaZLCdP1mboIk5+pa3Eh6COJ2kRz29Tka&#xA;KpxVX881k8uPbCpiv7mxsbjgSCbe9vIbacAjpWKVt8VY/fv5htNdltbL67bCC7sotEsra2H6LOm8&#xA;YRcmaVYjGhH777TqyhV9MfzKpx5fnGua9deY4mD6TDD+j9FlG4mUv6l3cIe8cjpGiH9r0+QqrKcV&#xA;ZPirHPPQvDp1pwF0dL+tL+nBYc/rRsvSkr6fpfvv770ufpfHw5ccVRHlWXyabExeV2sfqqmskdj6&#xA;Y4v39RU3D1+1y+KvXfFUbrGlWOo24W8luIoYquWt7q4szShB5PbyREinZjTFXnOkaRptj51tW8ka&#xA;i97bPK36bjgZZbaJQRyFxcIAkjFeXESs84fjRhH6gKr1TFXYqkPm790NGvx1stUten/L2WsPf/lr&#xA;/wA+uKsT0R9Sb84tSmm06/jZoLiKW6lFLD6ogtRa+i/Mq0nOORmAQN+83qEGKsr8hnn5Ytrv9nUJ&#xA;brUU/wBS+upbpP8AhZh/biqf4q7FXYq7FXYq7FXYq7FUv1/Sf0tpclmJjby84Z7e4Ch/TntpUnhc&#xA;oSOQWSNSVruNsVY5qvkzzFqsiTX17o0l1EpWG8TS7qK5jB6iK4j1FJo6/wCSwxVO/K3l+TRLCWGe&#xA;8kv7u5ma4urmQykF2VUCoJpJ5FREjVQGkY7dcVTjFXYq7FXYqwHzJ+XN7eardzaS9lbWWryw3OpG&#xA;WEG4hvIQIxeWzhT+99NEC7rxZeVTUjFWfYq7FWnRHRkdQyMCGUioIOxBBxVid9+XyfVktdH1a60q&#xA;yinguYtNAjuLRXtp0uIwiSqZY0DxD93HKqU2C4qi5fKEmojhr+q3GqWp/vNOCx21m/tJHEokkU90&#xA;kkZD3XFWQoiIioihUUAKoFAANgABireKuxVLdT8seWtVkEuqaTZ38i7K91bxTMB7F1bFUGn5f+Q0&#xA;dXTy3paupBVhZW4II3BBCYqnkcccUaxxqEjQUVFAAAHYAYquxV2KoHWtKi1XTZLKSRoSzRyRTpTl&#xA;HLDIssUi8gRVJEVt/DFUsbSPObKV/wAQwrUU5LYLyFe45SsK/MHFU30rTbfS9Ls9MtuRtrGCO2hL&#xA;nk3CFAi8jtU0XfFUVirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsV&#xA;dirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVY5+YWoeYNP8AKV3deXopZ9WWW1SGOCAXMvCS&#xA;6ijmZYiVDFYWdtzQUqdhiryQ/mP+aH7z4daKRSGGWVdDtzGsitxKtIJeAIbY74q9O/LHVvNupaTf&#xA;v5mguIbqC+aK0N1bLaSPb/V4XDemjOpHqvIvIHt4jFWYYq7FXYqkfnbXbvQvLk+o2cQmulltoIUa&#xA;OSYcrq5jtw3pQ/vJOPq8uC7tSm1cVecH8wfzbr/vDDTnSv8Ah7W/sfWPT5f3vX0P3tPH4cVeieRN&#xA;ev8AXvK9rqWoQrb3zvcQXMSJJEoktbiS3YiOb94lTFXi246Yqn+KqN7dR2lnPdyBmjt43ldUUsxC&#xA;KWIVRUk7bAYq8/8AyQ/MDUfOfl2/udSlSe9tL6eH1Iomij9HmfSUVABIUfOlK74qyy+85+WrC8nt&#xA;Lq89Oa1KrdH05WjiLIsg9WVVMafA6seTCgNTtiqdYq7FXYqwLzf+a1noGqxW6WzXVlAt02qzFLhG&#xA;jNmkU0qQH0jFK6W0kk5UP9mNh1xVlHlnzRo/mXTTqOkyNJbLK8D+pG8TLJGaMCrgH3BGxHTFU1xV&#xA;2KuxV2KsUtPOGqTR2eqyabHH5c1GaKC0uROWuuNzIsVtO8PphPTmd12EhZQVJ6sEVZXirsVdirsV&#xA;dirsVdirsVdirsVeQatp/kI+ddR+tW2lHzM3mbTWtvVS3+vGI2dkxKch63EvzO21a++KvX8Vdirs&#xA;VSbWtdvbPUrLTNPsPr17eQ3FyA0ywRpFbNCjkuQ55FrlKAL47+KqT+YD521TSpLSLQ7eKb1IZoZD&#xA;fiiyQTJMh2hr9qMdMVSK38y6m2pXENxq7xebrbVoLaXyzFLbzQ/Up5IpAFjCeqY1s5w7TmhEgb9g&#xA;cMVZh5EJfynp90f+P5Xv69a/XZGua/T6tf14qn2KuxViP5X6HpWj+XLu20y3W2gbVtWZkUsQSmoT&#xA;Qr9onpHEq/RirHPOs2pDyL5yubEPO099dRzLGpYtCLZbSRWFK0Xh19hir1HFXYqlnmbQotd0O60q&#xA;WT0luApVyokUPG6yJzjNBInJBzQ/aWq98VeEXi+ZLLWo9GtqPJZa1DcR6VqDc4b+RIjBdw6ZqU54&#xA;857KZo2tL0lhWqSMoOKst/5xsuNKj8r61o1lKQ2l6vcQrazKkV1HbhI1g9aJQPi4LwZtwzK1GOKv&#xA;XcVdirsVeVatqOj6Dol7d6lqV7o/nK0V5AXuJpTfXC/YFtbSyLb3cU5IVIlHwBuP7txVVWP+aLv8&#xA;2PK/lfSxf2dhJpdvNDOLW0ikl+ryiYvZ2jTtchpnjl9MRgW6o7KqmRa8sVZTps2g6jJo8vlHVb7X&#xA;dTknt57vWTdzzQpaeost0Ln4vqyerHVFt0QUdgVRQpZVXpmKuxV2KuxV2KuxV2KuxV2KvN9Q07T5&#xA;I9XvntYXvl81aWBdNGplAW809R8ZHLZduvTFXpGKuxV2KvMbvQdD17827m01vTbPU7eO0mkVL21t&#xA;7kj0Y7EIqtNG7ooN1I3FCKk1NcVZP/yqz8sf+pQ0T/uHWn/VPFXn9prFn5F86+ZLfStAml02BJX+&#xA;raPaWsMaLHbWdypmWM2yt6bXMgDkFuJpU4q9S8pWjWflTRbRiS1vYW0RLGpJSFV3Pjtiqa4qxvz5&#xA;bW93pthaXUST2txqdjHPbyqHjkQzqSro1VYbdDiqUNpehaL51hg8safY2V+NF1OWa1tYY4Q8gnsj&#xA;B6ywhWI5FqfM0xVIr/T/ADfF5Mn1Oz1mKbRtWtnv71TFHHL/AKeOcgiHCZTtJ8Pxj+OKs88mXN7P&#xA;oQF26yS2t1e2SSKnDlHZXcttGzLVviKQgmmKp5irsVeL/m1ZxXP5becTMpeCDW4pJY1biWX/AEZK&#xA;Voe7jscVYV+Semavr+jvBaay8GraXzm01pYokleVH9O4V76OP6w9IGtG35ookUSJKAEVV6P+V35o&#xA;+ade80XvlnX7KCO8sIZGuHgWRZIXilCKtxyHpM0impMZAB6Ch+FV6tirsVeTeYJND8w+XbuLVNYu&#xA;LnzVd1+oaHYSv69ndI1beNdOEkau0Eiq0klwONQWLJHTiqpat51/MvVPKEdufK9tb3WoOLNNaW7h&#xA;ntBOHKJcW1vIFkZnkTlbrKVXkU5PTfFUfot15Y0OPQ7TydrEsrRy2un3Xlm5nlnnMDssMjtazMZr&#xA;SS3WsrkIq0Vgy7hgq9PxV2KuxV2KuxV2KuxV2KuxVgN9aaz9Yv8AS00q5k+ta/p+oxXq+j9X+rw3&#xA;FnNIxYyBgVWBxTjWo2rUYqz7FXYq7FWD3ejeYbDz9N5hs7A39tNA8QSOWJDSZLdXDeq0fFlayUgj&#xA;kCGI2OKpx+nvM3/Usz/9JVp/1UxVhE/5eeYdd83XWqalatZ6bfuDfRnUZ4GaJlgjeEW9kzRTo8Fo&#xA;qP60gqXY8fhAxV6virsVY/53hvX0u1ks4mlltr60nYKjykLHMCWMcfxuF6kLvTFWP+XdP1mf8xTr&#xA;15+8R9MuLaV0s7qzjRvWtWiX/SvidnCOfh6UxVHaFNZ2vlK28vavYXj/AFGH6hLAtndSrJHbExRs&#xA;skUbIwdEVgQ3fFU58m2N1ZeVtMgvIzFfegst7ESCVuJv3sy1FRtI7dMVTnFXYqxrV/y58p6ubwah&#xA;Bcyw6hIJby1W+vY7eSReNGaCOZIq/u1P2eor1xV59/yoOTSvzA0/W/KsttpmkQXEVxPWSc3aIr85&#xA;7eGoZWjuDUvzfwUfAOJVezYq7FXYq0FUEkAAt9o+PzxVh9p5Y8wx2mneX5Xtf0Bpc1tLDeK0hupY&#xA;rKVZrWAwlQiMrRIHl9RuQH2QW+FVmNBUGm42B70OKuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2K&#xA;uxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2Ku&#xA;xV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2Kv/9k=</xmpGImg:image>
               </rdf:li>
            </rdf:Alt>
         </xmp:Thumbnails>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xmpMM="http://ns.adobe.com/xap/1.0/mm/"
            xmlns:stRef="http://ns.adobe.com/xap/1.0/sType/ResourceRef#"
            xmlns:stEvt="http://ns.adobe.com/xap/1.0/sType/ResourceEvent#">
         <xmpMM:RenditionClass>proof:pdf</xmpMM:RenditionClass>
         <xmpMM:OriginalDocumentID>uuid:65E6390686CF11DBA6E2D887CEACB407</xmpMM:OriginalDocumentID>
         <xmpMM:DocumentID>xmp.did:30216694603DE8119D1B9EA1544AC446</xmpMM:DocumentID>
         <xmpMM:InstanceID>xmp.iid:30216694603DE8119D1B9EA1544AC446</xmpMM:InstanceID>
         <xmpMM:DerivedFrom rdf:parseType="Resource">
            <stRef:instanceID>xmp.iid:0CDF9E805E3DE8119D1B9EA1544AC446</stRef:instanceID>
            <stRef:documentID>xmp.did:0CDF9E805E3DE8119D1B9EA1544AC446</stRef:documentID>
            <stRef:originalDocumentID>uuid:65E6390686CF11DBA6E2D887CEACB407</stRef:originalDocumentID>
            <stRef:renditionClass>proof:pdf</stRef:renditionClass>
         </xmpMM:DerivedFrom>
         <xmpMM:History>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:198CD0445E3DE8119D1B9EA1544AC446</stEvt:instanceID>
                  <stEvt:when>2018-04-11T13:00:25+05:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS6 (Windows)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:0CDF9E805E3DE8119D1B9EA1544AC446</stEvt:instanceID>
                  <stEvt:when>2018-04-11T13:01:24+05:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS6 (Windows)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:30216694603DE8119D1B9EA1544AC446</stEvt:instanceID>
                  <stEvt:when>2018-04-11T13:16:15+05:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS6 (Windows)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
            </rdf:Seq>
         </xmpMM:History>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:illustrator="http://ns.adobe.com/illustrator/1.0/">
         <illustrator:StartupProfile>Web</illustrator:StartupProfile>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xmpTPg="http://ns.adobe.com/xap/1.0/t/pg/"
            xmlns:stDim="http://ns.adobe.com/xap/1.0/sType/Dimensions#"
            xmlns:xmpG="http://ns.adobe.com/xap/1.0/g/">
         <xmpTPg:NPages>1</xmpTPg:NPages>
         <xmpTPg:HasVisibleTransparency>False</xmpTPg:HasVisibleTransparency>
         <xmpTPg:HasVisibleOverprint>False</xmpTPg:HasVisibleOverprint>
         <xmpTPg:MaxPageSize rdf:parseType="Resource">
            <stDim:w>800.000000</stDim:w>
            <stDim:h>800.000000</stDim:h>
            <stDim:unit>Points</stDim:unit>
         </xmpTPg:MaxPageSize>
         <xmpTPg:PlateNames>
            <rdf:Seq>
               <rdf:li>Cyan</rdf:li>
               <rdf:li>Magenta</rdf:li>
               <rdf:li>Yellow</rdf:li>
               <rdf:li>Black</rdf:li>
            </rdf:Seq>
         </xmpTPg:PlateNames>
         <xmpTPg:SwatchGroups>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <xmpG:groupName>Default Swatch Group</xmpG:groupName>
                  <xmpG:groupType>0</xmpG:groupType>
                  <xmpG:Colorants>
                     <rdf:Seq>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>White</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>255</xmpG:red>
                           <xmpG:green>255</xmpG:green>
                           <xmpG:blue>255</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>Black</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>0</xmpG:red>
                           <xmpG:green>0</xmpG:green>
                           <xmpG:blue>0</xmpG:blue>
                        </rdf:li>
                     </rdf:Seq>
                  </xmpG:Colorants>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <xmpG:groupName>Grays</xmpG:groupName>
                  <xmpG:groupType>1</xmpG:groupType>
                  <xmpG:Colorants>
                     <rdf:Seq>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=0 G=0 B=0</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>0</xmpG:red>
                           <xmpG:green>0</xmpG:green>
                           <xmpG:blue>0</xmpG:blue>
                        </rdf:li>
                     </rdf:Seq>
                  </xmpG:Colorants>
               </rdf:li>
            </rdf:Seq>
         </xmpTPg:SwatchGroups>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:pdf="http://ns.adobe.com/pdf/1.3/">
         <pdf:Producer>Adobe PDF library 10.01</pdf:Producer>
      </rdf:Description>
   </rdf:RDF>
</x:xmpmeta>
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                           
<?xpacket end="w"?>%  &&end XMP packet marker&&[{ai_metadata_stream_123}<</Type /Metadata /Subtype /XML>>/PUT AI11_PDFMark5[/Document1 dict begin /Metadata {ai_metadata_stream_123} defcurrentdict end /BDC AI11_PDFMark5
%ADOEndClientInjection: PageSetup End "AI11EPS"
%%EndPageSetup
1 -1 scale 0 -800 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 800 li
800 800 li
800 0 li
cp
clp
0 800 mo
800 800 li
800 0 li
0 0 li
0 800 li
cp
false sop
/0 
[/DeviceCMYK] /CSA add_res
0 0 0 0 cmyk
ef
82.208 235.522 mo
195.481 235.522 li
195.481 122.25 li
82.208 122.25 li
82.208 235.522 li
cp
ef
212.845 235.522 mo
326.119 235.522 li
326.119 122.25 li
212.845 122.25 li
212.845 235.522 li
cp
ef
343.362 235.522 mo
456.635 235.522 li
456.635 122.25 li
343.362 122.25 li
343.362 235.522 li
cp
ef
473.999 235.522 mo
587.273 235.522 li
587.273 122.25 li
473.999 122.25 li
473.999 235.522 li
cp
ef
604.519 235.522 mo
717.789 235.522 li
717.789 122.25 li
604.519 122.25 li
604.519 235.522 li
cp
ef
82.208 366.16 mo
195.481 366.16 li
195.481 252.768 li
82.208 252.768 li
82.208 366.16 li
cp
ef
212.845 366.16 mo
326.119 366.16 li
326.119 252.768 li
212.845 252.768 li
212.845 366.16 li
cp
ef
343.362 366.16 mo
456.635 366.16 li
456.635 252.768 li
343.362 252.768 li
343.362 366.16 li
cp
ef
473.999 366.16 mo
587.273 366.16 li
587.273 252.768 li
473.999 252.768 li
473.999 366.16 li
cp
ef
604.519 366.16 mo
717.789 366.16 li
717.789 252.768 li
604.519 252.768 li
604.519 366.16 li
cp
ef
82.208 496.677 mo
195.481 496.677 li
195.481 383.406 li
82.208 383.406 li
82.208 496.677 li
cp
ef
212.845 496.677 mo
326.119 496.677 li
326.119 383.406 li
212.845 383.406 li
212.845 496.677 li
cp
ef
343.362 496.677 mo
456.635 496.677 li
456.635 383.406 li
343.362 383.406 li
343.362 496.677 li
cp
ef
473.999 496.677 mo
587.273 496.677 li
587.273 383.406 li
473.999 383.406 li
473.999 496.677 li
cp
ef
604.519 496.677 mo
717.789 496.677 li
717.789 383.406 li
604.519 383.406 li
604.519 496.677 li
cp
ef
82.208 627.314 mo
195.481 627.314 li
195.481 513.922 li
82.208 513.922 li
82.208 627.314 li
cp
ef
212.845 627.314 mo
326.119 627.314 li
326.119 513.922 li
212.845 513.922 li
212.845 627.314 li
cp
ef
343.362 627.314 mo
456.635 627.314 li
456.635 513.922 li
343.362 513.922 li
343.362 627.314 li
cp
ef
473.999 627.314 mo
587.273 627.314 li
587.273 513.922 li
473.999 513.922 li
473.999 627.314 li
cp
ef
604.519 627.314 mo
717.789 627.314 li
717.789 513.922 li
604.519 513.922 li
604.519 627.314 li
cp
ef
82.208 757.835 mo
195.481 757.835 li
195.481 644.56 li
82.208 644.56 li
82.208 757.835 li
cp
ef
212.845 757.835 mo
326.119 757.835 li
326.119 644.56 li
212.845 644.56 li
212.845 757.835 li
cp
ef
343.362 757.835 mo
456.635 757.835 li
456.635 644.56 li
343.362 644.56 li
343.362 757.835 li
cp
ef
473.999 757.835 mo
587.273 757.835 li
587.273 644.56 li
473.999 644.56 li
473.999 757.835 li
cp
ef
604.519 757.835 mo
717.789 757.835 li
717.789 644.56 li
604.519 644.56 li
604.519 757.835 li
cp
ef
172.213 163.354 mo
171.621 162.765 170.913 162.409 170.087 162.409 cv
107.72 162.409 li
106.894 162.409 106.068 162.765 105.596 163.354 cv
105.004 163.945 104.65 164.771 104.532 165.717 cv
100.634 202.096 li
100.634 202.452 li
100.634 203.16 100.988 203.75 101.462 204.222 cv
101.934 204.812 102.76 205.168 103.47 205.168 cv
103.824 205.286 li
173.983 205.286 li
174.222 205.168 li
175.047 205.168 175.755 204.812 176.229 204.222 cv
176.82 203.75 177.056 203.16 177.056 202.452 cv
177.056 202.096 li
173.275 165.717 li
173.157 164.771 172.803 163.945 172.213 163.354 cv
172.213 163.354 li
cp
170.087 160.992 mo
171.267 160.992 172.331 161.583 173.157 162.291 cv
173.983 163.119 174.458 164.299 174.693 165.599 cv
178.474 201.978 li
178.474 202.452 li
178.474 203.514 178 204.576 177.292 205.286 cv
176.583 205.994 175.52 206.466 174.458 206.584 cv
174.222 206.584 174.104 206.702 173.983 206.702 cv
103.824 206.702 li
103.706 206.702 103.47 206.584 103.35 206.584 cv
103.35 206.584 li
102.17 206.466 101.226 205.994 100.516 205.286 cv
99.6895 204.576 99.2178 203.514 99.2178 202.452 cv
99.2178 202.332 99.2178 202.096 99.2178 201.978 cv
100.516 190.285 101.344 177.056 103.114 165.481 cv
103.232 164.299 103.824 163.119 104.532 162.291 cv
105.358 161.583 106.422 160.992 107.72 160.992 cv
170.087 160.992 li
cp
.75021 .679683 .670222 .90164 cmyk
f
166.189 184.496 mo
165.835 184.496 165.481 184.26 165.481 183.788 cv
165.481 183.434 165.835 183.08 166.189 183.08 cv
175.874 183.08 li
176.229 183.08 176.583 183.434 176.583 183.788 cv
176.583 184.26 176.229 184.496 175.874 184.496 cv
166.189 184.496 li
cp
118.943 184.496 mo
118.587 184.496 118.233 184.26 118.233 183.788 cv
118.233 183.434 118.587 183.08 118.943 183.08 cv
158.748 183.08 li
159.103 183.08 159.456 183.434 159.456 183.788 cv
159.456 184.26 159.103 184.496 158.748 184.496 cv
118.943 184.496 li
cp
101.816 184.496 mo
101.462 184.496 101.108 184.26 101.108 183.788 cv
101.108 183.434 101.462 183.08 101.816 183.08 cv
111.5 183.08 li
111.973 183.08 112.208 183.434 112.208 183.788 cv
112.208 184.26 111.973 184.496 111.5 184.496 cv
101.816 184.496 li
cp
f
165.363 152.488 mo
112.329 152.488 li
112.329 160.992 li
165.363 160.992 li
165.363 152.488 li
cp
111.619 151.07 mo
166.071 151.07 li
166.425 151.07 166.779 151.424 166.779 151.778 cv
166.779 161.7 li
166.779 162.172 166.425 162.409 166.071 162.409 cv
111.619 162.409 li
111.265 162.409 110.911 162.172 110.911 161.7 cv
110.911 151.778 li
110.911 151.424 111.265 151.07 111.619 151.07 cv
111.619 151.07 li
cp
f
115.281 178.236 mo
114.455 178.236 113.627 178.592 113.155 179.182 cv
112.564 179.654 112.208 180.482 112.208 181.308 cv
112.208 186.386 li
112.208 187.214 112.564 188.041 113.155 188.513 cv
113.627 189.103 114.455 189.458 115.281 189.458 cv
116.107 189.458 116.817 189.103 117.407 188.513 cv
117.997 188.041 118.233 187.214 118.233 186.386 cv
118.233 181.308 li
118.233 180.482 117.997 179.772 117.407 179.182 cv
117.407 179.182 li
116.817 178.592 116.107 178.236 115.281 178.236 cv
115.281 178.236 li
cp
115.281 176.82 mo
116.461 176.82 117.643 177.41 118.351 178.118 cv
118.469 178.236 li
119.179 178.946 119.651 180.126 119.651 181.308 cv
119.651 186.386 li
119.651 187.568 119.179 188.749 118.351 189.577 cv
117.643 190.285 116.461 190.875 115.281 190.875 cv
114.099 190.875 112.919 190.285 112.091 189.577 cv
111.383 188.749 110.792 187.568 110.792 186.386 cv
110.792 181.308 li
110.792 180.126 111.383 178.946 112.091 178.118 cv
112.919 177.41 114.099 176.82 115.281 176.82 cv
115.281 176.82 li
cp
f
162.526 178.236 mo
161.7 178.236 160.875 178.592 160.4 179.182 cv
159.811 179.654 159.456 180.482 159.456 181.308 cv
159.456 186.386 li
159.456 187.214 159.811 188.041 160.4 188.513 cv
160.875 189.103 161.7 189.458 162.526 189.458 cv
163.354 189.458 164.063 189.103 164.653 188.513 cv
165.125 188.041 165.481 187.214 165.481 186.386 cv
165.481 181.308 li
165.481 180.482 165.125 179.772 164.653 179.182 cv
164.653 179.182 li
164.063 178.592 163.354 178.236 162.526 178.236 cv
162.526 178.236 li
cp
162.526 176.82 mo
163.708 176.82 164.771 177.41 165.599 178.118 cv
165.599 178.236 li
166.425 178.946 166.897 180.126 166.897 181.308 cv
166.897 186.386 li
166.897 187.568 166.425 188.749 165.599 189.577 cv
164.771 190.285 163.708 190.875 162.526 190.875 cv
161.229 190.875 160.164 190.285 159.338 189.577 cv
158.512 188.749 158.038 187.568 158.038 186.386 cv
158.038 181.308 li
158.038 180.126 158.512 178.946 159.338 178.118 cv
160.164 177.41 161.229 176.82 162.526 176.82 cv
162.526 176.82 li
cp
f
280.408 211.19 mo
283.478 207.294 285.25 201.742 285.486 195.599 cv
285.604 191.465 285.958 187.095 286.194 182.724 cv
286.668 175.52 287.022 168.197 287.022 161.937 cv
287.022 157.684 285.958 150.952 283.006 146.228 cv
280.998 142.919 278.164 140.677 274.265 140.677 cv
255.366 140.677 251.823 155.794 251.823 172.213 cv
251.823 177.646 252.178 183.198 252.531 188.395 cv
252.768 190.875 252.886 193.237 253.003 195.599 cv
253.357 201.742 255.13 207.412 258.084 211.311 cv
260.8 214.853 264.581 217.097 269.069 217.097 cv
273.675 217.097 277.573 214.853 280.408 211.19 cv
280.408 211.19 li
cp
286.904 195.599 mo
286.668 202.096 284.778 207.884 281.47 212.019 cv
278.399 216.035 274.147 218.515 269.069 218.515 cv
263.988 218.515 259.974 216.153 256.902 212.136 cv
253.832 208.002 251.941 202.096 251.587 195.599 cv
251.47 193.473 251.352 190.993 251.115 188.513 cv
250.759 183.316 250.405 177.646 250.405 172.213 cv
250.405 155.086 254.186 139.259 274.265 139.259 cv
278.753 139.259 281.942 141.857 284.186 145.52 cv
287.376 150.479 288.438 157.566 288.438 161.937 cv
288.438 168.197 288.084 175.638 287.612 182.844 cv
287.376 187.214 287.022 191.703 286.904 195.599 cv
286.904 195.599 li
cp
f
251.823 161.7 mo
251.47 161.7 251.115 161.347 251.115 160.992 cv
251.115 160.636 251.47 160.282 251.823 160.282 cv
287.73 160.282 li
287.73 161.7 li
251.823 161.7 li
cp
251.233 178.118 mo
287.14 178.118 li
287.494 178.118 287.848 178.474 287.848 178.828 cv
287.848 179.3 287.494 179.536 287.14 179.536 cv
251.233 179.536 li
251.233 178.118 li
cp
252.414 196.073 mo
286.194 196.073 li
286.55 196.073 286.904 196.427 286.904 196.781 cv
286.904 197.135 286.55 197.489 286.194 197.489 cv
252.414 197.489 li
252.414 196.073 li
cp
260.328 214.026 mo
278.045 214.026 li
278.399 214.026 278.753 214.263 278.753 214.734 cv
278.753 215.089 278.399 215.442 278.045 215.442 cv
260.328 215.442 li
260.328 214.026 li
cp
261.626 142.329 mo
281.47 142.329 li
281.824 142.329 282.18 142.683 282.18 143.037 cv
282.18 143.511 281.824 143.747 281.47 143.747 cv
261.626 143.747 li
261.626 142.329 li
cp
f
250.995 175.874 mo
250.642 175.756 250.405 175.401 250.405 175.047 cv
250.523 174.575 250.877 174.458 251.352 174.458 cv
260.446 176.702 270.249 152.252 270.367 152.252 cv
270.485 151.897 270.839 151.66 271.195 151.778 cv
271.431 151.897 271.549 152.134 271.667 152.37 cv
271.667 152.37 277.81 176.702 286.904 174.458 cv
287.258 174.458 287.612 174.575 287.73 175.047 cv
287.848 175.401 287.612 175.756 287.258 175.874 cv
278.518 178 272.611 160.519 270.839 154.614 cv
268.241 160.4 259.618 178 250.995 175.874 cv
250.995 175.874 li
cp
f
439.748 171.741 mo
360.372 171.741 li
360.372 187.568 li
360.372 191.939 362.144 195.835 364.979 198.79 cv
367.813 201.624 371.829 203.396 376.199 203.396 cv
423.919 203.396 li
428.289 203.396 432.188 201.624 435.02 198.79 cv
437.974 195.835 439.748 191.939 439.748 187.568 cv
439.748 171.741 li
cp
359.664 170.323 mo
440.456 170.323 li
440.811 170.323 441.164 170.677 441.164 171.031 cv
441.164 187.568 li
441.164 192.293 439.154 196.663 436.086 199.733 cv
432.896 202.924 428.643 204.812 423.919 204.812 cv
376.199 204.812 li
371.475 204.812 367.104 202.924 364.034 199.733 cv
360.844 196.663 358.954 192.293 358.954 187.568 cv
358.954 171.031 li
358.954 170.677 359.19 170.323 359.664 170.323 cv
359.664 170.323 li
cp
f
440.456 210.6 mo
435.732 200.087 li
435.378 200.443 434.901 200.797 434.43 201.151 cv
433.84 201.624 433.25 202.096 432.541 202.452 cv
436.912 212.136 li
440.456 210.6 li
cp
436.676 198.553 mo
441.99 210.718 li
442.227 211.072 441.99 211.428 441.637 211.546 cv
436.794 213.791 li
436.439 213.909 436.086 213.791 435.85 213.435 cv
431.008 202.452 li
430.885 202.096 431.008 201.624 431.361 201.506 cv
432.188 201.034 432.896 200.562 433.604 200.087 cv
434.312 199.498 434.901 198.907 435.496 198.317 cv
435.732 198.081 436.203 197.961 436.439 198.317 cv
436.558 198.317 436.676 198.436 436.676 198.553 cv
436.676 198.553 li
cp
358.01 210.718 mo
363.442 198.553 li
363.442 198.436 363.442 198.317 363.56 198.317 cv
363.798 197.961 364.27 198.081 364.506 198.317 cv
365.096 198.907 365.806 199.498 366.515 200.087 cv
367.223 200.562 367.931 201.034 368.641 201.506 cv
368.995 201.624 369.112 202.096 368.995 202.452 cv
364.152 213.435 li
364.034 213.791 363.56 213.909 363.206 213.791 cv
358.364 211.546 li
358.01 211.428 357.892 211.072 358.01 210.718 cv
358.01 210.718 li
cp
364.27 200.087 mo
359.664 210.6 li
363.206 212.136 li
367.458 202.452 li
366.868 202.096 366.278 201.624 365.687 201.151 cv
365.214 200.797 364.742 200.443 364.27 200.087 cv
364.27 200.087 li
cp
f
432.069 180.244 mo
432.069 179.89 432.424 179.536 432.777 179.536 cv
433.131 179.536 433.485 179.89 433.485 180.244 cv
433.485 187.568 li
433.485 191.465 431.834 195.009 429.352 197.489 cv
426.755 200.087 423.211 201.624 419.431 201.624 cv
418.959 201.624 418.723 201.388 418.723 200.916 cv
418.723 200.562 418.959 200.206 419.431 200.206 cv
422.856 200.206 426.043 198.79 428.289 196.545 cv
430.649 194.301 432.069 191.111 432.069 187.568 cv
432.069 180.244 li
cp
f
359.664 176.82 mo
359.19 176.82 358.954 176.466 358.954 176.111 cv
358.954 175.756 359.19 175.401 359.664 175.401 cv
440.456 175.401 li
440.811 175.401 441.164 175.756 441.164 176.111 cv
441.164 176.466 440.811 176.82 440.456 176.82 cv
359.664 176.82 li
cp
f
387.42 164.181 mo
386.594 163.354 385.53 162.765 384.35 162.645 cv
383.996 162.645 383.76 162.291 383.76 161.937 cv
383.642 160.4 382.932 158.866 381.87 157.92 cv
380.806 156.858 379.271 156.266 377.617 156.266 cv
376.081 156.266 374.545 156.858 373.483 157.92 cv
372.419 158.984 371.711 160.4 371.593 161.937 cv
371.593 162.291 371.356 162.645 371.003 162.645 cv
369.82 162.765 368.759 163.354 368.048 164.299 cv
367.223 165.127 366.75 166.189 366.75 167.371 cv
366.75 167.725 366.515 168.079 366.16 168.079 cv
365.214 168.197 364.27 168.551 363.56 169.141 cv
363.206 169.495 362.852 169.851 362.498 170.323 cv
392.736 170.323 li
392.5 169.851 392.145 169.495 391.672 169.141 cv
391.082 168.551 390.256 168.197 389.31 168.079 cv
388.956 168.079 388.72 167.725 388.72 167.371 cv
388.72 166.189 388.248 165.007 387.42 164.181 cv
387.42 164.181 li
cp
385.058 161.347 mo
386.358 161.583 387.538 162.291 388.484 163.236 cv
389.31 164.181 389.9 165.481 390.136 166.779 cv
391.082 167.015 391.908 167.489 392.618 168.079 cv
393.444 168.787 394.152 169.733 394.625 170.795 cv
394.745 171.149 394.506 171.623 394.152 171.741 cv
394.034 171.741 394.034 171.741 393.917 171.741 cv
361.436 171.741 li
360.962 171.741 360.726 171.503 360.726 171.031 cv
360.726 170.913 360.726 170.913 360.726 170.795 cv
361.198 169.615 361.79 168.669 362.734 167.961 cv
363.442 167.371 364.388 167.015 365.332 166.779 cv
365.568 165.481 366.16 164.299 366.986 163.354 cv
367.813 162.291 368.995 161.7 370.295 161.347 cv
370.531 159.574 371.239 158.038 372.537 156.858 cv
373.837 155.558 375.609 154.85 377.617 154.85 cv
379.625 154.85 381.516 155.558 382.813 156.858 cv
383.996 158.038 384.822 159.574 385.058 161.347 cv
385.058 161.347 li
cp
f
388.838 145.991 mo
388.484 145.637 388.012 145.401 387.538 145.401 cv
386.948 145.401 386.476 145.637 386.122 145.991 cv
385.766 146.345 385.53 146.817 385.53 147.289 cv
385.53 147.881 385.766 148.354 386.122 148.708 cv
386.476 149.062 386.948 149.297 387.538 149.297 cv
388.012 149.297 388.484 149.062 388.838 148.708 cv
389.192 148.354 389.428 147.881 389.428 147.289 cv
389.428 146.817 389.192 146.345 388.838 145.991 cv
388.838 145.991 li
cp
387.538 143.983 mo
388.366 143.983 389.31 144.337 389.9 144.927 cv
390.492 145.52 390.846 146.345 390.846 147.289 cv
390.846 148.235 390.492 149.062 389.9 149.653 cv
389.31 150.244 388.366 150.716 387.538 150.716 cv
386.594 150.716 385.766 150.244 385.058 149.653 cv
384.468 149.062 384.114 148.235 384.114 147.289 cv
384.114 146.345 384.468 145.52 385.058 144.927 cv
385.766 144.337 386.594 143.983 387.538 143.983 cv
387.538 143.983 li
cp
f
397.343 155.676 mo
396.989 155.322 396.515 155.086 395.925 155.086 cv
395.453 155.086 394.98 155.322 394.625 155.676 cv
394.506 155.676 li
394.152 156.03 394.034 156.504 394.034 157.094 cv
394.034 157.566 394.152 158.156 394.506 158.512 cv
394.862 158.748 395.334 158.984 395.925 158.984 cv
396.515 158.984 396.989 158.748 397.343 158.512 cv
397.697 158.156 397.933 157.566 397.933 157.094 cv
397.933 156.504 397.697 156.03 397.343 155.676 cv
397.343 155.676 li
cp
395.925 153.668 mo
396.871 153.668 397.697 154.142 398.287 154.732 cv
398.877 155.322 399.351 156.148 399.351 157.094 cv
399.351 158.038 398.877 158.866 398.287 159.456 cv
397.697 160.046 396.871 160.4 395.925 160.4 cv
394.98 160.4 394.152 160.046 393.563 159.456 cv
392.973 158.866 392.618 158.038 392.618 157.094 cv
392.618 156.148 392.973 155.322 393.563 154.732 cv
393.563 154.614 li
394.152 154.024 394.98 153.668 395.925 153.668 cv
395.925 153.668 li
cp
f
408.326 148.943 mo
407.972 148.589 407.5 148.354 406.91 148.354 cv
406.319 148.354 405.848 148.589 405.493 148.943 cv
405.14 149.297 404.903 149.771 404.903 150.361 cv
404.903 150.833 405.14 151.306 405.493 151.66 cv
405.848 152.016 406.319 152.252 406.91 152.252 cv
407.5 152.252 407.972 152.016 408.326 151.66 cv
408.68 151.306 408.798 150.833 408.798 150.361 cv
408.798 149.771 408.68 149.297 408.326 148.943 cv
408.326 148.943 li
cp
406.91 146.936 mo
407.854 146.936 408.68 147.289 409.273 148 cv
409.863 148.589 410.218 149.416 410.218 150.361 cv
410.218 151.306 409.863 152.134 409.273 152.724 cv
408.68 153.314 407.854 153.668 406.91 153.668 cv
405.965 153.668 405.14 153.314 404.549 152.724 cv
403.955 152.134 403.602 151.306 403.602 150.361 cv
403.602 149.416 403.955 148.589 404.549 148 cv
405.14 147.289 405.965 146.936 406.91 146.936 cv
406.91 146.936 li
cp
f
397.579 148.354 mo
397.343 148.117 396.989 148 396.633 148 cv
396.279 148 395.925 148.117 395.688 148.354 cv
395.453 148.708 395.334 148.943 395.334 149.416 cv
395.334 149.771 395.453 150.125 395.688 150.361 cv
395.925 150.598 396.279 150.716 396.633 150.716 cv
396.989 150.716 397.343 150.598 397.579 150.361 cv
397.815 150.125 398.051 149.771 398.051 149.416 cv
398.051 148.943 397.815 148.708 397.579 148.354 cv
397.579 148.354 li
cp
396.633 146.581 mo
397.461 146.581 398.051 146.936 398.641 147.407 cv
399.115 147.881 399.469 148.589 399.469 149.416 cv
399.469 150.125 399.115 150.833 398.641 151.306 cv
398.051 151.778 397.461 152.134 396.633 152.134 cv
395.925 152.134 395.217 151.778 394.745 151.306 cv
394.152 150.833 393.917 150.125 393.917 149.416 cv
393.917 148.589 394.152 147.881 394.745 147.407 cv
395.217 146.936 395.925 146.581 396.633 146.581 cv
396.633 146.581 li
cp
f
550.658 138.549 mo
554.675 141.267 li
555.029 141.621 555.383 142.093 555.383 142.565 cv
555.501 142.919 555.383 143.511 555.146 143.865 cv
546.17 156.74 li
545.935 156.976 545.458 157.094 545.104 156.858 cv
539.317 152.724 li
538.964 152.488 538.846 152.134 539.082 151.778 cv
548.059 138.905 li
548.412 138.549 548.767 138.313 549.238 138.195 cv
549.711 138.077 550.187 138.195 550.658 138.549 cv
550.658 138.549 li
cp
553.845 142.447 mo
549.828 139.613 li
549.711 139.613 549.593 139.613 549.475 139.613 cv
549.356 139.613 549.356 139.731 549.238 139.731 cv
540.734 152.016 li
545.34 155.322 li
553.963 143.037 li
553.963 142.919 554.081 142.801 553.963 142.801 cv
553.963 142.683 553.963 142.565 553.845 142.447 cv
553.845 142.447 li
cp
f
534.357 161.11 mo
513.214 191.229 li
512.506 192.293 511.68 194.183 510.854 195.953 cv
510.5 196.899 510.023 197.843 509.67 198.553 cv
512.033 200.323 li
512.978 199.379 li
514.752 197.843 517.23 195.481 517.938 194.537 cv
538.964 164.417 li
534.357 161.11 li
cp
512.033 190.403 mo
533.531 159.692 li
533.768 159.456 534.239 159.338 534.594 159.574 cv
540.38 163.591 li
540.734 163.827 540.852 164.299 540.616 164.653 cv
519.122 195.363 li
518.292 196.427 515.814 198.79 513.922 200.443 cv
512.624 201.742 li
512.388 201.978 512.033 201.978 511.68 201.742 cv
508.371 199.379 li
508.018 199.261 508.018 198.79 508.136 198.553 cv
508.607 197.725 509.079 196.545 509.552 195.363 cv
510.382 193.473 511.208 191.583 512.033 190.403 cv
512.033 190.403 li
cp
f
513.686 215.799 mo
514.275 213.791 513.686 210.6 510.5 206.23 cv
507.31 210.6 506.837 213.791 507.428 215.799 cv
507.899 217.333 509.197 218.161 510.5 218.161 cv
511.798 218.161 513.096 217.333 513.686 215.799 cv
513.686 215.799 li
cp
511.09 204.576 mo
515.105 209.892 515.814 213.791 514.988 216.271 cv
514.275 218.515 512.388 219.577 510.5 219.577 cv
508.607 219.577 506.837 218.515 506.129 216.271 cv
505.299 213.791 506.012 209.892 510.023 204.576 cv
510.26 204.34 510.617 204.222 510.972 204.458 cv
511.09 204.576 li
cp
f
537.075 149.653 mo
548.648 157.684 li
548.648 157.802 548.767 157.802 548.767 157.92 cv
548.885 158.038 li
549.002 158.156 549.002 158.274 549.002 158.395 cv
549.002 158.395 li
549.002 158.512 549.002 158.63 549.002 158.748 cv
549.002 158.748 li
549.002 158.866 549.002 158.984 548.885 159.103 cv
544.042 166.071 li
543.924 166.189 543.807 166.307 543.688 166.425 cv
543.688 166.425 li
543.57 166.425 543.452 166.543 543.334 166.543 cv
543.216 166.543 543.216 166.543 543.098 166.543 cv
542.98 166.543 li
542.862 166.543 542.744 166.425 542.626 166.307 cv
531.049 158.274 li
530.932 158.156 530.813 158.156 530.813 158.038 cv
530.695 157.92 li
530.695 157.802 530.577 157.684 530.577 157.566 cv
530.577 157.448 530.577 157.33 530.577 157.212 cv
530.577 157.212 li
530.577 157.094 530.695 156.976 530.695 156.858 cv
532.229 154.614 534.003 152.134 535.655 149.89 cv
535.655 149.771 535.773 149.771 535.892 149.653 cv
535.892 149.653 li
536.01 149.536 536.127 149.536 536.245 149.416 cv
536.363 149.416 536.481 149.416 536.6 149.416 cv
536.718 149.536 536.958 149.536 536.958 149.653 cv
537.075 149.653 li
cp
547.351 158.748 mo
536.6 151.188 li
532.348 157.33 li
542.98 164.771 li
547.351 158.748 li
cp
f
646.094 221.467 mo
645.976 217.569 643.025 212.845 640.662 209.064 cv
639.245 214.381 635.348 215.207 631.566 215.917 cv
628.259 216.625 625.309 217.333 624.832 221.703 cv
624.832 222.057 li
624.95 223.475 625.898 224.775 627.314 225.837 cv
628.849 227.02 631.095 227.728 633.455 227.964 cv
634.049 227.964 634.639 228.082 635.111 227.964 cv
643.616 227.728 646.212 225.011 646.094 221.467 cv
646.094 221.467 li
cp
640.897 206.702 mo
641.369 207.53 li
643.97 211.546 647.514 216.979 647.632 221.349 cv
647.75 225.837 644.796 229.146 635.229 229.5 cv
634.521 229.5 633.932 229.5 633.337 229.5 cv
630.741 229.264 628.259 228.317 626.488 227.138 cv
624.597 225.72 623.416 224.065 623.416 222.057 cv
623.416 222.057 li
623.416 221.939 623.416 221.703 623.416 221.585 cv
623.889 216.035 627.433 215.325 631.331 214.499 cv
634.875 213.791 638.773 212.962 639.481 206.94 cv
639.6 206.584 639.953 206.348 640.308 206.348 cv
640.544 206.348 640.779 206.466 640.897 206.702 cv
640.897 206.702 li
cp
f
673.973 130.164 mo
696.296 145.755 li
696.532 145.991 li
697.122 146.463 697.477 147.289 697.594 148.117 cv
697.594 148.117 li
697.594 148.943 697.477 149.89 696.886 150.716 cv
696.65 150.952 li
662.514 190.639 li
643.38 177.174 li
669.008 131.58 li
669.13 131.226 li
669.72 130.518 670.546 129.928 671.372 129.808 cv
672.198 129.572 673.024 129.69 673.736 130.046 cv
673.973 130.164 li
cp
697.122 144.691 mo
674.799 128.982 li
674.444 128.864 li
673.378 128.274 672.198 128.156 671.018 128.392 cv
669.838 128.628 668.771 129.336 668.063 130.4 cv
667.71 130.872 li
641.724 177.056 li
641.605 177.41 641.724 177.764 641.96 178 cv
662.277 192.175 li
662.631 192.411 662.985 192.411 663.222 192.057 cv
697.712 151.897 li
697.83 151.778 697.948 151.66 698.066 151.542 cv
698.774 150.361 699.128 149.18 698.893 148 cv
698.893 147.881 li
698.774 146.699 698.302 145.637 697.358 144.927 cv
697.122 144.691 li
cp
f
693.578 155.794 mo
693.813 156.03 694.286 155.912 694.521 155.676 cv
694.758 155.322 694.64 154.85 694.286 154.614 cv
666.294 135.006 li
665.939 134.771 665.586 134.889 665.35 135.242 cv
665.113 135.479 665.113 135.95 665.468 136.187 cv
693.578 155.794 li
cp
f
642.672 178.474 mo
661.688 191.703 li
656.373 197.725 li
656.137 198.081 655.779 198.317 655.425 198.317 cv
655.307 198.436 655.07 198.436 654.953 198.317 cv
638.773 186.977 li
638.655 186.858 638.537 186.74 638.537 186.504 cv
638.537 186.15 638.537 185.796 638.773 185.442 cv
642.672 178.474 li
cp
663.104 190.993 mo
642.786 176.82 li
642.432 176.583 642.078 176.702 641.842 176.938 cv
637.59 184.732 li
637.235 185.324 637.117 186.032 637.117 186.623 cv
637.117 187.214 637.472 187.805 637.943 188.159 cv
654.127 199.498 li
654.599 199.852 655.307 199.852 655.896 199.733 cv
656.373 199.615 656.963 199.261 657.435 198.671 cv
663.222 192.057 li
663.457 191.821 663.457 191.347 663.104 191.111 cv
663.104 190.993 li
cp
f
667.592 152.488 mo
669.72 152.134 671.962 152.606 673.973 153.906 cv
675.86 155.322 677.04 157.33 677.395 159.456 cv
677.866 161.7 677.395 163.945 675.979 165.835 cv
674.681 167.843 672.67 169.023 670.546 169.377 cv
668.3 169.733 666.058 169.377 664.165 167.961 cv
662.159 166.661 660.979 164.653 660.625 162.409 cv
660.268 160.282 660.625 158.038 662.041 156.03 cv
663.34 154.142 665.35 152.96 667.592 152.488 cv
667.592 152.488 li
cp
674.799 152.842 mo
672.434 151.188 669.838 150.716 667.237 151.188 cv
664.76 151.542 662.396 152.96 660.861 155.204 cv
659.323 157.566 658.733 160.164 659.205 162.765 cv
659.677 165.245 661.098 167.607 663.34 169.141 cv
665.586 170.677 668.182 171.267 670.782 170.795 cv
673.26 170.323 675.624 168.905 677.158 166.661 cv
678.814 164.417 679.287 161.7 678.814 159.22 cv
678.461 156.74 677.04 154.378 674.799 152.842 cv
674.799 152.842 li
cp
f
696.414 145.045 mo
696.65 144.691 696.532 144.337 696.178 144.101 cv
695.941 143.865 695.466 143.865 695.229 144.219 cv
691.926 148.943 li
691.689 149.297 691.808 149.771 692.044 150.008 cv
692.397 150.244 692.869 150.125 693.105 149.771 cv
696.414 145.045 li
cp
f
692.279 142.211 mo
692.516 141.857 692.397 141.385 692.162 141.149 cv
691.808 140.913 691.332 141.031 691.096 141.385 cv
687.791 146.109 li
687.556 146.463 687.674 146.817 687.909 147.053 cv
688.264 147.289 688.735 147.289 688.972 146.936 cv
692.279 142.211 li
cp
f
688.146 139.259 mo
688.381 138.905 688.264 138.549 688.027 138.313 cv
687.674 138.077 687.201 138.195 686.961 138.431 cv
683.657 143.275 li
683.421 143.511 683.539 143.983 683.893 144.219 cv
684.129 144.455 684.602 144.337 684.837 143.983 cv
688.146 139.259 li
cp
f
684.011 136.425 mo
684.247 136.068 684.129 135.597 683.893 135.36 cv
683.539 135.125 683.066 135.242 682.831 135.597 cv
679.522 140.321 li
679.287 140.677 679.404 141.149 679.759 141.267 cv
679.994 141.503 680.467 141.503 680.703 141.149 cv
684.011 136.425 li
cp
f
679.877 133.47 mo
680.112 133.116 680.112 132.762 679.759 132.526 cv
679.404 132.29 678.933 132.408 678.696 132.645 cv
675.389 137.486 li
675.152 137.723 675.271 138.195 675.624 138.431 cv
675.86 138.669 676.332 138.549 676.568 138.313 cv
679.877 133.47 li
cp
f
675.742 130.636 mo
675.979 130.282 675.979 129.808 675.624 129.572 cv
675.271 129.336 674.799 129.454 674.681 129.808 cv
671.254 134.534 li
671.018 134.889 671.136 135.36 671.49 135.597 cv
671.727 135.714 672.198 135.714 672.434 135.36 cv
675.742 130.636 li
cp
f
639.836 189.458 mo
639.363 190.049 li
638.655 191.111 638.415 192.175 638.415 193.119 cv
638.415 194.183 638.773 195.127 639.6 195.717 cv
646.448 200.443 li
647.278 201.034 648.34 201.151 649.284 200.797 cv
650.229 200.443 651.172 199.733 651.767 198.79 cv
652.238 198.199 li
651.055 197.371 li
650.582 197.961 li
650.11 198.671 649.521 199.261 648.813 199.379 cv
648.223 199.615 647.632 199.615 647.278 199.379 cv
640.426 194.537 li
639.953 194.183 639.836 193.711 639.836 193.119 cv
639.836 192.411 640.071 191.583 640.544 190.875 cv
641.016 190.285 li
639.836 189.458 li
cp
f
135.597 271.313 mo
124.14 271.313 li
123.786 271.313 123.55 271.431 123.313 271.549 cv
123.075 271.785 122.958 272.021 122.958 272.375 cv
122.958 346.553 li
122.958 346.789 123.075 347.143 123.313 347.379 cv
123.55 347.497 123.786 347.615 124.14 347.615 cv
137.958 347.615 li
139.967 347.615 142.093 347.851 144.101 347.969 cv
145.873 348.207 147.525 348.325 149.18 348.325 cv
152.37 348.325 154.732 347.615 154.732 344.309 cv
139.73 344.309 li
139.377 344.309 139.141 343.955 139.022 343.599 cv
139.022 341.946 li
138.905 340.174 li
138.905 339.82 139.259 339.466 139.613 339.466 cv
154.732 339.466 li
154.732 336.158 li
139.259 336.158 li
138.905 336.158 138.549 335.804 138.549 335.45 cv
138.313 332.023 li
138.313 331.552 138.549 331.315 139.022 331.315 cv
154.732 331.315 li
154.732 327.89 li
138.549 327.89 li
138.194 327.89 137.841 327.653 137.841 327.299 cv
137.486 323.755 li
137.486 323.401 137.723 323.047 138.194 323.047 cv
154.732 323.047 li
154.732 319.741 li
137.723 319.741 li
137.369 319.741 137.015 319.503 137.015 319.148 cv
136.661 315.606 li
136.661 315.252 136.896 314.896 137.369 314.896 cv
154.732 314.896 li
154.732 311.59 li
151.542 311.59 148.943 311.826 146.817 311.944 cv
141.621 312.298 138.787 312.534 137.133 309.818 cv
137.133 309.818 li
137.015 309.582 137.015 309.346 137.133 309.11 cv
138.787 306.394 141.621 306.63 146.817 306.984 cv
148.943 307.102 151.542 307.338 154.732 307.338 cv
154.732 304.031 li
137.25 304.031 li
136.896 303.912 136.542 303.558 136.661 303.204 cv
137.015 299.897 li
137.015 299.423 137.25 299.187 137.723 299.187 cv
154.732 299.187 li
154.732 295.763 li
138.077 295.763 li
137.723 295.763 137.369 295.409 137.486 295.053 cv
137.841 291.628 li
137.841 291.274 138.077 291.039 138.549 291.039 cv
154.732 291.039 li
154.732 287.612 li
138.905 287.612 li
138.549 287.612 138.194 287.258 138.313 286.904 cv
138.549 283.478 li
138.549 283.124 138.905 282.77 139.259 282.77 cv
154.732 282.77 li
154.732 279.461 li
139.613 279.461 li
139.141 279.461 138.905 279.107 138.905 278.753 cv
139.022 276.981 li
139.022 275.327 li
139.022 274.973 139.377 274.619 139.73 274.619 cv
154.732 274.619 li
154.732 271.313 152.37 270.603 149.18 270.603 cv
147.525 270.603 145.873 270.721 144.101 270.839 cv
142.093 271.077 139.967 271.313 137.958 271.313 cv
135.597 271.313 li
cp
124.14 269.895 mo
137.958 269.895 li
139.967 269.895 142.093 269.659 143.983 269.541 cv
145.873 269.305 147.525 269.187 149.18 269.187 cv
153.196 269.187 156.148 270.249 156.148 274.737 cv
156.148 274.973 156.03 275.327 155.912 275.565 cv
155.676 275.919 155.322 276.037 154.968 276.037 cv
140.439 276.037 li
140.321 278.045 li
154.968 278.045 li
155.322 278.045 155.676 278.164 155.912 278.518 cv
156.03 278.753 156.148 278.99 156.148 279.344 cv
156.148 282.888 li
156.148 283.242 156.03 283.478 155.912 283.714 cv
155.676 284.068 155.322 284.186 154.968 284.186 cv
139.967 284.186 li
139.73 286.194 li
154.968 286.194 li
155.322 286.194 155.676 286.432 155.912 286.668 cv
156.03 286.904 156.148 287.258 156.148 287.494 cv
156.148 291.039 li
156.148 291.393 156.03 291.747 155.912 291.982 cv
155.676 292.219 155.322 292.455 154.968 292.455 cv
139.141 292.455 li
138.905 294.345 li
154.968 294.345 li
155.322 294.345 155.676 294.581 155.912 294.817 cv
155.912 294.817 li
156.03 295.053 156.148 295.409 156.148 295.763 cv
156.148 299.187 li
156.148 299.543 156.03 299.897 155.912 300.133 cv
155.676 300.369 155.322 300.605 154.968 300.605 cv
138.313 300.605 li
138.077 302.613 li
154.968 302.613 li
155.322 302.613 155.676 302.731 155.912 302.967 cv
156.03 303.204 156.148 303.558 156.148 303.912 cv
156.148 307.456 li
156.148 307.81 156.03 308.046 155.912 308.282 cv
155.676 308.638 155.322 308.756 154.968 308.756 cv
151.66 308.756 148.943 308.52 146.699 308.402 cv
146.699 308.402 li
142.329 308.046 139.849 307.928 138.549 309.464 cv
139.849 311 142.329 310.882 146.699 310.526 cv
148.943 310.408 151.66 310.172 154.968 310.172 cv
155.322 310.172 155.676 310.29 155.912 310.644 cv
156.03 310.882 156.148 311.118 156.148 311.472 cv
156.148 315.015 li
156.148 315.37 156.03 315.606 155.912 315.842 cv
155.676 316.196 155.322 316.314 154.968 316.314 cv
138.077 316.314 li
138.313 318.323 li
154.968 318.323 li
155.322 318.323 155.676 318.559 155.912 318.795 cv
156.03 319.031 156.148 319.385 156.148 319.623 cv
156.148 323.165 li
156.148 323.519 156.03 323.873 155.912 324.111 cv
155.676 324.347 155.322 324.465 154.968 324.465 cv
138.905 324.465 li
139.141 326.473 li
154.968 326.473 li
155.322 326.473 155.676 326.709 155.912 326.945 cv
156.03 327.181 156.148 327.535 156.148 327.89 cv
156.148 331.315 li
156.148 331.67 156.03 332.023 155.912 332.26 cv
155.676 332.496 155.322 332.731 154.968 332.731 cv
139.73 332.731 li
139.967 334.74 li
154.968 334.74 li
155.322 334.74 155.676 334.86 155.912 335.096 cv
156.03 335.332 156.148 335.686 156.148 336.04 cv
156.148 339.584 li
156.148 339.938 156.03 340.174 155.912 340.41 cv
155.676 340.765 155.322 340.882 154.968 340.882 cv
140.321 340.882 li
140.439 342.891 li
154.968 342.891 li
155.322 342.891 155.676 343.009 155.912 343.362 cv
156.03 343.599 156.148 343.837 156.148 344.19 cv
156.148 348.679 153.196 349.741 149.18 349.741 cv
147.525 349.741 145.873 349.623 143.983 349.387 cv
142.093 349.269 139.967 349.033 137.958 349.033 cv
124.14 349.033 li
123.432 349.033 122.722 348.797 122.25 348.325 cv
121.896 347.851 121.542 347.261 121.542 346.553 cv
121.542 272.375 li
121.542 271.667 121.896 271.077 122.25 270.603 cv
122.722 270.131 123.432 269.895 124.14 269.895 cv
124.14 269.895 li
cp
f
247.453 271.549 mo
239.656 274.737 232.216 281.352 227.492 286.194 cv
251.47 289.03 275.565 289.03 299.661 286.194 cv
295.645 282.062 289.975 276.863 283.832 273.557 cv
277.335 269.895 270.131 268.359 263.87 272.257 cv
263.634 272.375 263.398 272.375 263.162 272.257 cv
258.438 268.951 252.886 269.423 247.453 271.549 cv
247.453 271.549 li
cp
225.483 286.194 mo
230.208 281.234 238.358 273.675 246.981 270.249 cv
252.649 268.005 258.438 267.533 263.517 270.839 cv
270.249 266.942 277.691 268.595 284.542 272.257 cv
291.393 276.037 297.533 281.944 301.667 286.194 cv
301.903 286.55 301.903 286.904 301.549 287.258 cv
301.431 287.376 301.313 287.376 301.195 287.376 cv
276.037 290.446 250.995 290.446 225.837 287.376 cv
225.483 287.376 225.248 287.022 225.248 286.668 cv
225.248 286.432 225.365 286.314 225.483 286.194 cv
225.483 286.194 li
cp
f
246.153 305.92 mo
237.648 303.204 229.972 298.361 224.894 291.393 cv
224.775 291.156 224.657 291.039 224.775 290.803 cv
224.775 290.446 225.129 290.21 225.483 290.21 cv
238.123 291.156 250.877 291.628 263.517 291.628 cv
276.273 291.628 288.912 291.156 301.667 290.21 cv
301.785 290.21 301.903 290.21 302.142 290.329 cv
302.377 290.564 302.495 291.039 302.259 291.274 cv
300.133 294.109 297.653 296.707 294.817 298.833 cv
291.865 301.077 288.674 302.85 285.132 304.386 cv
284.896 304.503 284.424 304.386 284.304 304.149 cv
278.281 294.935 li
278.164 294.699 277.81 294.463 277.454 294.345 cv
277.335 294.227 li
274.383 302.377 li
274.147 302.85 li
273.911 303.204 273.793 303.676 274.029 303.912 cv
275.565 306.394 li
275.684 306.394 275.684 306.512 275.684 306.63 cv
275.801 306.984 275.565 307.338 275.091 307.456 cv
265.643 309.346 255.366 308.874 246.153 305.92 cv
246.153 305.92 li
cp
226.899 291.747 mo
231.862 297.771 238.831 302.142 246.625 304.622 cv
255.248 307.338 264.816 307.928 273.793 306.273 cv
272.847 304.74 li
272.257 303.793 272.493 303.085 272.847 302.259 cv
272.965 301.905 li
276.037 293.637 li
276.155 293.401 276.392 293.165 276.509 293.045 cv
276.627 293.045 li
276.745 292.927 277.1 292.809 277.335 292.809 cv
277.573 292.809 277.691 292.927 277.928 292.927 cv
278.518 293.165 279.107 293.637 279.461 294.227 cv
285.132 302.85 li
288.32 301.431 291.274 299.779 293.991 297.653 cv
296.235 295.999 298.361 293.991 300.133 291.747 cv
287.966 292.573 275.801 293.045 263.517 293.045 cv
251.352 293.045 239.185 292.573 226.899 291.747 cv
226.899 291.747 li
cp
f
287.494 307.338 mo
286.312 308.046 279.344 312.772 278.872 313.008 cv
278.518 313.244 278.281 313.598 278.164 313.952 cv
278.164 314.306 278.164 314.66 278.399 315.015 cv
280.172 317.497 281.824 320.331 283.596 322.929 cv
294.581 315.725 li
289.502 307.81 li
289.267 307.456 288.912 307.22 288.556 307.102 cv
288.202 307.102 287.73 307.102 287.494 307.338 cv
287.494 307.338 li
cp
278.045 311.708 mo
286.668 306.156 li
287.376 305.684 288.084 305.565 288.912 305.684 cv
289.62 305.92 290.329 306.273 290.683 306.984 cv
296.235 315.488 li
296.471 315.842 296.353 316.314 295.999 316.551 cv
283.714 324.583 li
283.36 324.819 282.888 324.701 282.652 324.347 cv
277.1 315.725 li
276.745 315.134 276.627 314.306 276.745 313.598 cv
276.863 312.89 277.335 312.18 278.045 311.708 cv
278.045 311.708 li
cp
f
296.825 315.96 mo
282.888 325.055 li
282.77 325.173 282.652 325.291 282.652 325.527 cv
282.534 325.763 282.652 326.001 282.77 326.119 cv
297.415 348.679 li
297.533 348.797 297.653 348.915 297.889 348.915 cv
298.125 349.033 298.243 349.033 298.479 348.915 cv
312.416 339.82 li
312.534 339.702 312.652 339.466 312.652 339.348 cv
312.77 339.11 312.652 338.874 312.534 338.756 cv
297.889 316.196 li
297.771 316.079 297.653 315.96 297.415 315.842 cv
297.179 315.842 297.061 315.842 296.825 315.96 cv
296.825 315.96 li
cp
282.18 323.755 mo
295.999 314.778 li
296.589 314.424 297.179 314.306 297.771 314.424 cv
298.243 314.542 298.833 314.896 299.187 315.37 cv
313.834 337.93 li
314.188 338.402 314.306 338.992 314.188 339.584 cv
314.07 340.174 313.716 340.646 313.126 341 cv
299.187 350.095 li
298.715 350.451 298.125 350.569 297.533 350.451 cv
297.061 350.331 296.589 349.977 296.235 349.505 cv
291.274 342.064 286.194 334.386 281.47 326.827 cv
281.116 326.355 280.998 325.763 281.116 325.291 cv
281.234 324.701 281.588 324.229 282.062 323.873 cv
282.18 323.755 li
cp
f
277.335 294.345 mo
274.383 302.377 li
274.147 302.85 li
274.029 303.204 273.793 303.676 274.029 303.912 cv
278.753 311.236 li
281.116 309.7 283.596 308.164 285.84 306.63 cv
278.281 294.935 li
278.045 294.699 277.81 294.463 277.454 294.345 cv
277.335 294.345 li
cp
272.965 301.905 mo
276.037 293.637 li
276.155 293.401 276.392 293.165 276.509 293.045 cv
276.627 292.927 li
276.863 292.809 277.1 292.809 277.335 292.809 cv
277.573 292.809 277.81 292.809 277.928 292.927 cv
278.518 293.165 279.107 293.637 279.461 294.227 cv
287.494 306.394 li
287.73 306.748 287.612 307.22 287.258 307.456 cv
278.99 312.89 li
278.636 313.126 278.164 313.008 277.928 312.652 cv
272.847 304.74 li
272.139 303.793 272.493 303.085 272.847 302.259 cv
272.965 301.905 li
cp
f
297.653 323.283 mo
297.415 322.929 297.533 322.457 297.889 322.339 cv
298.125 322.103 298.597 322.221 298.833 322.457 cv
307.22 335.332 li
307.456 335.686 307.338 336.158 306.984 336.394 cv
306.63 336.512 306.156 336.512 306.038 336.158 cv
297.653 323.283 li
cp
f
388.602 308.992 mo
388.484 308.874 388.248 308.756 388.13 308.638 cv
388.13 308.756 li
388.13 309.228 388.13 309.582 388.13 309.936 cv
388.13 313.952 387.066 317.732 385.294 320.331 cv
383.404 323.165 380.806 324.819 377.971 324.819 cv
375.137 324.819 372.537 323.165 370.767 320.331 cv
368.995 317.732 367.813 313.952 367.813 309.936 cv
367.813 309.582 367.813 309.228 367.931 308.756 cv
367.931 308.638 li
367.694 308.756 367.576 308.874 367.458 308.992 cv
367.104 309.346 366.868 309.818 366.868 310.408 cv
366.868 314.542 367.458 316.904 367.931 319.031 cv
368.759 322.103 369.349 324.583 367.813 330.726 cv
366.868 334.622 366.986 342.654 366.986 348.561 cv
367.104 351.985 li
388.838 351.985 li
388.838 350.095 388.602 347.851 388.248 345.371 cv
387.774 341 387.184 336.04 387.774 332.023 cv
389.192 322.221 389.192 321.511 389.074 315.015 cv
389.074 310.408 li
389.074 309.818 388.956 309.346 388.602 308.992 cv
388.602 308.992 li
cp
387.42 306.984 mo
388.248 307.102 389.074 307.456 389.546 308.046 cv
390.136 308.638 390.492 309.464 390.492 310.408 cv
390.492 315.015 li
390.61 321.631 390.61 322.339 389.192 332.26 cv
388.602 336.04 389.192 340.882 389.664 345.253 cv
390.018 348.089 390.256 350.687 390.256 352.695 cv
390.256 353.167 390.018 353.403 389.546 353.403 cv
366.396 353.403 li
366.042 353.403 365.687 353.167 365.687 352.695 cv
365.687 352.695 li
365.687 351.395 365.687 350.095 365.687 348.561 cv
365.568 342.537 365.45 334.504 366.396 330.49 cv
367.813 324.583 367.34 322.221 366.632 319.385 cv
366.042 317.141 365.45 314.66 365.45 310.408 cv
365.45 309.464 365.806 308.638 366.396 308.046 cv
366.986 307.456 367.813 307.102 368.641 306.984 cv
368.995 306.984 369.349 307.338 369.349 307.692 cv
369.349 307.81 li
369.349 308.164 369.349 308.52 369.349 308.874 cv
369.349 308.874 li
369.23 309.228 369.23 309.582 369.23 309.936 cv
369.23 313.716 370.295 317.141 371.947 319.623 cv
373.483 321.985 375.609 323.401 377.971 323.401 cv
380.333 323.401 382.459 321.985 384.114 319.623 cv
385.648 317.141 386.712 313.716 386.712 309.936 cv
386.712 309.582 386.712 309.228 386.712 308.874 cv
386.712 308.874 li
386.712 308.52 386.594 308.164 386.594 307.81 cv
386.594 307.456 386.83 307.102 387.184 306.984 cv
387.42 306.984 li
cp
f
380.923 297.179 mo
380.098 296.707 379.035 296.353 377.971 296.353 cv
375.609 296.353 373.483 297.889 371.947 300.251 cv
370.295 302.731 369.23 306.156 369.23 309.936 cv
369.23 313.716 370.295 317.141 371.947 319.623 cv
373.483 321.985 375.609 323.401 377.971 323.401 cv
380.333 323.401 382.459 321.985 384.114 319.623 cv
385.648 317.141 386.712 313.716 386.712 309.936 cv
386.712 308.992 386.594 308.046 386.476 307.102 cv
386.476 306.748 386.358 306.394 386.358 305.92 cv
381.987 311.826 li
381.87 311.944 381.751 312.062 381.634 312.062 cv
381.634 312.062 li
381.277 312.298 381.042 312.298 380.688 312.298 cv
380.333 312.18 380.098 312.062 379.861 311.944 cv
379.743 311.826 379.507 311.59 379.39 311.472 cv
378.443 312.298 li
377.499 311.354 li
378.562 310.172 li
378.443 309.936 li
377.499 310.882 li
376.553 309.818 li
377.617 308.756 li
377.499 308.402 li
376.553 309.346 li
375.609 308.282 li
376.671 307.22 li
376.553 306.866 li
375.609 307.81 li
374.545 306.748 li
375.727 305.684 li
375.491 305.448 li
374.665 306.273 li
373.601 305.33 li
374.783 304.149 li
374.427 303.676 li
374.309 303.558 374.309 303.321 374.191 303.204 cv
374.073 302.85 374.073 302.613 374.191 302.259 cv
374.191 302.259 li
374.191 301.905 374.427 301.549 374.665 301.313 cv
374.783 301.313 li
374.783 301.313 374.901 301.195 375.019 301.195 cv
383.05 298.833 li
382.342 298.243 381.751 297.653 380.923 297.179 cv
380.923 297.179 li
cp
377.971 294.935 mo
379.271 294.935 380.569 295.291 381.634 295.999 cv
382.813 296.589 383.878 297.653 384.822 298.833 cv
385.058 299.187 384.94 299.543 384.704 299.779 cv
384.586 299.897 384.468 299.897 384.468 299.897 cv
375.609 302.495 li
375.491 302.613 375.491 302.731 375.609 302.85 cv
375.609 302.967 li
380.569 310.644 li
380.688 310.764 li
380.806 310.882 380.806 310.882 380.923 310.882 cv
386.122 303.912 li
386.358 303.558 386.83 303.558 387.066 303.793 cv
387.184 303.912 387.302 304.031 387.302 304.149 cv
387.656 305.094 387.774 306.038 387.894 306.984 cv
388.012 307.928 388.13 308.874 388.13 309.936 cv
388.13 313.952 387.066 317.732 385.294 320.331 cv
383.404 323.165 380.806 324.819 377.971 324.819 cv
375.137 324.819 372.537 323.165 370.767 320.331 cv
368.995 317.732 367.813 313.952 367.813 309.936 cv
367.813 305.802 368.995 302.142 370.767 299.423 cv
372.537 296.707 375.137 294.935 377.971 294.935 cv
377.971 294.935 li
cp
f
370.767 330.844 mo
370.767 330.37 371.239 330.134 371.593 330.251 cv
371.947 330.37 372.183 330.726 372.183 331.08 cv
372.183 331.08 369.584 344.427 370.295 349.977 cv
370.295 350.451 370.057 350.805 369.703 350.805 cv
369.23 350.805 368.876 350.569 368.876 350.213 cv
368.168 344.427 370.767 330.844 370.767 330.844 cv
370.767 330.844 li
cp
f
402.893 279.698 mo
412.578 294.817 li
412.814 295.053 413.05 295.291 413.408 295.409 cv
413.645 295.409 413.88 295.409 414.116 295.291 cv
420.256 291.039 426.637 285.722 432.66 281.116 cv
432.896 280.88 433.014 280.644 433.131 280.29 cv
433.131 279.936 433.131 279.58 432.896 279.226 cv
425.453 267.651 li
425.217 267.297 424.863 267.061 424.627 266.942 cv
424.273 266.942 423.919 266.942 423.564 267.061 cv
403.012 277.928 li
402.775 278.045 402.657 278.281 402.657 278.636 cv
402.539 278.872 402.657 279.226 402.775 279.58 cv
402.893 279.698 li
cp
411.279 295.409 mo
401.713 280.526 li
401.477 280.29 li
401.241 279.698 401.123 278.99 401.241 278.399 cv
401.241 277.691 401.596 277.1 402.186 276.745 cv
406.556 273.557 417.538 268.595 422.975 265.761 cv
423.564 265.406 424.273 265.406 424.98 265.524 cv
425.689 265.761 426.279 266.232 426.637 266.825 cv
434.076 278.518 li
434.548 279.107 434.666 279.815 434.548 280.526 cv
434.43 281.234 434.076 281.824 433.485 282.298 cv
427.581 286.904 420.965 292.455 414.942 296.589 cv
414.352 296.943 413.645 296.943 413.05 296.825 cv
412.342 296.589 411.752 296.235 411.398 295.645 cv
411.279 295.409 li
cp
f
413.645 271.431 mo
424.509 288.438 li
423.211 289.148 li
412.342 272.257 li
413.645 271.431 li
cp
f
387.302 298.833 mo
388.602 300.841 li
407.146 289.03 li
405.729 286.904 li
387.302 298.833 li
cp
387.774 302.259 mo
385.294 298.361 li
392.265 293.873 399.233 289.384 406.201 284.896 cv
409.156 289.502 li
388.13 302.967 li
387.774 302.259 li
cp
f
380.098 309.936 mo
380.569 310.644 li
380.688 310.764 li
380.688 310.764 li
380.806 310.882 380.806 310.882 380.923 310.882 cv
387.538 301.905 li
386.004 299.423 li
375.491 302.495 li
375.491 302.613 375.491 302.731 375.609 302.85 cv
375.609 302.967 li
380.098 309.936 li
cp
378.443 312.298 mo
378.207 312.652 377.735 312.652 377.499 312.298 cv
377.263 312.062 377.263 311.59 377.499 311.354 cv
378.562 310.172 li
378.443 309.936 li
377.499 310.882 li
377.263 311.118 376.789 311.118 376.553 310.764 cv
376.199 310.526 376.199 310.054 376.553 309.818 cv
377.617 308.756 li
377.499 308.402 li
376.553 309.346 li
376.317 309.582 375.845 309.582 375.491 309.346 cv
375.255 308.992 375.255 308.638 375.609 308.282 cv
376.671 307.22 li
376.553 306.866 li
375.609 307.81 li
375.255 308.046 374.901 308.046 374.545 307.81 cv
374.309 307.574 374.309 307.102 374.545 306.748 cv
375.727 305.684 li
375.491 305.448 li
374.665 306.273 li
374.309 306.63 373.837 306.63 373.601 306.273 cv
373.365 306.038 373.365 305.565 373.601 305.33 cv
374.783 304.149 li
374.427 303.676 li
374.309 303.558 374.309 303.321 374.191 303.204 cv
374.073 302.85 374.073 302.495 374.191 302.259 cv
374.191 301.905 374.427 301.549 374.783 301.313 cv
374.783 301.313 li
374.901 301.313 375.019 301.195 375.137 301.195 cv
386.122 298.007 li
386.476 297.889 386.712 298.007 386.948 298.243 cv
388.956 301.549 li
389.192 301.785 389.074 302.142 388.956 302.377 cv
381.987 311.826 li
381.87 311.944 381.751 312.062 381.634 312.062 cv
381.277 312.298 381.042 312.298 380.688 312.298 cv
380.569 312.298 li
380.333 312.18 380.098 312.062 379.861 311.944 cv
379.861 311.826 li
379.625 311.708 379.507 311.59 379.39 311.472 cv
378.443 312.298 li
cp
f
568.848 285.014 mo
492.424 285.014 li
492.424 333.796 li
568.848 333.796 li
568.848 285.014 li
cp
491.716 283.596 mo
569.557 283.596 li
569.91 283.596 570.264 283.832 570.264 284.306 cv
570.264 334.504 li
570.264 334.86 569.91 335.214 569.557 335.214 cv
491.716 335.214 li
491.244 335.214 491.008 334.86 491.008 334.504 cv
491.008 284.306 li
491.008 283.832 491.244 283.596 491.716 283.596 cv
491.716 283.596 li
cp
f
491.716 310.054 mo
491.244 310.054 491.008 309.7 491.008 309.346 cv
491.008 308.992 491.244 308.638 491.716 308.638 cv
569.557 308.638 li
569.91 308.638 570.264 308.992 570.264 309.346 cv
570.264 309.7 569.91 310.054 569.557 310.054 cv
491.716 310.054 li
cp
f
510.617 284.306 mo
510.617 283.832 510.972 283.596 511.325 283.596 cv
511.798 283.596 512.033 283.832 512.033 284.306 cv
512.033 302.023 li
512.033 302.495 511.798 302.731 511.325 302.731 cv
491.716 302.731 li
491.244 302.731 491.008 302.495 491.008 302.023 cv
491.008 301.667 491.244 301.313 491.716 301.313 cv
510.617 301.313 li
510.617 284.306 li
cp
f
549.12 284.306 mo
549.12 283.832 549.356 283.596 549.828 283.596 cv
550.187 283.596 550.541 283.832 550.541 284.306 cv
550.541 301.313 li
569.557 301.313 li
569.91 301.313 570.264 301.667 570.264 302.023 cv
570.264 302.495 569.91 302.731 569.557 302.731 cv
549.828 302.731 li
549.356 302.731 549.12 302.495 549.12 302.023 cv
549.12 284.306 li
cp
f
550.541 334.622 mo
550.541 334.978 550.187 335.332 549.828 335.332 cv
549.356 335.332 549.12 334.978 549.12 334.622 cv
549.12 316.787 li
549.12 316.433 549.356 316.079 549.828 316.079 cv
569.557 316.079 li
569.91 316.079 570.264 316.433 570.264 316.787 cv
570.264 317.261 569.91 317.497 569.557 317.497 cv
550.541 317.497 li
550.541 334.622 li
cp
f
512.151 334.622 mo
512.151 334.978 511.798 335.332 511.443 335.332 cv
511.09 335.332 510.735 334.978 510.735 334.622 cv
510.735 317.497 li
491.716 317.497 li
491.362 317.497 491.008 317.261 491.008 316.787 cv
491.008 316.433 491.362 316.079 491.716 316.079 cv
511.443 316.079 li
511.798 316.079 512.151 316.433 512.151 316.787 cv
512.151 334.622 li
cp
f
694.521 289.502 mo
627.787 289.502 li
626.488 289.502 625.309 289.975 624.36 290.92 cv
623.534 291.747 622.944 293.045 622.944 294.345 cv
622.944 340.765 li
622.944 342.183 623.534 343.362 624.36 344.309 cv
625.309 345.135 626.488 345.725 627.787 345.725 cv
694.521 345.725 li
695.941 345.725 697.122 345.135 697.948 344.309 cv
698.893 343.362 699.482 342.183 699.482 340.765 cv
699.482 294.345 li
699.482 293.045 698.893 291.747 697.948 290.92 cv
697.122 289.975 695.941 289.502 694.521 289.502 cv
694.521 289.502 li
cp
627.787 288.084 mo
694.521 288.084 li
696.296 288.084 697.83 288.794 699.01 289.856 cv
700.194 291.039 700.902 292.573 700.902 294.345 cv
700.902 340.765 li
700.902 342.537 700.194 344.073 699.01 345.253 cv
697.83 346.435 696.296 347.143 694.521 347.143 cv
627.787 347.143 li
626.135 347.143 624.479 346.435 623.416 345.253 cv
622.236 344.073 621.528 342.537 621.528 340.765 cv
621.528 294.345 li
621.528 292.573 622.236 291.039 623.416 289.856 cv
624.479 288.794 626.135 288.084 627.787 288.084 cv
627.787 288.084 li
cp
f
688.617 273.203 mo
633.809 273.203 li
632.747 273.203 631.803 273.793 631.095 274.619 cv
630.387 275.447 629.915 276.745 629.915 278.045 cv
629.915 288.084 li
692.397 288.084 li
692.397 278.045 li
692.397 276.745 692.044 275.447 691.218 274.619 cv
690.506 273.793 689.562 273.203 688.617 273.203 cv
688.617 273.203 li
cp
633.809 271.785 mo
688.617 271.785 li
690.033 271.785 691.332 272.493 692.397 273.675 cv
693.342 274.855 693.813 276.392 693.813 278.045 cv
693.813 288.794 li
693.813 289.148 693.578 289.502 693.105 289.502 cv
629.203 289.502 li
628.849 289.502 628.494 289.148 628.494 288.794 cv
628.494 278.045 li
628.494 276.392 629.085 274.855 630.033 273.675 cv
630.977 272.493 632.275 271.785 633.809 271.785 cv
633.809 271.785 li
cp
f
632.983 337.694 mo
633.337 337.694 633.691 337.93 633.691 338.402 cv
633.691 338.756 633.337 339.11 632.983 339.11 cv
631.685 339.11 630.505 338.52 629.679 337.694 cv
629.561 337.694 li
628.73 336.748 628.259 335.568 628.259 334.386 cv
628.259 300.841 li
628.259 299.543 628.73 298.361 629.679 297.535 cv
630.505 296.589 631.685 296.117 632.983 296.117 cv
633.337 296.117 633.691 296.353 633.691 296.825 cv
633.691 297.179 633.337 297.535 632.983 297.535 cv
632.039 297.535 631.213 297.889 630.623 298.479 cv
630.033 299.069 629.679 299.897 629.679 300.841 cv
629.679 334.386 li
629.679 335.214 630.033 336.04 630.623 336.63 cv
630.623 336.63 li
631.213 337.222 632.039 337.694 632.983 337.694 cv
632.983 337.694 li
cp
f
689.443 339.11 mo
688.972 339.11 688.735 338.756 688.735 338.402 cv
688.735 337.93 688.972 337.694 689.443 337.694 cv
690.27 337.694 691.096 337.222 691.689 336.63 cv
692.397 336.04 692.752 335.214 692.752 334.386 cv
692.752 300.841 li
692.752 299.897 692.397 299.069 691.689 298.479 cv
691.096 297.889 690.27 297.535 689.443 297.535 cv
688.972 297.535 688.735 297.179 688.735 296.825 cv
688.735 296.353 688.972 296.117 689.443 296.117 cv
690.741 296.117 691.926 296.589 692.752 297.415 cv
693.578 298.361 694.168 299.543 694.168 300.841 cv
694.168 334.386 li
694.168 335.686 693.578 336.866 692.752 337.694 cv
691.926 338.52 690.741 339.11 689.443 339.11 cv
689.443 339.11 li
cp
f
110.792 424.509 mo
110.438 446.479 110.203 457.226 138.905 464.668 cv
167.489 457.226 167.253 446.479 166.897 424.509 cv
166.897 421.673 166.779 418.84 166.779 416.004 cv
165.717 415.768 164.889 415.532 164.181 415.296 cv
164.063 415.296 li
163.354 415.178 162.645 415.061 162.055 414.942 cv
161.818 415.061 161.583 415.061 161.464 415.178 cv
161.347 415.178 li
160.992 415.296 160.754 415.296 160.4 415.296 cv
159.811 415.296 159.22 415.178 158.748 414.942 cv
158.392 414.706 158.038 414.471 157.684 414.116 cv
156.74 413.88 155.912 413.408 153.078 411.752 cv
152.016 411.162 150.598 410.453 148.708 409.392 cv
147.881 410.453 146.699 411.279 145.045 411.87 cv
143.275 412.578 141.149 413.05 138.905 413.05 cv
136.542 413.05 134.417 412.578 132.645 411.87 cv
131.108 411.279 129.928 410.453 129.1 409.51 cv
128.038 410.336 126.974 411.162 125.794 411.87 cv
124.848 412.46 123.786 412.932 122.722 413.408 cv
122.839 413.525 122.958 413.762 123.075 413.88 cv
123.432 414.471 123.667 415.061 123.667 415.768 cv
123.667 416.713 123.195 417.538 122.604 418.133 cv
122.014 418.84 121.069 419.194 120.123 419.194 cv
119.179 419.194 118.351 418.84 117.761 418.133 cv
117.053 417.538 116.699 416.713 116.699 415.768 cv
116.699 415.414 li
114.927 415.768 112.919 416.004 110.911 416.122 cv
110.911 418.959 110.911 421.791 110.792 424.509 cv
110.792 424.509 li
cp
138.667 466.084 mo
138.667 466.084 li
108.784 458.291 109.021 447.187 109.375 424.391 cv
109.492 421.673 109.492 418.84 109.492 415.414 cv
109.492 415.061 109.847 414.706 110.203 414.706 cv
110.32 414.706 li
112.801 414.588 115.281 414.352 117.525 413.762 cv
117.997 413.645 118.351 413.88 118.469 414.234 cv
118.469 414.471 118.469 414.588 118.351 414.824 cv
118.233 414.942 118.233 415.061 118.233 415.178 cv
118.115 415.414 118.115 415.532 118.115 415.768 cv
118.115 416.24 118.351 416.83 118.705 417.185 cv
119.061 417.538 119.651 417.778 120.123 417.778 cv
120.713 417.778 121.305 417.538 121.659 417.185 cv
122.014 416.83 122.25 416.24 122.25 415.768 cv
122.25 415.296 122.131 414.942 121.896 414.588 cv
121.659 414.352 121.423 413.998 121.069 413.88 cv
120.713 413.762 120.595 413.29 120.713 412.932 cv
120.831 412.814 120.949 412.578 121.188 412.578 cv
122.485 411.988 123.903 411.398 125.083 410.572 cv
126.384 409.863 127.566 408.92 128.746 407.972 cv
128.982 407.735 129.454 407.735 129.69 407.972 cv
129.808 408.09 li
130.4 409.156 131.58 409.982 133.234 410.572 cv
134.771 411.279 136.778 411.634 138.905 411.634 cv
141.031 411.634 142.919 411.279 144.573 410.572 cv
146.109 409.982 147.289 409.156 147.881 408.09 cv
148.117 407.735 148.589 407.735 148.825 407.854 cv
150.952 409.037 152.488 409.863 153.786 410.572 cv
156.622 412.224 157.33 412.578 158.274 412.814 cv
158.512 412.814 158.63 412.932 158.748 413.05 cv
158.866 413.29 159.103 413.525 159.456 413.645 cv
159.692 413.88 160.046 413.88 160.4 413.88 cv
160.519 413.88 160.754 413.88 160.992 413.88 cv
160.992 413.762 li
161.229 413.762 161.347 413.645 161.464 413.525 cv
161.7 413.408 161.818 413.408 162.055 413.408 cv
162.645 413.525 163.473 413.762 164.417 413.998 cv
164.417 413.998 li
165.481 414.234 166.543 414.471 167.725 414.706 cv
167.961 414.824 168.197 415.178 168.197 415.414 cv
168.197 418.84 168.315 421.673 168.315 424.391 cv
168.787 447.187 168.905 458.291 139.022 466.084 cv
138.905 466.206 138.787 466.206 138.667 466.084 cv
138.667 466.084 li
cp
f
145.755 403.365 mo
143.983 402.421 141.621 401.831 138.905 401.831 cv
136.187 401.831 133.706 402.421 132.054 403.365 cv
130.4 404.191 129.454 405.375 129.454 406.674 cv
129.454 407.972 130.4 409.156 132.054 410.1 cv
133.706 411.044 136.187 411.634 138.905 411.634 cv
141.621 411.634 143.983 411.044 145.755 410.1 cv
147.289 409.156 148.354 407.972 148.354 406.674 cv
148.354 405.375 147.289 404.191 145.755 403.365 cv
145.755 403.365 li
cp
138.905 400.415 mo
141.857 400.415 144.455 401.005 146.463 402.067 cv
148.472 403.247 149.771 404.903 149.771 406.674 cv
149.771 408.562 148.472 410.1 146.463 411.279 cv
144.455 412.342 141.857 413.05 138.905 413.05 cv
135.95 413.05 133.234 412.342 131.344 411.279 cv
129.218 410.1 128.038 408.562 128.038 406.674 cv
128.038 404.903 129.218 403.247 131.344 402.067 cv
133.234 401.005 135.95 400.415 138.905 400.415 cv
138.905 400.415 li
cp
f
148.472 472.7 mo
148.472 463.252 li
147.171 463.605 145.991 464.078 144.573 464.55 cv
142.919 465.14 141.031 465.612 139.022 466.084 cv
138.905 466.206 138.787 466.206 138.667 466.084 cv
136.778 465.612 134.889 465.14 133.116 464.55 cv
131.816 464.078 130.518 463.605 129.336 463.252 cv
129.336 472.7 li
148.472 472.7 li
cp
149.89 462.189 mo
149.89 473.408 li
149.89 473.763 149.534 474.117 149.18 474.117 cv
128.628 474.117 li
128.274 474.117 127.92 473.763 127.92 473.408 cv
127.92 462.189 li
127.92 461.836 128.274 461.478 128.628 461.478 cv
128.746 461.478 128.864 461.478 128.864 461.478 cv
130.4 462.072 131.934 462.662 133.588 463.134 cv
135.242 463.724 137.015 464.196 138.905 464.668 cv
140.795 464.196 142.565 463.724 144.101 463.134 cv
145.873 462.662 147.407 462.072 148.825 461.478 cv
149.18 461.359 149.653 461.596 149.771 461.954 cv
149.771 461.954 149.89 462.072 149.89 462.189 cv
149.89 462.189 li
cp
f
150.361 471.992 mo
150.244 471.875 150.008 471.639 149.89 471.521 cv
149.89 473.408 li
149.89 473.763 149.534 474.117 149.18 474.117 cv
128.628 474.117 li
128.274 474.117 127.92 473.763 127.92 473.408 cv
127.92 471.521 li
127.684 471.639 127.566 471.875 127.328 471.992 cv
127.092 472.465 126.855 472.937 126.855 473.408 cv
126.855 474.589 128.156 475.772 130.164 476.717 cv
130.164 476.717 li
132.408 477.661 135.479 478.251 138.905 478.251 cv
142.329 478.251 145.283 477.661 147.525 476.717 cv
149.534 475.772 150.833 474.589 150.833 473.408 cv
150.833 472.937 150.716 472.465 150.361 471.992 cv
150.361 471.992 li
cp
149.534 469.511 mo
150.361 469.982 151.07 470.576 151.542 471.166 cv
152.016 471.875 152.252 472.583 152.252 473.408 cv
152.252 475.183 150.716 476.835 148.117 478.015 cv
145.755 479.077 142.447 479.671 138.905 479.671 cv
135.242 479.671 132.054 479.077 129.572 478.015 cv
129.572 477.896 li
127.092 476.835 125.438 475.183 125.438 473.408 cv
125.438 472.583 125.794 471.875 126.266 471.166 cv
126.738 470.576 127.446 469.982 128.274 469.511 cv
128.628 469.274 128.982 469.393 129.218 469.746 cv
129.336 469.864 129.336 469.982 129.336 470.101 cv
129.336 472.7 li
148.472 472.7 li
148.472 470.101 li
148.472 469.628 148.708 469.393 149.18 469.393 cv
149.297 469.393 149.416 469.393 149.534 469.511 cv
149.534 469.511 li
cp
f
121.659 414.234 mo
121.305 413.88 120.713 413.645 120.123 413.645 cv
119.651 413.645 119.061 413.88 118.705 414.234 cv
118.351 414.706 118.115 415.178 118.115 415.768 cv
118.115 416.24 118.351 416.83 118.705 417.185 cv
119.061 417.538 119.651 417.778 120.123 417.778 cv
120.713 417.778 121.188 417.538 121.542 417.185 cv
121.659 417.185 li
122.014 416.83 122.25 416.24 122.25 415.768 cv
122.25 415.178 122.014 414.706 121.659 414.234 cv
121.659 414.234 li
cp
120.123 412.224 mo
121.069 412.224 122.014 412.695 122.604 413.29 cv
123.195 413.88 123.667 414.824 123.667 415.768 cv
123.667 416.713 123.195 417.538 122.604 418.133 cv
122.604 418.25 li
121.896 418.84 121.069 419.194 120.123 419.194 cv
119.179 419.194 118.351 418.84 117.761 418.133 cv
117.053 417.538 116.699 416.713 116.699 415.768 cv
116.699 414.824 117.053 413.88 117.761 413.29 cv
118.351 412.695 119.179 412.224 120.123 412.224 cv
120.123 412.224 li
cp
f
125.794 417.896 mo
125.438 417.538 124.966 417.303 124.375 417.303 cv
123.786 417.303 123.313 417.538 122.958 417.896 cv
122.958 417.896 li
122.604 418.25 122.367 418.723 122.367 419.313 cv
122.367 419.902 122.604 420.375 122.958 420.729 cv
123.313 421.201 123.786 421.318 124.375 421.318 cv
124.966 421.318 125.438 421.201 125.794 420.729 cv
126.147 420.375 126.384 419.902 126.384 419.313 cv
126.384 418.723 126.147 418.25 125.794 417.896 cv
125.794 417.896 li
cp
124.375 415.887 mo
125.319 415.887 126.266 416.24 126.855 416.83 cv
127.446 417.538 127.802 418.368 127.802 419.313 cv
127.802 420.257 127.446 421.201 126.855 421.791 cv
126.266 422.385 125.319 422.738 124.375 422.738 cv
123.432 422.738 122.604 422.385 121.896 421.791 cv
121.305 421.201 120.949 420.257 120.949 419.313 cv
120.949 418.368 121.305 417.538 121.896 416.83 cv
122.014 416.83 li
122.604 416.24 123.432 415.887 124.375 415.887 cv
124.375 415.887 li
cp
f
130.636 420.729 mo
130.164 420.375 129.69 420.139 129.1 420.139 cv
128.51 420.139 128.038 420.375 127.684 420.729 cv
127.328 421.201 127.092 421.673 127.092 422.267 cv
127.092 422.857 127.328 423.328 127.684 423.683 cv
128.038 424.037 128.51 424.273 129.1 424.273 cv
129.69 424.273 130.164 424.037 130.518 423.683 cv
130.636 423.683 li
130.99 423.328 131.226 422.857 131.226 422.267 cv
131.226 421.673 130.99 421.201 130.636 420.729 cv
130.636 420.729 li
cp
129.1 418.723 mo
130.046 418.723 130.99 419.194 131.58 419.785 cv
132.172 420.375 132.645 421.318 132.645 422.267 cv
132.645 423.211 132.172 424.037 131.58 424.627 cv
131.58 424.745 li
130.872 425.335 130.046 425.689 129.1 425.689 cv
128.156 425.689 127.328 425.335 126.738 424.627 cv
126.03 424.037 125.676 423.211 125.676 422.267 cv
125.676 421.318 126.03 420.375 126.738 419.785 cv
127.328 419.194 128.156 418.723 129.1 418.723 cv
129.1 418.723 li
cp
f
137.841 423.447 mo
137.25 422.857 136.305 422.385 135.242 422.385 cv
134.178 422.385 133.353 422.857 132.645 423.447 cv
131.934 424.154 131.58 425.099 131.58 426.043 cv
131.58 427.109 131.934 428.053 132.645 428.643 cv
133.353 429.352 134.178 429.705 135.242 429.705 cv
136.305 429.705 137.25 429.352 137.841 428.643 cv
138.549 428.053 138.905 427.109 138.905 426.043 cv
138.905 425.099 138.549 424.154 137.841 423.447 cv
137.841 423.447 li
cp
135.242 420.965 mo
136.661 420.965 137.958 421.555 138.905 422.503 cv
139.73 423.328 140.321 424.627 140.321 426.043 cv
140.321 427.463 139.73 428.762 138.905 429.705 cv
137.958 430.649 136.661 431.125 135.242 431.125 cv
133.824 431.125 132.526 430.649 131.698 429.705 cv
130.754 428.762 130.164 427.463 130.164 426.043 cv
130.164 424.627 130.754 423.447 131.698 422.503 cv
132.526 421.555 133.824 420.965 135.242 420.965 cv
135.242 420.965 li
cp
f
145.755 424.863 mo
145.163 424.273 144.337 423.919 143.511 423.919 cv
142.565 423.919 141.739 424.273 141.149 424.863 cv
140.557 425.453 140.203 426.279 140.203 427.227 cv
140.203 428.053 140.557 428.879 141.149 429.469 cv
141.739 430.06 142.565 430.413 143.511 430.413 cv
144.337 430.413 145.163 430.06 145.755 429.469 cv
146.345 428.879 146.699 428.053 146.699 427.227 cv
146.699 426.279 146.345 425.57 145.755 424.98 cv
145.755 424.863 li
cp
143.511 422.503 mo
144.809 422.503 145.873 423.093 146.817 423.919 cv
146.817 423.919 li
147.646 424.745 148.117 425.925 148.117 427.227 cv
148.117 428.525 147.646 429.588 146.817 430.531 cv
145.873 431.361 144.809 431.834 143.511 431.834 cv
142.211 431.834 141.031 431.361 140.203 430.531 cv
139.377 429.588 138.787 428.525 138.787 427.227 cv
138.787 425.925 139.377 424.745 140.203 423.919 cv
141.031 423.093 142.211 422.503 143.511 422.503 cv
143.511 422.503 li
cp
f
150.833 422.621 mo
150.479 422.267 150.008 422.031 149.416 422.031 cv
148.825 422.031 148.354 422.267 148 422.621 cv
147.646 422.975 147.407 423.447 147.407 424.037 cv
147.407 424.627 147.525 425.099 147.881 425.453 cv
148 425.453 li
148.354 425.925 148.825 426.043 149.416 426.043 cv
150.008 426.043 150.479 425.925 150.833 425.453 cv
151.188 425.099 151.424 424.627 151.424 424.037 cv
151.424 423.447 151.188 422.975 150.833 422.621 cv
150.833 422.621 li
cp
149.416 420.61 mo
150.361 420.61 151.188 420.965 151.896 421.555 cv
152.488 422.267 152.842 423.093 152.842 424.037 cv
152.842 424.98 152.488 425.925 151.896 426.516 cv
151.188 427.109 150.361 427.463 149.416 427.463 cv
148.472 427.463 147.525 427.109 146.936 426.516 cv
146.936 426.4 li
146.345 425.807 145.991 424.98 145.991 424.037 cv
145.991 423.093 146.345 422.267 146.936 421.555 cv
147.525 420.965 148.472 420.61 149.416 420.61 cv
149.416 420.61 li
cp
f
155.322 419.313 mo
154.968 418.959 154.378 418.723 153.904 418.723 cv
153.314 418.723 152.842 418.959 152.37 419.313 cv
152.016 419.666 151.778 420.257 151.778 420.729 cv
151.778 421.318 152.016 421.791 152.37 422.148 cv
152.37 422.267 li
152.842 422.621 153.314 422.857 153.904 422.857 cv
154.378 422.857 154.968 422.621 155.322 422.267 cv
155.676 421.908 155.912 421.318 155.912 420.729 cv
155.912 420.257 155.676 419.666 155.322 419.313 cv
155.322 419.313 li
cp
153.904 417.303 mo
154.85 417.303 155.676 417.66 156.266 418.368 cv
156.976 418.959 157.33 419.785 157.33 420.729 cv
157.33 421.673 156.976 422.621 156.266 423.211 cv
155.676 423.801 154.85 424.273 153.904 424.273 cv
152.96 424.273 152.016 423.801 151.424 423.211 cv
151.424 423.211 li
150.716 422.503 150.361 421.673 150.361 420.729 cv
150.361 419.785 150.833 418.959 151.424 418.368 cv
152.016 417.66 152.96 417.303 153.904 417.303 cv
153.904 417.303 li
cp
f
158.748 415.061 mo
158.392 414.706 157.92 414.471 157.33 414.471 cv
156.74 414.471 156.266 414.706 155.912 415.061 cv
155.44 415.414 155.204 415.887 155.204 416.477 cv
155.204 417.066 155.44 417.538 155.912 417.896 cv
156.266 418.25 156.74 418.486 157.33 418.486 cv
157.92 418.486 158.392 418.25 158.748 417.896 cv
159.103 417.538 159.338 417.066 159.338 416.477 cv
159.338 415.887 159.103 415.414 158.748 415.061 cv
158.748 415.061 li
cp
157.33 413.05 mo
158.274 413.05 159.103 413.408 159.811 413.998 cv
159.811 414.116 li
160.4 414.706 160.754 415.532 160.754 416.477 cv
160.754 417.42 160.4 418.25 159.811 418.959 cv
159.103 419.549 158.274 419.902 157.33 419.902 cv
156.386 419.902 155.44 419.549 154.85 418.959 cv
154.26 418.25 153.786 417.42 153.786 416.477 cv
153.786 415.532 154.26 414.706 154.85 413.998 cv
155.44 413.408 156.386 413.05 157.33 413.05 cv
157.33 413.05 li
cp
f
161.818 410.453 mo
161.464 410.1 160.875 409.863 160.4 409.863 cv
159.811 409.863 159.22 410.1 158.866 410.453 cv
158.512 410.808 158.274 411.279 158.274 411.87 cv
158.274 412.46 158.512 412.932 158.866 413.29 cv
159.22 413.645 159.811 413.88 160.4 413.88 cv
160.875 413.88 161.347 413.645 161.818 413.408 cv
161.818 413.29 li
162.172 412.932 162.409 412.46 162.409 411.87 cv
162.409 411.279 162.172 410.808 161.818 410.453 cv
161.818 410.453 li
cp
160.4 408.443 mo
161.347 408.443 162.172 408.798 162.763 409.392 cv
163.473 410.1 163.827 410.926 163.827 411.87 cv
163.827 412.814 163.473 413.645 162.763 414.352 cv
162.763 414.352 li
162.172 414.942 161.229 415.296 160.4 415.296 cv
159.338 415.296 158.512 414.942 157.92 414.352 cv
157.33 413.645 156.858 412.814 156.858 411.87 cv
156.858 410.926 157.33 410.1 157.92 409.392 cv
158.512 408.798 159.338 408.443 160.4 408.443 cv
160.4 408.443 li
cp
f
118.825 409.628 mo
118.469 409.156 117.997 409.037 117.407 409.037 cv
116.817 409.037 116.343 409.156 115.989 409.628 cv
115.517 409.982 115.399 410.453 115.399 411.044 cv
115.399 411.634 115.517 412.105 115.989 412.46 cv
116.343 412.814 116.817 413.05 117.407 413.05 cv
117.997 413.05 118.469 412.814 118.825 412.46 cv
119.179 412.105 119.415 411.634 119.415 411.044 cv
119.415 410.453 119.179 409.982 118.825 409.628 cv
118.825 409.628 li
cp
117.407 407.617 mo
118.351 407.617 119.179 407.972 119.887 408.562 cv
119.887 408.68 li
120.478 409.273 120.831 410.1 120.831 411.044 cv
120.831 411.988 120.478 412.814 119.887 413.525 cv
119.179 414.116 118.351 414.471 117.407 414.471 cv
116.461 414.471 115.517 414.116 114.927 413.525 cv
114.337 412.814 113.98 411.988 113.98 411.044 cv
113.98 410.1 114.337 409.156 114.927 408.562 cv
115.517 407.972 116.461 407.617 117.407 407.617 cv
117.407 407.617 li
cp
f
238.948 415.65 mo
233.516 422.385 230.326 430.771 230.326 439.984 cv
230.326 444.473 231.152 448.725 232.452 452.737 cv
232.452 456.753 li
230.208 451.675 228.908 446.007 228.908 439.984 cv
228.908 429.823 232.688 420.492 238.948 413.29 cv
238.948 415.65 li
cp
269.423 399.469 mo
280.644 399.469 290.803 404.073 298.125 411.398 cv
305.448 418.723 310.054 428.879 310.054 439.984 cv
310.054 451.203 305.448 461.359 298.125 468.685 cv
290.803 476.009 280.644 480.615 269.423 480.615 cv
265.878 480.615 262.454 480.144 259.146 479.317 cv
259.146 479.195 li
259.5 478.841 259.736 478.487 259.854 477.896 cv
262.926 478.723 266.114 479.077 269.423 479.077 cv
280.29 479.077 289.975 474.707 297.061 467.622 cv
304.149 460.651 308.52 450.849 308.52 439.984 cv
308.52 429.233 304.149 419.431 297.061 412.342 cv
289.975 405.375 280.29 401.005 269.423 401.005 cv
263.752 401.005 258.32 402.186 253.478 404.313 cv
253.478 403.838 li
253.478 403.602 253.357 403.129 253.357 402.775 cv
258.202 400.651 263.752 399.469 269.423 399.469 cv
269.423 399.469 li
cp
f
269.423 407.735 mo
278.399 407.735 286.432 411.279 292.336 417.185 cv
298.125 422.975 301.785 431.125 301.785 439.984 cv
301.785 448.961 298.125 457.107 292.336 462.897 cv
286.432 468.803 278.399 472.347 269.423 472.347 cv
266.114 472.347 262.926 471.875 259.854 470.931 cv
259.854 469.393 li
262.926 470.336 266.114 470.931 269.423 470.931 cv
277.928 470.931 285.722 467.504 291.274 461.836 cv
296.825 456.281 300.369 448.606 300.369 439.984 cv
300.369 431.479 296.825 423.801 291.274 418.25 cv
285.722 412.578 277.928 409.156 269.423 409.156 cv
263.634 409.156 258.084 410.808 253.478 413.645 cv
253.478 411.87 li
258.202 409.273 263.634 407.735 269.423 407.735 cv
269.423 407.735 li
cp
f
253.003 424.037 mo
239.42 424.037 li
238.712 424.037 238.24 424.273 237.767 424.627 cv
237.412 425.099 237.176 425.57 237.176 426.279 cv
237.176 439.036 li
255.248 439.036 li
255.248 426.279 li
255.248 425.57 255.012 425.099 254.54 424.627 cv
254.186 424.273 253.596 424.037 253.003 424.037 cv
253.003 424.037 li
cp
239.42 422.621 mo
253.003 422.621 li
254.067 422.621 254.894 422.975 255.604 423.683 cv
256.194 424.273 256.666 425.217 256.666 426.279 cv
256.666 439.748 li
256.666 440.102 256.312 440.456 255.958 440.456 cv
236.468 440.456 li
235.996 440.456 235.758 440.102 235.758 439.748 cv
235.758 426.279 li
235.758 425.217 236.114 424.273 236.822 423.683 cv
237.412 422.975 238.358 422.621 239.42 422.621 cv
239.42 422.621 li
cp
f
257.138 440.456 mo
235.168 440.456 li
234.814 440.456 234.46 440.574 234.224 440.811 cv
233.988 441.046 233.87 441.4 233.87 441.754 cv
233.87 477.307 li
233.87 477.661 233.988 478.015 234.224 478.251 cv
234.46 478.487 234.814 478.605 235.168 478.605 cv
257.138 478.605 li
257.492 478.605 257.848 478.487 258.084 478.251 cv
258.32 478.015 258.556 477.661 258.556 477.307 cv
258.556 441.754 li
258.556 441.4 258.32 441.046 258.084 440.811 cv
257.848 440.574 257.492 440.456 257.138 440.456 cv
257.138 440.456 li
cp
235.168 439.036 mo
257.138 439.036 li
257.966 439.036 258.674 439.271 259.146 439.748 cv
259.618 440.338 259.854 440.928 259.854 441.754 cv
259.854 477.307 li
259.854 478.015 259.618 478.723 259.146 479.195 cv
258.674 479.789 257.966 480.025 257.138 480.025 cv
235.168 480.025 li
234.46 480.025 233.752 479.789 233.278 479.195 cv
232.806 478.723 232.452 478.015 232.452 477.307 cv
232.452 441.754 li
232.452 440.928 232.806 440.338 233.278 439.748 cv
233.752 439.271 234.46 439.036 235.168 439.036 cv
235.168 439.036 li
cp
f
251.352 402.186 mo
241.9 409.037 li
241.429 409.392 li
240.839 409.746 240.367 410.1 240.367 410.808 cv
240.367 422.621 li
252.06 422.621 li
252.06 403.838 li
252.06 403.365 251.823 402.775 251.587 402.421 cv
251.47 402.303 251.47 402.186 251.352 402.186 cv
251.352 402.186 li
cp
241.075 407.854 mo
250.523 401.005 li
250.759 400.769 250.995 400.769 251.352 400.769 cv
251.587 400.769 251.823 400.887 252.178 401.005 cv
252.295 401.123 252.531 401.359 252.768 401.596 cv
253.122 402.186 253.478 403.129 253.478 403.838 cv
253.478 423.328 li
253.478 423.683 253.122 424.037 252.768 424.037 cv
239.656 424.037 li
239.185 424.037 238.948 423.683 238.948 423.328 cv
238.948 410.808 li
238.948 409.392 239.774 408.798 240.603 408.207 cv
241.075 407.854 li
cp
f
248.633 408.68 mo
248.633 408.207 248.869 407.972 249.343 407.972 cv
249.697 407.972 250.051 408.207 250.051 408.68 cv
250.051 420.257 li
250.051 420.61 249.697 420.965 249.343 420.965 cv
248.869 420.965 248.633 420.61 248.633 420.257 cv
248.633 408.68 li
cp
f
253.003 449.314 mo
253.003 448.961 253.357 448.606 253.714 448.606 cv
254.186 448.606 254.422 448.961 254.422 449.314 cv
254.422 469.628 li
254.422 470.101 254.186 470.336 253.714 470.336 cv
238.595 470.336 li
238.24 470.336 237.886 470.101 237.886 469.628 cv
237.886 469.274 238.24 468.92 238.595 468.92 cv
253.003 468.92 li
253.003 449.314 li
cp
f
285.486 423.093 mo
285.25 422.738 285.25 422.385 285.604 422.148 cv
285.84 421.791 286.312 421.908 286.55 422.148 cv
287.14 422.857 287.612 423.447 288.084 424.154 cv
292.219 429.823 293.755 436.676 293.045 443.288 cv
292.219 449.787 289.148 456.045 283.832 460.651 cv
283.124 461.242 282.416 461.714 281.824 462.308 cv
281.47 462.544 280.998 462.426 280.762 462.072 cv
280.525 461.836 280.644 461.359 280.998 461.124 cv
281.588 460.651 282.298 460.18 282.888 459.59 cv
287.848 455.219 290.92 449.314 291.628 443.053 cv
292.336 436.794 290.803 430.413 287.022 424.98 cv
286.55 424.273 285.958 423.683 285.486 423.093 cv
285.486 423.093 li
cp
f
398.405 420.61 mo
366.278 429.469 li
364.624 429.941 363.206 430.531 362.144 431.598 cv
361.436 432.306 360.962 433.367 360.962 434.666 cv
360.962 435.968 361.554 437.266 362.38 438.21 cv
363.324 439.154 364.624 439.748 366.042 439.748 cv
367.813 439.748 li
367.931 437.03 368.995 434.548 370.767 432.777 cv
370.767 432.777 li
372.537 431.008 375.019 429.823 377.854 429.823 cv
422.267 429.823 li
424.98 429.823 427.463 431.008 429.233 432.777 cv
431.125 434.548 432.188 437.03 432.188 439.748 cv
434.076 439.748 li
435.378 439.748 436.676 439.154 437.62 438.21 cv
438.564 437.266 439.154 435.968 439.154 434.666 cv
439.154 433.367 438.682 432.424 437.855 431.598 cv
437.855 431.598 li
436.912 430.531 435.378 429.941 433.84 429.469 cv
401.831 420.847 li
401.596 420.847 401.359 420.492 401.359 420.139 cv
401.359 419.666 li
401.359 418.959 401.241 418.25 401.123 417.66 cv
401.123 416.948 400.887 416.477 400.769 415.887 cv
400.769 415.887 li
400.533 415.532 400.415 415.178 400.179 414.824 cv
399.941 414.352 399.587 413.998 399.351 413.645 cv
399.115 413.29 398.759 412.932 398.287 412.46 cv
397.815 412.105 397.225 411.516 396.515 410.926 cv
395.925 410.336 395.334 409.746 394.862 409.273 cv
394.389 408.798 394.034 408.326 393.798 407.972 cv
393.563 407.5 393.326 407.027 393.208 406.674 cv
393.09 406.201 393.09 405.729 393.09 405.258 cv
393.09 404.428 393.208 403.602 393.563 402.775 cv
393.917 402.067 394.389 401.359 395.099 400.769 cv
395.688 400.061 396.515 399.587 397.343 399.233 cv
398.051 398.997 398.995 398.759 399.941 398.759 cv
400.887 398.759 401.713 398.877 402.421 399.233 cv
403.247 399.469 403.955 399.941 404.549 400.533 cv
405.14 401.123 405.729 401.831 406.084 402.775 cv
406.438 403.483 406.674 404.313 406.791 405.14 cv
409.51 404.903 li
409.273 403.719 408.92 402.775 408.562 401.831 cv
408.09 400.769 407.381 399.941 406.556 399.233 cv
405.729 398.405 404.785 397.933 403.719 397.579 cv
402.657 397.225 401.359 396.989 399.941 396.989 cv
398.523 396.989 397.225 397.225 396.042 397.579 cv
394.862 397.933 393.917 398.523 393.09 399.351 cv
392.145 400.179 391.554 401.005 391.082 401.949 cv
390.729 402.893 390.492 403.838 390.492 405.021 cv
390.492 405.611 390.61 406.201 390.729 406.791 cv
390.846 407.381 391.082 407.972 391.437 408.443 cv
391.672 409.037 392.145 409.628 392.736 410.336 cv
393.326 411.044 394.152 411.752 395.099 412.578 cv
395.688 413.168 396.279 413.645 396.633 413.998 cv
397.106 414.471 397.461 414.824 397.697 415.178 cv
397.815 415.414 398.051 415.768 398.169 416.122 cv
398.287 416.122 li
398.405 416.477 398.523 416.83 398.641 417.185 cv
398.641 417.303 li
398.759 417.538 398.759 417.896 398.877 418.368 cv
398.877 418.84 398.877 419.313 398.995 419.902 cv
398.995 420.257 398.759 420.492 398.405 420.61 cv
398.405 420.61 li
cp
365.806 428.053 mo
397.461 419.431 li
397.461 418.604 li
397.343 418.133 397.343 417.896 397.225 417.66 cv
397.225 417.66 li
397.225 417.303 397.106 417.066 396.989 416.713 cv
396.989 416.713 li
396.871 416.477 396.633 416.24 396.515 416.004 cv
396.396 415.768 396.042 415.414 395.688 415.061 cv
395.217 414.706 394.745 414.116 394.152 413.645 cv
393.208 412.814 392.382 411.988 391.672 411.279 cv
390.964 410.453 390.492 409.746 390.136 409.156 cv
389.782 408.562 389.546 407.854 389.31 407.146 cv
389.192 406.438 389.074 405.729 389.074 405.021 cv
389.074 403.719 389.31 402.421 389.9 401.359 cv
390.374 400.179 391.082 399.233 392.026 398.287 cv
393.09 397.343 394.271 396.753 395.57 396.279 cv
396.871 395.807 398.405 395.571 399.941 395.571 cv
401.477 395.571 402.893 395.807 404.191 396.161 cv
405.493 396.635 406.556 397.225 407.5 398.169 cv
408.443 398.997 409.273 400.061 409.863 401.241 cv
410.453 402.421 410.808 403.838 410.926 405.375 cv
411.044 405.729 410.689 406.084 410.336 406.201 cv
406.319 406.674 li
405.965 406.674 405.611 406.438 405.611 406.084 cv
405.611 405.965 li
405.375 405.021 405.14 404.073 404.785 403.365 cv
404.549 402.657 404.073 402.067 403.602 401.596 cv
403.129 401.123 402.539 400.769 401.949 400.533 cv
401.359 400.297 400.651 400.179 399.941 400.179 cv
399.115 400.179 398.405 400.297 397.815 400.533 cv
397.225 400.887 396.633 401.241 396.042 401.713 cv
395.57 402.186 395.099 402.775 394.862 403.365 cv
394.625 403.955 394.506 404.549 394.506 405.258 cv
394.506 405.611 394.506 405.965 394.625 406.319 cv
394.745 406.556 394.862 406.91 394.98 407.264 cv
395.217 407.5 395.453 407.854 395.925 408.326 cv
396.279 408.798 396.871 409.273 397.461 409.863 cv
398.169 410.453 398.759 411.044 399.233 411.516 cv
399.705 411.988 400.057 412.342 400.415 412.695 cv
400.769 413.168 401.123 413.645 401.359 413.998 cv
401.596 414.471 401.831 414.942 402.067 415.414 cv
402.303 416.004 402.421 416.713 402.539 417.42 cv
402.657 418.133 402.775 418.84 402.775 419.666 cv
402.775 419.666 li
434.193 428.053 li
435.968 428.525 437.62 429.352 438.8 430.531 cv
438.918 430.649 li
439.866 431.598 440.574 433.014 440.574 434.666 cv
440.574 436.439 439.866 438.092 438.682 439.271 cv
437.502 440.456 435.85 441.164 434.076 441.164 cv
431.479 441.164 li
431.125 441.164 430.768 440.811 430.768 440.456 cv
430.768 439.748 li
430.768 437.384 429.823 435.256 428.289 433.722 cv
426.755 432.188 424.627 431.243 422.267 431.243 cv
377.854 431.243 li
375.491 431.243 373.365 432.188 371.829 433.722 cv
371.711 433.84 li
370.175 435.378 369.23 437.502 369.23 439.748 cv
369.23 440.456 li
369.23 440.811 368.995 441.164 368.522 441.164 cv
366.042 441.164 li
364.27 441.164 362.616 440.456 361.436 439.271 cv
360.254 438.092 359.546 436.439 359.546 434.666 cv
359.546 432.896 360.136 431.598 361.198 430.531 cv
362.38 429.352 364.034 428.643 365.806 428.053 cv
365.806 428.053 li
cp
f
422.267 431.243 mo
377.854 431.243 li
375.491 431.243 373.365 432.188 371.829 433.722 cv
370.295 435.256 369.23 437.384 369.23 439.748 cv
369.23 474.589 li
369.23 476.835 370.175 478.959 371.711 480.497 cv
371.829 480.615 li
373.365 482.149 375.491 483.094 377.854 483.094 cv
422.267 483.094 li
424.627 483.094 426.755 482.149 428.289 480.615 cv
429.823 479.077 430.768 476.835 430.768 474.589 cv
430.768 439.748 li
430.768 437.502 429.823 435.378 428.289 433.84 cv
428.289 433.722 li
426.755 432.188 424.627 431.243 422.267 431.243 cv
422.267 431.243 li
cp
377.854 429.823 mo
422.267 429.823 li
424.98 429.823 427.463 431.008 429.233 432.777 cv
429.352 432.777 li
431.125 434.548 432.188 437.03 432.188 439.748 cv
432.188 474.589 li
432.188 477.307 431.125 479.789 429.233 481.56 cv
427.463 483.329 424.98 484.514 422.267 484.514 cv
377.854 484.514 li
375.019 484.514 372.537 483.329 370.767 481.56 cv
370.767 481.56 li
368.995 479.671 367.813 477.307 367.813 474.589 cv
367.813 439.748 li
367.813 437.03 368.995 434.548 370.767 432.777 cv
372.537 431.008 375.019 429.823 377.854 429.823 cv
377.854 429.823 li
cp
f
368.522 460.533 mo
368.168 460.533 367.813 460.18 367.813 459.825 cv
367.813 459.354 368.168 459.117 368.522 459.117 cv
431.479 459.117 li
431.834 459.117 432.188 459.354 432.188 459.825 cv
432.188 460.18 431.834 460.533 431.479 460.533 cv
368.522 460.533 li
cp
f
549.475 407.5 mo
544.632 402.657 538.02 399.705 530.577 399.705 cv
523.252 399.705 516.521 402.657 511.798 407.5 cv
506.955 412.342 503.883 418.959 503.883 426.4 cv
503.883 435.968 516.876 457.107 525.734 471.639 cv
527.623 474.707 529.279 477.425 530.577 479.671 cv
531.993 477.425 533.649 474.707 535.537 471.639 cv
544.396 457.107 557.271 435.968 557.271 426.4 cv
557.271 418.959 554.316 412.342 549.475 407.5 cv
549.475 407.5 li
cp
530.577 398.287 mo
538.374 398.287 545.34 401.359 550.423 406.438 cv
555.619 411.516 558.688 418.604 558.688 426.4 cv
558.688 436.322 545.694 457.701 536.718 472.347 cv
534.594 475.891 532.705 478.959 531.167 481.441 cv
531.049 481.795 530.577 481.913 530.223 481.678 cv
530.105 481.678 530.105 481.56 529.987 481.441 cv
528.571 478.959 526.679 475.891 524.555 472.347 cv
515.578 457.701 502.467 436.322 502.467 426.4 cv
502.467 418.604 505.653 411.516 510.735 406.438 cv
515.814 401.359 522.898 398.287 530.577 398.287 cv
530.577 398.287 li
cp
f
542.508 413.29 mo
539.436 410.218 535.302 408.326 530.577 408.326 cv
525.971 408.326 521.719 410.218 518.764 413.29 cv
515.696 416.24 513.804 420.492 513.804 425.099 cv
513.804 429.823 515.696 433.957 518.764 437.03 cv
521.719 440.102 525.971 441.872 530.577 441.872 cv
535.302 441.872 539.436 440.102 542.508 437.03 cv
545.58 433.957 547.469 429.823 547.469 425.099 cv
547.469 420.492 545.58 416.24 542.508 413.29 cv
542.508 413.29 li
cp
530.577 406.91 mo
535.655 406.91 540.144 408.92 543.452 412.224 cv
546.761 415.532 548.885 420.139 548.885 425.099 cv
548.885 430.178 546.761 434.666 543.452 437.974 cv
540.144 441.282 535.655 443.288 530.577 443.288 cv
525.617 443.288 521.011 441.282 517.702 437.974 cv
514.394 434.666 512.388 430.178 512.388 425.099 cv
512.388 420.139 514.394 415.532 517.702 412.224 cv
521.011 408.92 525.617 406.91 530.577 406.91 cv
530.577 406.91 li
cp
f
530.577 412.578 mo
530.223 412.578 529.869 412.224 529.869 411.87 cv
529.869 411.516 530.223 411.162 530.577 411.162 cv
534.476 411.162 538.02 412.695 540.498 415.296 cv
542.98 417.778 544.632 421.318 544.632 425.099 cv
544.632 425.57 544.278 425.807 543.924 425.807 cv
543.452 425.807 543.216 425.57 543.216 425.099 cv
543.216 421.673 541.8 418.486 539.436 416.24 cv
537.193 413.998 534.121 412.578 530.577 412.578 cv
530.577 412.578 li
cp
f
698.184 455.691 mo
637.825 455.691 li
636.527 455.691 635.348 456.163 634.403 456.989 cv
633.573 457.938 633.101 459.117 633.101 460.416 cv
633.101 461.714 633.573 462.897 634.403 463.724 cv
635.348 464.668 636.527 465.14 637.825 465.14 cv
698.184 465.14 li
699.482 465.14 700.666 464.668 701.492 463.724 cv
702.437 462.897 702.908 461.714 702.908 460.416 cv
702.908 459.117 702.437 457.938 701.492 456.989 cv
700.666 456.163 699.482 455.691 698.184 455.691 cv
698.184 455.691 li
cp
637.825 454.275 mo
698.184 454.275 li
699.836 454.275 701.374 454.865 702.555 456.045 cv
703.616 457.107 704.324 458.646 704.324 460.416 cv
704.324 462.072 703.616 463.605 702.555 464.786 cv
701.374 465.848 699.836 466.561 698.184 466.561 cv
637.825 466.561 li
636.173 466.561 634.521 465.848 633.455 464.786 cv
632.393 463.605 631.685 462.072 631.685 460.416 cv
631.685 458.646 632.393 457.107 633.455 456.045 cv
634.521 454.865 636.173 454.275 637.825 454.275 cv
637.825 454.275 li
cp
f
645.858 459 mo
645.504 458.646 645.032 458.409 644.441 458.409 cv
643.852 458.409 643.38 458.646 643.025 459 cv
642.672 459.354 642.432 459.825 642.432 460.416 cv
642.432 461.006 642.672 461.478 643.025 461.836 cv
643.38 462.189 643.852 462.426 644.441 462.426 cv
645.032 462.426 645.504 462.189 645.858 461.836 cv
646.212 461.478 646.448 461.006 646.448 460.416 cv
646.448 459.825 646.212 459.354 645.858 459 cv
645.858 459 li
cp
644.441 456.989 mo
645.386 456.989 646.212 457.344 646.92 457.938 cv
647.514 458.646 647.868 459.472 647.868 460.416 cv
647.868 461.359 647.514 462.189 646.92 462.78 cv
646.212 463.488 645.386 463.842 644.441 463.842 cv
643.498 463.842 642.672 463.488 642.078 462.78 cv
641.369 462.189 641.016 461.359 641.016 460.416 cv
641.016 459.472 641.369 458.646 642.078 457.938 cv
642.672 457.344 643.498 456.989 644.441 456.989 cv
644.441 456.989 li
cp
f
654.244 466.206 mo
654.009 465.848 654.127 465.494 654.48 465.258 cv
654.835 465.021 655.188 465.14 655.425 465.494 cv
662.041 476.127 li
662.277 476.48 662.159 476.953 661.806 477.189 cv
661.451 477.307 661.098 477.189 660.861 476.953 cv
654.244 466.206 li
cp
639.128 441.872 mo
638.892 441.519 639.01 441.046 639.363 440.811 cv
639.718 440.692 640.189 440.811 640.308 441.046 cv
648.694 454.512 li
648.931 454.865 648.813 455.337 648.458 455.573 cv
648.104 455.691 647.632 455.691 647.514 455.337 cv
639.128 441.872 li
cp
f
626.725 404.549 mo
619.754 409.037 li
640.071 440.692 li
647.156 436.204 li
626.725 404.549 li
cp
618.338 408.207 mo
626.488 402.893 li
626.843 402.775 627.314 402.775 627.551 403.129 cv
648.694 436.086 li
648.931 436.439 648.813 436.794 648.458 437.03 cv
640.308 442.344 li
639.953 442.58 639.481 442.462 639.245 442.108 cv
618.102 409.156 li
617.866 408.798 617.984 408.443 618.338 408.207 cv
618.338 408.207 li
cp
f
151.424 566.72 mo
126.266 566.72 li
124.966 566.72 123.786 567.191 122.839 568.021 cv
122.839 568.14 li
122.014 568.966 121.423 570.264 121.423 571.563 cv
121.423 605.463 li
121.423 606.879 122.014 608.063 122.839 608.889 cv
123.786 609.833 124.966 610.423 126.266 610.423 cv
151.424 610.423 li
152.842 610.423 154.024 609.833 154.85 608.889 cv
155.794 608.063 156.386 606.879 156.386 605.463 cv
156.386 571.563 li
156.386 570.264 155.794 568.966 154.85 568.14 cv
154.024 567.191 152.842 566.72 151.424 566.72 cv
151.424 566.72 li
cp
126.266 565.186 mo
151.424 565.186 li
153.196 565.186 154.732 565.894 155.912 567.074 cv
157.094 568.258 157.802 569.792 157.802 571.563 cv
157.802 605.463 li
157.802 607.237 157.094 608.771 155.912 609.951 cv
154.732 611.131 153.196 611.844 151.424 611.844 cv
126.266 611.844 li
124.494 611.844 122.958 611.131 121.777 609.951 cv
120.713 608.771 120.005 607.237 120.005 605.463 cv
120.005 571.563 li
120.005 569.792 120.713 568.258 121.777 567.074 cv
121.896 567.074 li
122.958 565.894 124.611 565.186 126.266 565.186 cv
126.266 565.186 li
cp
f
156.976 588.571 mo
157.33 588.453 157.684 588.689 157.802 589.162 cv
157.802 589.516 157.566 589.874 157.212 589.992 cv
150.479 591.29 143.157 588.453 136.425 585.739 cv
130.518 583.493 124.966 581.369 120.831 582.313 cv
120.478 582.432 120.005 582.195 120.005 581.723 cv
119.887 581.369 120.123 581.015 120.478 580.893 cv
125.083 579.831 130.872 582.077 136.896 584.438 cv
143.511 587.037 150.598 589.756 156.976 588.571 cv
156.976 588.571 li
cp
156.976 603.692 mo
157.33 603.692 157.684 603.929 157.802 604.283 cv
157.802 604.755 157.566 605.109 157.212 605.109 cv
150.479 606.407 143.157 603.575 136.425 600.975 cv
130.518 598.614 124.966 596.486 120.831 597.431 cv
120.478 597.548 120.005 597.313 120.005 596.958 cv
119.887 596.486 120.123 596.132 120.478 596.014 cv
125.083 594.952 130.872 597.194 136.896 599.559 cv
143.511 602.154 150.598 604.991 156.976 603.692 cv
156.976 603.692 li
cp
156.976 573.454 mo
157.33 573.336 157.684 573.572 157.802 573.927 cv
157.802 574.398 157.566 574.753 157.212 574.87 cv
150.479 576.169 143.157 573.336 136.425 570.618 cv
132.054 568.966 127.92 567.31 124.375 566.956 cv
124.021 566.956 123.786 566.602 123.786 566.13 cv
123.786 565.775 124.14 565.54 124.611 565.54 cv
128.274 565.894 132.526 567.546 136.896 569.32 cv
143.511 571.916 150.598 574.635 156.976 573.454 cv
156.976 573.454 li
cp
f
138.313 565.775 mo
138.431 566.13 138.194 566.602 137.841 566.602 cv
137.486 566.72 137.015 566.484 136.896 566.13 cv
136.068 563.298 135.714 560.934 135.479 558.928 cv
135.36 557.035 135.479 555.383 135.833 554.081 cv
135.95 553.727 136.305 553.491 136.661 553.609 cv
137.133 553.609 137.369 554.081 137.25 554.435 cv
136.896 555.619 136.778 557.035 137.015 558.806 cv
137.133 560.697 137.486 562.939 138.313 565.775 cv
138.313 565.775 li
cp
f
145.873 545.58 mo
145.873 547.94 145.163 549.951 144.101 551.367 cv
143.393 552.311 142.329 553.137 141.267 553.609 cv
140.203 554.199 139.022 554.435 137.723 554.435 cv
137.133 554.321 li
136.661 554.321 li
135.597 554.081 134.652 553.727 133.706 553.137 cv
132.88 552.665 132.172 551.957 131.58 551.013 cv
130.518 549.475 129.928 547.351 130.046 544.868 cv
130.164 542.626 130.872 540.144 132.29 537.193 cv
132.408 536.84 132.645 536.6 132.998 536.481 cv
133.116 536.481 li
133.353 536.363 133.824 536.363 134.178 536.481 cv
134.296 536.6 134.417 536.6 134.534 536.718 cv
135.36 537.43 li
136.542 530.577 li
136.542 530.223 136.778 529.869 137.015 529.751 cv
137.133 529.633 li
137.369 529.396 137.841 529.396 138.194 529.396 cv
138.313 529.396 138.549 529.515 138.667 529.633 cv
138.667 529.633 li
138.905 529.751 139.022 529.869 139.141 529.987 cv
139.495 530.577 139.967 531.285 140.321 531.993 cv
140.675 532.823 140.913 533.768 141.149 534.711 cv
141.267 534.711 li
141.385 535.42 141.621 536.245 141.739 536.958 cv
141.857 537.783 li
142.093 537.548 142.329 537.43 142.565 537.43 cv
142.919 537.312 143.275 537.43 143.629 537.666 cv
143.747 537.783 143.865 537.783 143.865 537.901 cv
143.983 538.02 144.101 538.138 144.101 538.256 cv
145.283 541.088 145.873 543.452 145.873 545.58 cv
145.873 545.58 li
cp
142.919 550.423 mo
143.865 549.238 144.455 547.586 144.455 545.58 cv
144.455 543.688 143.865 541.446 142.801 538.846 cv
141.975 540.025 li
141.739 540.38 141.267 540.38 140.913 540.144 cv
140.795 540.025 140.675 539.908 140.675 539.672 cv
140.557 538.846 140.439 538.02 140.321 537.312 cv
140.203 536.6 139.967 535.773 139.849 535.065 cv
139.849 535.065 li
139.613 534.239 139.259 533.413 138.905 532.587 cv
138.667 531.993 138.313 531.285 137.958 530.813 cv
136.542 538.964 li
136.425 539.436 136.068 539.672 135.714 539.554 cv
135.597 539.554 135.36 539.554 135.36 539.436 cv
133.588 537.783 li
132.29 540.498 131.58 542.862 131.462 544.868 cv
131.344 547.114 131.816 548.885 132.762 550.187 cv
133.234 550.895 133.824 551.484 134.534 551.957 cv
135.242 552.429 136.068 552.665 136.896 552.9 cv
137.25 552.9 137.486 552.9 137.841 552.9 cv
138.787 553.019 139.73 552.783 140.675 552.311 cv
141.503 551.957 142.329 551.249 142.919 550.423 cv
142.919 550.423 li
cp
f
257.256 538.492 mo
285.25 566.484 li
285.486 566.838 285.486 567.31 285.25 567.546 cv
280.762 572.038 li
280.408 572.393 279.936 572.393 279.698 572.038 cv
251.706 544.042 li
251.47 543.807 251.47 543.334 251.706 543.098 cv
256.194 538.492 li
256.548 538.256 257.02 538.256 257.256 538.492 cv
257.256 538.492 li
cp
283.714 567.074 mo
256.784 540.144 li
253.239 543.57 li
280.172 570.5 li
283.714 567.074 li
cp
f
290.329 569.084 mo
291.628 569.202 292.927 569.202 294.935 571.208 cv
296.353 572.629 297.061 574.517 297.061 576.408 cv
297.061 578.297 296.353 580.185 294.935 581.723 cv
294.935 581.723 li
293.401 583.139 291.511 583.848 289.62 583.848 cv
287.73 583.848 285.722 583.139 284.304 581.723 cv
282.416 579.713 282.298 578.533 282.298 577.117 cv
282.298 575.933 282.18 574.635 279.698 572.038 cv
279.461 571.798 279.461 571.326 279.698 571.09 cv
284.186 566.484 li
284.542 566.248 285.014 566.248 285.25 566.484 cv
287.73 569.084 289.148 569.084 290.329 569.084 cv
290.329 569.084 li
cp
293.873 572.156 mo
292.336 570.618 291.274 570.618 290.329 570.618 cv
288.912 570.5 287.376 570.5 284.778 568.14 cv
281.234 571.563 li
283.714 574.162 283.714 575.696 283.714 577.117 cv
283.832 578.179 283.832 579.123 285.368 580.657 cv
286.55 581.841 288.084 582.432 289.62 582.432 cv
291.156 582.432 292.69 581.841 293.873 580.657 cv
293.873 580.657 li
295.053 579.477 295.645 577.942 295.645 576.408 cv
295.645 574.87 295.053 573.336 293.873 572.156 cv
293.873 572.156 li
cp
f
253.122 533.413 mo
253.122 532.469 253.122 531.403 251.587 529.869 cv
250.405 528.807 248.869 528.217 247.335 528.217 cv
245.799 528.217 244.263 528.689 243.083 529.869 cv
243.083 529.869 li
241.9 531.049 241.311 532.587 241.311 534.121 cv
241.311 535.655 241.9 537.193 243.083 538.374 cv
243.083 538.374 li
244.619 539.908 245.563 539.908 246.625 540.025 cv
248.043 540.025 249.579 540.144 252.178 542.508 cv
255.604 538.964 li
253.239 536.481 253.239 534.947 253.122 533.413 cv
253.122 533.413 li
cp
252.649 528.925 mo
254.54 530.813 254.54 532.111 254.658 533.413 cv
254.658 534.711 254.658 536.01 257.256 538.492 cv
257.492 538.846 257.492 539.317 257.256 539.554 cv
252.768 544.042 li
252.414 544.396 251.941 544.396 251.706 544.042 cv
249.107 541.564 247.807 541.564 246.625 541.446 cv
245.209 541.446 244.027 541.446 242.019 539.436 cv
242.019 539.436 li
240.603 537.901 239.893 536.01 239.893 534.121 cv
239.893 532.233 240.603 530.341 242.019 528.925 cv
242.137 528.807 li
243.555 527.387 245.445 526.679 247.335 526.679 cv
249.225 526.679 251.115 527.387 252.649 528.925 cv
252.649 528.925 li
cp
f
251.115 531.167 mo
251.47 531.285 251.706 531.757 251.47 532.111 cv
251.352 532.469 250.877 532.587 250.523 532.469 cv
250.523 532.469 246.153 530.341 244.027 532.469 cv
243.673 532.823 243.319 532.823 242.965 532.469 cv
242.729 532.233 242.729 531.757 242.965 531.521 cv
245.799 528.689 251.115 531.167 251.115 531.167 cv
251.115 531.167 li
cp
f
281.706 602.627 mo
253.596 574.635 li
253.357 574.398 253.357 573.927 253.596 573.69 cv
258.202 569.084 li
258.438 568.848 258.91 568.848 259.146 569.084 cv
287.258 597.076 li
287.494 597.431 287.494 597.902 287.14 598.139 cv
282.652 602.627 li
282.416 602.98 281.942 602.98 281.706 602.627 cv
281.706 602.627 li
cp
255.248 574.162 mo
282.18 601.093 li
285.604 597.666 li
258.674 570.736 li
255.248 574.162 li
cp
f
248.515 572.156 mo
247.217 572.038 245.917 572.038 244.027 570.028 cv
242.611 568.612 241.783 566.72 241.783 564.832 cv
241.783 562.939 242.611 561.052 244.027 559.518 cv
244.027 559.518 li
245.445 558.098 247.453 557.271 249.343 557.271 cv
251.233 557.271 253.122 558.098 254.54 559.518 cv
256.548 561.405 256.548 562.703 256.666 564.006 cv
256.666 565.304 256.666 566.602 259.146 569.084 cv
259.5 569.438 259.5 569.91 259.146 570.146 cv
254.658 574.635 li
254.422 574.988 253.95 574.988 253.596 574.635 cv
251.115 572.156 249.815 572.156 248.515 572.156 cv
248.515 572.156 li
cp
245.091 569.084 mo
246.625 570.618 247.571 570.618 248.633 570.618 cv
250.051 570.618 251.587 570.736 254.186 573.101 cv
257.61 569.674 li
255.248 567.074 255.13 565.54 255.13 564.124 cv
255.13 563.058 255.13 562.113 253.596 560.579 cv
252.414 559.399 250.877 558.806 249.343 558.806 cv
247.807 558.806 246.271 559.399 245.091 560.579 cv
245.091 560.579 li
243.909 561.76 243.319 563.298 243.319 564.832 cv
243.319 566.366 243.909 567.904 245.091 569.084 cv
245.091 569.084 li
cp
f
285.722 607.709 mo
285.722 608.771 285.84 609.715 287.376 611.249 cv
288.556 612.434 290.092 613.023 291.628 613.023 cv
293.045 613.023 294.581 612.434 295.763 611.367 cv
295.763 611.249 li
296.943 610.188 297.533 608.653 297.533 607.115 cv
297.533 605.581 296.943 604.047 295.881 602.867 cv
295.881 602.867 li
294.227 601.328 293.283 601.211 292.336 601.211 cv
290.803 601.211 289.267 601.093 286.668 598.732 cv
283.242 602.154 li
285.604 604.755 285.722 606.289 285.722 607.709 cv
285.722 607.709 li
cp
286.312 612.315 mo
284.304 610.423 284.304 609.125 284.304 607.827 cv
284.186 606.525 284.186 605.227 281.706 602.744 cv
281.352 602.391 281.352 601.919 281.706 601.683 cv
286.194 597.194 li
286.432 596.84 286.904 596.84 287.258 597.194 cv
289.738 599.677 291.039 599.677 292.336 599.795 cv
293.637 599.795 294.935 599.795 296.825 601.801 cv
296.943 601.801 li
298.361 603.339 299.069 605.227 299.069 607.115 cv
299.069 609.007 298.361 610.896 296.825 612.315 cv
296.825 612.434 li
295.409 613.85 293.519 614.558 291.628 614.558 cv
289.62 614.558 287.73 613.85 286.312 612.315 cv
286.312 612.315 li
cp
f
287.73 610.069 mo
287.376 609.951 287.258 609.479 287.376 609.125 cv
287.612 608.771 287.966 608.653 288.32 608.771 cv
288.32 608.771 292.809 610.896 294.935 608.653 cv
295.171 608.417 295.645 608.417 295.881 608.653 cv
296.235 609.007 296.235 609.479 295.881 609.715 cv
293.045 612.552 287.73 610.069 287.73 610.069 cv
287.73 610.069 li
cp
f
427.109 543.57 mo
420.139 536.6 410.572 532.348 400.057 532.348 cv
389.428 532.348 379.861 536.6 373.011 543.57 cv
366.042 550.541 361.79 560.107 361.79 570.618 cv
361.79 581.133 366.042 590.7 373.011 597.666 cv
379.861 604.519 389.428 608.889 400.057 608.889 cv
410.572 608.889 420.139 604.519 427.109 597.666 cv
433.957 590.7 438.328 581.133 438.328 570.618 cv
438.328 560.107 433.957 550.541 427.109 543.57 cv
427.109 543.57 li
cp
400.057 530.932 mo
410.926 530.932 420.847 535.42 428.053 542.626 cv
435.256 549.711 439.748 559.636 439.748 570.618 cv
439.748 581.605 435.256 591.525 428.053 598.614 cv
420.847 605.816 410.926 610.306 400.057 610.306 cv
389.074 610.306 379.153 605.816 371.947 598.614 cv
364.86 591.525 360.372 581.605 360.372 570.618 cv
360.372 559.636 364.86 549.711 371.947 542.626 cv
379.153 535.42 389.074 530.932 400.057 530.932 cv
400.057 530.932 li
cp
f
395.925 532.111 mo
395.807 531.757 395.925 531.403 396.279 531.167 cv
396.633 531.049 396.989 531.167 397.225 531.521 cv
400.887 538.374 405.258 547.469 407.146 555.855 cv
409.037 564.478 408.326 572.156 401.949 575.933 cv
396.161 579.241 396.396 586.684 396.633 594.004 cv
396.871 599.559 397.106 605.227 394.862 609.479 cv
394.625 609.833 394.271 609.951 393.917 609.715 cv
393.563 609.598 393.444 609.125 393.563 608.771 cv
395.688 604.873 395.453 599.44 395.217 594.126 cv
394.98 586.211 394.745 578.415 401.241 574.635 cv
407.027 571.326 407.5 564.124 405.729 556.209 cv
403.838 547.94 399.587 538.964 395.925 532.111 cv
395.925 532.111 li
cp
f
419.194 583.493 mo
418.015 582.195 416.358 581.487 414.471 581.487 cv
412.578 581.487 410.926 582.195 409.628 583.493 cv
409.628 583.493 li
408.326 584.673 407.617 586.447 407.617 588.336 cv
407.617 590.228 408.326 591.88 409.628 593.06 cv
410.808 594.362 412.578 595.07 414.471 595.07 cv
416.358 595.07 418.015 594.362 419.194 593.06 cv
420.492 591.88 421.201 590.228 421.201 588.336 cv
421.201 586.447 420.492 584.673 419.194 583.493 cv
419.194 583.493 li
cp
414.471 580.066 mo
416.713 580.066 418.723 581.015 420.256 582.432 cv
421.673 583.965 422.621 585.976 422.621 588.336 cv
422.621 590.582 421.673 592.588 420.256 594.126 cv
418.723 595.542 416.713 596.486 414.471 596.486 cv
412.105 596.486 410.1 595.542 408.562 594.126 cv
407.146 592.588 406.201 590.582 406.201 588.336 cv
406.201 585.976 407.146 583.965 408.562 582.432 cv
408.68 582.432 li
410.1 581.015 412.224 580.066 414.471 580.066 cv
414.471 580.066 li
cp
f
388.248 555.619 mo
387.066 554.435 385.294 553.609 383.523 553.609 cv
381.634 553.609 379.861 554.321 378.679 555.619 cv
378.679 555.619 li
377.381 556.799 376.671 558.569 376.671 560.461 cv
376.671 562.35 377.381 564.006 378.679 565.186 cv
379.861 566.484 381.634 567.191 383.523 567.191 cv
385.294 567.191 387.066 566.484 388.248 565.186 cv
389.546 564.006 390.256 562.35 390.256 560.461 cv
390.256 558.569 389.546 556.799 388.248 555.619 cv
388.248 555.619 li
cp
383.523 552.192 mo
385.766 552.192 387.774 553.137 389.31 554.557 cv
390.729 556.091 391.672 558.098 391.672 560.461 cv
391.672 562.703 390.729 564.714 389.31 566.248 cv
387.774 567.786 385.766 568.612 383.523 568.612 cv
381.159 568.612 379.153 567.786 377.617 566.248 cv
376.199 564.714 375.255 562.703 375.255 560.461 cv
375.255 558.098 376.199 556.091 377.617 554.557 cv
377.735 554.557 li
379.153 553.137 381.159 552.192 383.523 552.192 cv
383.523 552.192 li
cp
f
543.334 541.8 mo
540.144 540.616 535.655 539.79 530.577 539.79 cv
525.617 539.79 521.128 540.616 517.82 541.8 cv
514.866 542.98 512.978 544.514 512.978 546.053 cv
512.978 547.704 514.866 549.238 517.82 550.423 cv
521.128 551.603 525.617 552.429 530.577 552.429 cv
535.655 552.429 540.144 551.603 543.334 550.423 cv
546.406 549.238 548.295 547.704 548.295 546.053 cv
548.295 544.514 546.406 542.98 543.334 541.8 cv
543.334 541.8 li
cp
530.577 538.374 mo
535.773 538.374 540.498 539.199 543.807 540.498 cv
547.469 541.8 549.711 543.807 549.711 546.053 cv
549.711 548.295 547.469 550.305 543.807 551.721 cv
540.498 553.019 535.773 553.845 530.577 553.845 cv
525.499 553.845 520.774 553.019 517.348 551.721 cv
513.804 550.305 511.562 548.295 511.562 546.053 cv
511.562 543.807 513.804 541.8 517.348 540.498 cv
520.774 539.199 525.499 538.374 530.577 538.374 cv
530.577 538.374 li
cp
f
530.577 542.744 mo
530.223 542.744 529.869 542.508 529.869 542.036 cv
529.869 541.682 530.223 541.328 530.577 541.328 cv
534.357 541.328 537.901 541.918 540.38 542.862 cv
543.098 543.924 544.75 545.458 544.75 547.232 cv
544.75 547.586 544.514 547.94 544.042 547.94 cv
543.688 547.94 543.334 547.586 543.334 547.232 cv
543.334 546.053 542.036 545.104 539.908 544.278 cv
537.548 543.334 534.239 542.744 530.577 542.744 cv
530.577 542.744 li
cp
f
548.295 556.563 mo
543.807 554.911 537.548 553.845 530.577 553.845 cv
523.729 553.845 517.466 554.911 512.978 556.563 cv
508.607 558.215 506.012 560.461 506.012 562.821 cv
506.012 565.067 508.607 567.31 512.978 568.966 cv
517.466 570.618 523.729 571.681 530.577 571.681 cv
537.548 571.681 543.807 570.618 548.295 568.966 cv
552.547 567.31 555.265 565.067 555.265 562.821 cv
555.265 560.461 552.547 558.215 548.295 556.563 cv
548.295 556.563 li
cp
530.577 552.429 mo
537.666 552.429 544.16 553.491 548.767 555.265 cv
553.609 557.153 556.682 559.754 556.682 562.821 cv
556.682 565.775 553.609 568.376 548.767 570.264 cv
544.16 572.038 537.666 573.101 530.577 573.101 cv
523.488 573.101 517.112 572.038 512.388 570.264 cv
507.545 568.376 504.591 565.775 504.591 562.821 cv
504.591 559.754 507.545 557.153 512.388 555.265 cv
517.112 553.491 523.488 552.429 530.577 552.429 cv
530.577 552.429 li
cp
f
534.003 558.451 mo
533.531 558.451 533.295 558.098 533.295 557.743 cv
533.295 557.389 533.531 557.035 534.003 557.035 cv
539.082 557.035 543.807 557.861 547.232 559.163 cv
550.895 560.461 553.137 562.468 553.137 564.714 cv
553.137 565.186 552.783 565.422 552.429 565.422 cv
551.957 565.422 551.721 565.186 551.721 564.714 cv
551.721 563.176 549.828 561.642 546.761 560.461 cv
543.452 559.163 538.964 558.451 534.003 558.451 cv
534.003 558.451 li
cp
f
557.861 577.471 mo
550.895 574.753 541.324 573.101 530.577 573.101 cv
519.948 573.101 510.26 574.753 503.293 577.471 cv
496.559 580.066 492.424 583.493 492.424 587.273 cv
492.424 591.054 496.559 594.598 503.293 597.076 cv
510.26 599.795 519.948 601.446 530.577 601.446 cv
541.324 601.446 550.895 599.795 557.861 597.076 cv
564.714 594.598 568.848 591.054 568.848 587.273 cv
568.848 583.493 564.714 580.066 557.861 577.471 cv
557.861 577.471 li
cp
530.577 571.681 mo
541.446 571.681 551.249 573.454 558.451 576.169 cv
565.775 578.887 570.264 582.903 570.264 587.273 cv
570.264 591.762 565.775 595.66 558.451 598.496 cv
551.249 601.211 541.446 602.867 530.577 602.867 cv
519.83 602.867 509.905 601.211 502.821 598.496 cv
495.496 595.66 491.008 591.762 491.008 587.273 cv
491.008 582.903 495.496 578.887 502.821 576.169 cv
509.905 573.454 519.83 571.681 530.577 571.681 cv
530.577 571.681 li
cp
f
540.38 580.066 mo
540.025 580.066 539.672 579.713 539.672 579.359 cv
539.672 578.887 540.025 578.65 540.38 578.65 cv
547.114 578.65 553.255 579.713 557.625 581.369 cv
562.35 583.139 565.186 585.621 565.186 588.453 cv
565.186 588.926 564.832 589.162 564.478 589.162 cv
564.124 589.162 563.77 588.926 563.77 588.453 cv
563.77 586.329 561.287 584.201 557.153 582.667 cv
552.9 581.015 546.996 580.066 540.38 580.066 cv
540.38 580.066 li
cp
f
677.866 565.067 mo
644.56 565.067 li
644.441 565.067 644.206 565.067 644.088 565.067 cv
643.498 565.186 642.908 565.422 642.432 565.894 cv
642.078 566.248 641.724 566.72 641.724 567.31 cv
641.724 567.546 li
647.156 606.171 li
647.278 606.879 647.632 607.591 648.104 608.182 cv
648.576 608.535 649.166 608.889 649.874 608.889 cv
672.434 608.889 li
673.26 608.889 673.854 608.535 674.326 608.182 cv
674.799 607.591 675.152 606.879 675.271 606.171 cv
680.585 567.546 li
680.585 567.31 li
680.585 566.838 680.349 566.248 679.994 565.894 cv
679.994 565.894 li
679.522 565.422 678.933 565.186 678.225 565.067 cv
678.106 565.067 677.984 565.067 677.866 565.067 cv
677.866 565.067 li
cp
644.56 563.651 mo
677.866 563.651 li
677.984 563.651 678.225 563.651 678.461 563.651 cv
679.404 563.77 680.23 564.242 680.938 564.832 cv
680.938 564.832 li
681.646 565.54 682.001 566.366 682.001 567.31 cv
682.001 567.428 682.001 567.546 682.001 567.786 cv
676.687 606.289 li
676.45 607.473 675.979 608.417 675.271 609.125 cv
674.563 609.833 673.614 610.306 672.434 610.306 cv
649.874 610.306 li
648.813 610.306 647.868 609.833 647.156 609.125 cv
646.33 608.417 645.858 607.473 645.74 606.289 cv
640.426 567.786 li
640.308 567.546 640.308 567.428 640.308 567.31 cv
640.308 566.366 640.779 565.54 641.487 564.832 cv
642.078 564.242 643.025 563.77 643.97 563.651 cv
644.088 563.651 644.324 563.651 644.56 563.651 cv
644.56 563.651 li
cp
f
669.838 558.451 mo
652.593 558.451 li
652.356 558.451 li
651.648 558.451 651.055 558.098 650.582 557.743 cv
650.11 557.271 649.756 556.682 649.756 556.091 cv
650.7 548.767 651.055 540.852 651.648 533.413 cv
651.767 532.705 652.12 532.111 652.593 531.639 cv
653.064 531.167 653.772 530.932 654.48 530.932 cv
667.828 530.932 li
668.654 530.932 669.244 531.167 669.72 531.639 cv
670.31 532.111 670.664 532.823 670.664 533.413 cv
671.372 540.97 672.08 548.53 672.552 556.091 cv
672.552 556.682 672.316 557.271 671.727 557.743 cv
671.372 558.098 670.664 558.451 670.074 558.451 cv
669.838 558.451 li
cp
652.593 557.035 mo
657.907 557.035 664.873 557.507 669.956 557.035 cv
670.31 557.035 670.664 556.917 670.9 556.682 cv
671.018 556.563 671.136 556.327 671.136 556.091 cv
671.372 550.187 669.838 539.908 669.244 533.531 cv
669.244 533.295 669.13 532.941 668.89 532.705 cv
668.536 532.469 668.3 532.348 667.828 532.348 cv
654.48 532.348 li
654.127 532.348 653.772 532.469 653.537 532.705 cv
653.301 532.941 653.183 533.295 653.064 533.531 cv
652.475 540.852 651.526 548.767 651.172 556.091 cv
651.172 556.327 651.29 556.563 651.526 556.682 cv
651.767 556.917 652.12 557.035 652.475 557.035 cv
652.593 557.035 li
cp
f
670.9 544.042 mo
671.372 544.042 671.608 544.278 671.608 544.75 cv
671.608 545.104 671.372 545.458 670.9 545.458 cv
651.408 545.458 li
651.055 545.458 650.7 545.104 650.7 544.75 cv
650.7 544.278 651.055 544.042 651.408 544.042 cv
670.9 544.042 li
cp
f
663.104 581.133 mo
659.323 581.133 li
658.852 581.133 658.615 580.893 658.615 580.421 cv
658.615 557.743 li
658.615 557.389 658.852 557.035 659.323 557.035 cv
663.104 557.035 li
663.457 557.035 663.812 557.389 663.812 557.743 cv
663.812 580.421 li
663.812 580.893 663.457 581.133 663.104 581.133 cv
663.104 581.133 li
cp
660.031 579.713 mo
662.396 579.713 li
662.396 558.451 li
660.031 558.451 li
660.031 579.713 li
cp
f
657.081 592.824 mo
656.255 592.824 li
656.019 592.824 655.779 592.706 655.543 592.706 cv
655.307 592.588 655.07 592.47 654.835 592.234 cv
654.599 591.998 654.48 591.644 654.48 591.29 cv
654.48 591.172 654.48 591.054 654.48 590.936 cv
658.615 580.066 li
658.733 579.713 658.969 579.595 659.323 579.595 cv
659.441 579.595 659.677 579.595 659.795 579.713 cv
662.985 579.713 li
663.34 579.713 663.575 579.949 663.693 580.303 cv
666.884 590.936 li
666.884 591.054 666.884 591.172 666.884 591.29 cv
666.884 591.644 666.766 591.998 666.412 592.234 cv
666.176 592.47 665.939 592.588 665.586 592.706 cv
665.468 592.824 665.231 592.824 665.113 592.824 cv
657.081 592.824 li
cp
656.255 591.408 mo
665.113 591.408 li
665.231 591.408 li
665.35 591.408 665.35 591.29 665.468 591.29 cv
662.514 581.133 li
659.677 581.133 li
655.896 591.29 li
656.019 591.408 li
656.137 591.408 656.255 591.408 656.255 591.408 cv
656.255 591.408 li
cp
f
664.76 597.076 mo
664.76 597.431 664.401 597.784 664.047 597.666 cv
663.575 597.666 663.34 597.313 663.34 596.958 cv
663.812 592.234 li
663.812 591.762 664.165 591.525 664.52 591.525 cv
664.995 591.525 665.231 591.88 665.231 592.352 cv
664.76 597.076 li
cp
657.553 596.723 mo
657.553 597.076 657.199 597.431 656.727 597.313 cv
656.373 597.313 656.137 596.958 656.137 596.604 cv
656.609 592.588 li
656.609 592.116 656.963 591.88 657.316 591.88 cv
657.789 591.998 658.025 592.352 658.025 592.706 cv
657.553 596.723 li
cp
661.098 596.723 mo
661.098 597.076 660.743 597.313 660.389 597.313 cv
660.031 597.313 659.677 596.958 659.795 596.486 cv
660.149 592.588 li
660.268 592.234 660.625 591.88 660.979 591.88 cv
661.333 591.998 661.569 592.352 661.569 592.706 cv
661.098 596.723 li
cp
f
142.683 700.313 mo
135.006 700.313 li
134.417 700.313 133.706 700.549 133.234 701.021 cv
132.762 701.492 132.526 702.082 132.526 702.79 cv
132.526 740.354 li
132.526 741.062 132.762 741.77 133.234 742.241 cv
133.706 742.714 134.417 742.949 135.006 742.949 cv
142.683 742.949 li
143.393 742.949 143.983 742.714 144.455 742.241 cv
144.927 741.77 145.283 741.062 145.283 740.354 cv
145.283 702.79 li
145.283 702.082 144.927 701.492 144.455 701.021 cv
143.983 700.549 143.393 700.313 142.683 700.313 cv
142.683 700.313 li
cp
135.006 698.893 mo
142.683 698.893 li
143.747 698.893 144.809 699.246 145.52 700.072 cv
146.228 700.784 146.699 701.729 146.699 702.79 cv
146.699 740.354 li
146.699 741.533 146.228 742.478 145.52 743.186 cv
144.809 743.894 143.747 744.37 142.683 744.37 cv
135.006 744.37 li
133.942 744.37 132.998 743.894 132.29 743.186 cv
131.58 742.478 131.108 741.533 131.108 740.354 cv
131.108 702.79 li
131.108 701.729 131.58 700.784 132.29 700.072 cv
132.998 699.246 133.942 698.893 135.006 698.893 cv
135.006 698.893 li
cp
f
143.629 699.01 mo
143.629 677.04 li
134.061 677.04 li
134.061 699.01 li
134.417 698.893 134.771 698.893 135.006 698.893 cv
142.683 698.893 li
143.037 698.893 143.393 698.893 143.629 699.01 cv
143.629 699.01 li
cp
145.045 676.332 mo
145.045 700.072 li
145.045 700.431 144.809 700.784 144.337 700.784 cv
144.219 700.784 144.101 700.666 143.983 700.666 cv
143.747 700.549 143.629 700.431 143.393 700.313 cv
143.393 700.313 li
143.157 700.313 142.919 700.313 142.683 700.313 cv
135.006 700.313 li
134.771 700.313 134.534 700.313 134.417 700.313 cv
134.178 700.431 133.942 700.549 133.706 700.666 cv
133.353 700.784 132.998 700.784 132.762 700.431 cv
132.645 700.313 132.645 700.194 132.645 700.072 cv
132.645 676.332 li
132.645 675.979 132.998 675.624 133.353 675.624 cv
144.337 675.624 li
144.809 675.624 145.045 675.979 145.045 676.332 cv
145.045 676.332 li
cp
f
156.622 659.441 mo
121.188 659.441 li
120.949 659.441 120.713 659.559 120.595 659.677 cv
120.478 659.795 120.359 660.031 120.359 660.268 cv
120.359 669.602 li
120.359 669.838 120.478 670.074 120.595 670.191 cv
120.713 670.31 120.949 670.428 121.188 670.428 cv
156.622 670.428 li
156.858 670.428 156.976 670.31 157.212 670.191 cv
157.33 670.074 157.448 669.838 157.448 669.602 cv
157.448 660.268 li
157.448 660.031 157.33 659.795 157.212 659.677 cv
156.976 659.559 156.858 659.441 156.622 659.441 cv
156.622 659.441 li
cp
121.188 658.025 mo
156.622 658.025 li
157.212 658.025 157.802 658.261 158.156 658.615 cv
158.512 659.087 158.866 659.677 158.866 660.268 cv
158.866 669.602 li
158.866 670.191 158.512 670.782 158.156 671.136 cv
157.802 671.608 157.212 671.844 156.622 671.844 cv
121.188 671.844 li
120.595 671.844 120.005 671.608 119.533 671.136 cv
119.179 670.782 118.943 670.191 118.943 669.602 cv
118.943 660.268 li
118.943 659.677 119.179 659.087 119.533 658.615 cv
120.005 658.261 120.595 658.025 121.188 658.025 cv
121.188 658.025 li
cp
f
119.651 668.536 mo
119.297 668.536 118.943 668.182 118.943 667.828 cv
118.943 667.474 119.297 667.119 119.651 667.119 cv
158.156 667.119 li
158.512 667.119 158.866 667.474 158.866 667.828 cv
158.866 668.182 158.512 668.536 158.156 668.536 cv
119.651 668.536 li
cp
119.651 662.749 mo
119.297 662.749 118.943 662.396 118.943 662.041 cv
118.943 661.569 119.297 661.333 119.651 661.333 cv
158.156 661.333 li
158.512 661.333 158.866 661.569 158.866 662.041 cv
158.866 662.396 158.512 662.749 158.156 662.749 cv
119.651 662.749 li
cp
f
146.109 671.844 mo
131.58 671.844 li
131.58 675.624 li
146.109 675.624 li
146.109 671.844 li
cp
130.872 670.428 mo
146.817 670.428 li
147.289 670.428 147.525 670.782 147.525 671.136 cv
147.525 676.332 li
147.525 676.687 147.289 677.04 146.817 677.04 cv
130.872 677.04 li
130.518 677.04 130.164 676.687 130.164 676.332 cv
130.164 671.136 li
130.164 670.782 130.518 670.428 130.872 670.428 cv
130.872 670.428 li
cp
f
273.911 660.389 mo
301.195 660.389 li
301.549 660.507 li
302.731 660.625 303.793 661.215 304.622 662.041 cv
305.33 662.985 305.92 664.165 305.92 665.468 cv
305.802 665.939 li
300.605 718.737 li
300.605 719.092 300.251 719.328 299.897 719.328 cv
287.494 719.328 li
287.494 717.912 li
299.305 717.912 li
304.503 665.821 li
304.503 665.468 li
304.503 664.52 304.149 663.693 303.558 662.985 cv
302.967 662.396 302.259 661.924 301.431 661.806 cv
301.195 661.806 li
273.911 661.806 li
273.675 661.806 li
272.847 661.924 272.139 662.396 271.549 662.985 cv
271.549 662.985 li
270.957 663.693 270.603 664.52 270.603 665.468 cv
270.603 665.821 li
273.083 690.151 li
271.667 690.151 li
269.187 665.939 li
269.187 665.821 269.187 665.586 269.187 665.468 cv
269.187 664.165 269.659 662.985 270.485 662.041 cv
270.485 662.041 li
271.313 661.098 272.375 660.625 273.557 660.507 cv
273.911 660.389 li
cp
f
270.485 671.608 mo
270.013 671.608 269.777 671.254 269.777 670.9 cv
269.777 670.546 270.013 670.191 270.485 670.191 cv
304.622 670.191 li
305.094 670.191 305.33 670.546 305.33 670.9 cv
305.33 671.254 305.094 671.608 304.622 671.608 cv
270.485 671.608 li
cp
f
287.494 717.912 mo
299.897 717.912 li
300.369 717.912 300.605 718.266 300.605 718.62 cv
299.661 727.479 li
299.661 728.068 299.305 728.776 298.951 729.248 cv
298.597 729.721 298.007 729.957 297.415 729.957 cv
287.494 729.957 li
287.494 728.54 li
297.415 728.54 li
297.533 728.54 297.771 728.423 297.889 728.305 cv
298.125 728.068 298.243 727.715 298.243 727.36 cv
299.187 719.328 li
287.494 719.328 li
287.494 717.912 li
cp
f
287.494 679.877 mo
290.329 679.877 292.809 681.057 294.581 682.831 cv
296.353 684.602 297.533 687.201 297.533 689.915 cv
297.533 692.634 296.353 695.111 294.581 697.004 cv
292.809 698.774 290.329 699.836 287.494 699.836 cv
285.84 699.836 284.186 699.482 282.77 698.656 cv
282.77 697.004 li
284.068 697.948 285.722 698.42 287.494 698.42 cv
289.856 698.42 292.101 697.477 293.637 695.941 cv
295.171 694.404 296.117 692.279 296.117 689.915 cv
296.117 687.556 295.171 685.427 293.637 683.893 cv
292.101 682.354 289.856 681.293 287.494 681.293 cv
285.132 681.293 283.006 682.354 281.47 683.893 cv
279.936 685.427 278.99 687.556 278.99 689.915 cv
278.99 690.151 li
277.573 690.151 li
277.573 689.915 li
277.573 687.201 278.636 684.602 280.525 682.831 cv
282.298 681.057 284.778 679.877 287.494 679.877 cv
287.494 679.877 li
cp
f
274.265 661.098 mo
274.265 660.743 274.619 660.389 274.973 660.389 cv
275.327 660.389 275.684 660.743 275.684 661.098 cv
275.684 667.002 li
275.684 667.355 275.327 667.71 274.973 667.71 cv
274.619 667.71 274.265 667.355 274.265 667.002 cv
274.265 661.098 li
cp
f
279.226 661.098 mo
279.226 660.743 279.58 660.389 279.936 660.389 cv
280.408 660.389 280.644 660.743 280.644 661.098 cv
280.644 667.002 li
280.644 667.355 280.408 667.71 279.936 667.71 cv
279.58 667.71 279.226 667.355 279.226 667.002 cv
279.226 661.098 li
cp
f
284.304 661.098 mo
284.304 660.743 284.66 660.389 285.014 660.389 cv
285.368 660.389 285.722 660.743 285.722 661.098 cv
285.722 667.002 li
285.722 667.355 285.368 667.71 285.014 667.71 cv
284.66 667.71 284.304 667.355 284.304 667.002 cv
284.304 661.098 li
cp
f
289.384 661.098 mo
289.384 660.743 289.62 660.389 290.092 660.389 cv
290.446 660.389 290.803 660.743 290.803 661.098 cv
290.803 667.002 li
290.803 667.355 290.446 667.71 290.092 667.71 cv
289.62 667.71 289.384 667.355 289.384 667.002 cv
289.384 661.098 li
cp
f
294.345 661.098 mo
294.345 660.743 294.699 660.389 295.053 660.389 cv
295.527 660.389 295.763 660.743 295.763 661.098 cv
295.763 667.002 li
295.763 667.355 295.527 667.71 295.053 667.71 cv
294.699 667.71 294.345 667.355 294.345 667.002 cv
294.345 661.098 li
cp
f
299.423 661.098 mo
299.423 660.743 299.779 660.389 300.133 660.389 cv
300.487 660.389 300.841 660.743 300.841 661.098 cv
300.841 667.002 li
300.841 667.355 300.487 667.71 300.133 667.71 cv
299.779 667.71 299.423 667.355 299.423 667.002 cv
299.423 661.098 li
cp
f
295.171 729.248 mo
295.171 735.983 li
295.171 737.163 294.817 738.226 294.227 739.051 cv
293.637 739.881 292.69 740.472 291.747 740.472 cv
285.958 740.472 li
286.432 740.117 286.904 739.642 287.14 739.051 cv
291.747 739.051 li
292.219 739.051 292.69 738.697 293.045 738.226 cv
293.519 737.635 293.755 736.927 293.755 735.983 cv
293.755 729.957 li
287.494 729.957 li
287.494 728.54 li
294.463 728.54 li
294.817 728.54 295.171 728.895 295.171 729.248 cv
295.171 729.248 li
cp
f
283.714 702.2 mo
237.648 702.2 li
236.704 702.2 235.996 702.555 235.404 703.026 cv
234.814 703.616 234.46 704.442 234.46 705.272 cv
234.46 737.399 li
234.46 738.226 234.814 738.934 235.404 739.523 cv
235.404 739.523 li
235.996 740.117 236.704 740.472 237.648 740.472 cv
283.714 740.472 li
284.542 740.472 285.368 740.117 285.84 739.523 cv
286.432 739.051 286.786 738.226 286.786 737.399 cv
286.786 705.272 li
286.786 704.442 286.432 703.616 285.958 703.145 cv
285.84 703.026 li
285.368 702.555 284.542 702.2 283.714 702.2 cv
283.714 702.2 li
cp
237.648 700.666 mo
283.714 700.666 li
285.014 700.666 286.076 701.139 286.904 701.965 cv
287.022 702.082 li
287.73 702.908 288.32 703.971 288.32 705.272 cv
288.32 737.399 li
288.32 738.579 287.73 739.764 286.904 740.59 cv
286.076 741.415 285.014 742.006 283.714 742.006 cv
237.648 742.006 li
236.35 742.006 235.168 741.415 234.342 740.59 cv
234.342 740.59 li
233.516 739.764 233.042 738.579 233.042 737.399 cv
233.042 705.272 li
233.042 703.971 233.516 702.908 234.342 702.082 cv
235.168 701.139 236.35 700.666 237.648 700.666 cv
237.648 700.666 li
cp
f
279.58 690.978 mo
241.783 690.978 li
241.075 690.978 240.484 691.218 240.128 691.808 cv
239.656 692.397 239.303 693.224 239.303 694.05 cv
239.303 700.666 li
281.942 700.666 li
281.942 694.05 li
281.942 693.224 281.706 692.397 281.234 691.808 cv
280.762 691.218 280.172 690.978 279.58 690.978 cv
279.58 690.978 li
cp
241.783 689.443 mo
279.58 689.443 li
280.644 689.443 281.706 690.033 282.416 690.859 cv
283.006 691.689 283.478 692.869 283.478 694.05 cv
283.478 701.374 li
283.478 701.847 283.124 702.2 282.77 702.2 cv
238.595 702.2 li
238.123 702.2 237.886 701.847 237.886 701.374 cv
237.886 694.05 li
237.886 692.869 238.24 691.689 238.948 690.859 cv
239.656 690.033 240.603 689.443 241.783 689.443 cv
241.783 689.443 li
cp
f
241.192 734.917 mo
241.547 734.917 241.9 735.271 241.9 735.629 cv
241.9 736.102 241.547 736.455 241.192 736.455 cv
240.249 736.455 239.303 735.983 238.712 735.393 cv
238.004 734.681 237.648 733.854 237.648 732.911 cv
237.648 709.761 li
237.648 708.813 238.004 707.869 238.712 707.279 cv
239.303 706.57 240.249 706.217 241.192 706.217 cv
241.547 706.217 241.9 706.57 241.9 706.925 cv
241.9 707.396 241.547 707.751 241.192 707.751 cv
240.603 707.751 240.128 707.986 239.774 708.341 cv
239.42 708.695 239.185 709.171 239.185 709.761 cv
239.185 732.911 li
239.185 733.501 239.42 733.973 239.774 734.327 cv
240.128 734.681 240.603 734.917 241.192 734.917 cv
241.192 734.917 li
cp
f
280.172 736.455 mo
279.698 736.455 279.344 736.102 279.344 735.629 cv
279.344 735.271 279.698 734.917 280.172 734.917 cv
280.644 734.917 281.234 734.681 281.588 734.327 cv
281.588 734.327 li
281.942 733.973 282.18 733.383 282.18 732.911 cv
282.18 709.761 li
282.18 709.171 281.942 708.695 281.588 708.341 cv
281.234 707.986 280.644 707.751 280.172 707.751 cv
279.698 707.751 279.344 707.396 279.344 706.925 cv
279.344 706.57 279.698 706.217 280.172 706.217 cv
281.116 706.217 281.942 706.57 282.652 707.279 cv
283.242 707.869 283.596 708.813 283.596 709.761 cv
283.596 732.911 li
283.596 733.854 283.242 734.681 282.652 735.393 cv
282.652 735.393 li
281.942 735.983 281.116 736.455 280.172 736.455 cv
280.172 736.455 li
cp
f
387.302 702.082 mo
370.885 702.082 li
370.648 702.082 370.413 702.2 370.295 702.318 cv
370.175 702.437 370.057 702.673 370.057 702.908 cv
370.057 742.949 li
370.057 743.186 370.175 743.422 370.295 743.539 cv
370.413 743.657 370.648 743.775 370.885 743.775 cv
387.302 743.775 li
387.42 743.775 387.656 743.657 387.774 743.539 cv
388.012 743.422 388.012 743.186 388.012 742.949 cv
388.012 702.908 li
388.012 702.673 388.012 702.555 387.894 702.318 cv
387.774 702.318 li
387.656 702.2 387.42 702.082 387.302 702.082 cv
387.302 702.082 li
cp
370.885 700.666 mo
387.302 700.666 li
387.894 700.666 388.366 700.902 388.838 701.374 cv
388.838 701.374 li
389.192 701.729 389.428 702.318 389.428 702.908 cv
389.428 742.949 li
389.428 743.657 389.192 744.134 388.838 744.605 cv
388.366 744.96 387.894 745.195 387.302 745.195 cv
370.885 745.195 li
370.295 745.195 369.703 744.96 369.349 744.605 cv
368.876 744.134 368.641 743.657 368.641 742.949 cv
368.641 702.908 li
368.641 702.318 368.876 701.729 369.349 701.374 cv
369.703 700.902 370.295 700.666 370.885 700.666 cv
370.885 700.666 li
cp
f
383.996 722.164 mo
383.996 721.806 384.35 721.452 384.704 721.452 cv
385.058 721.452 385.412 721.806 385.412 722.164 cv
385.412 737.281 li
385.412 737.635 385.058 737.989 384.704 737.989 cv
373.483 737.989 li
373.011 737.989 372.775 737.635 372.775 737.281 cv
372.775 736.927 373.011 736.573 373.483 736.573 cv
383.996 736.573 li
383.996 722.164 li
cp
f
378.797 657.907 mo
378.797 657.553 379.153 657.199 379.507 657.199 cv
379.979 657.199 380.215 657.553 380.215 657.907 cv
380.215 701.374 li
380.215 701.729 379.979 702.082 379.507 702.082 cv
379.153 702.082 378.797 701.729 378.797 701.374 cv
378.797 657.907 li
cp
f
375.963 660.389 mo
375.491 660.389 375.255 660.031 375.255 659.677 cv
375.255 659.323 375.491 658.969 375.963 658.969 cv
383.167 658.969 li
383.523 658.969 383.878 659.323 383.878 659.677 cv
383.878 660.031 383.523 660.389 383.167 660.389 cv
375.963 660.389 li
cp
f
375.963 663.693 mo
375.491 663.693 375.255 663.34 375.255 662.985 cv
375.255 662.631 375.491 662.277 375.963 662.277 cv
383.167 662.277 li
383.523 662.277 383.878 662.631 383.878 662.985 cv
383.878 663.34 383.523 663.693 383.167 663.693 cv
375.963 663.693 li
cp
f
374.665 667.002 mo
374.309 667.002 373.955 666.766 373.955 666.294 cv
373.955 665.939 374.309 665.586 374.665 665.586 cv
384.468 665.586 li
384.822 665.586 385.176 665.939 385.176 666.294 cv
385.176 666.766 384.822 667.002 384.468 667.002 cv
374.665 667.002 li
cp
f
373.247 670.428 mo
372.775 670.428 372.537 670.074 372.537 669.72 cv
372.537 669.248 372.775 669.008 373.247 669.008 cv
385.886 669.008 li
386.358 669.008 386.594 669.248 386.594 669.72 cv
386.594 670.074 386.358 670.428 385.886 670.428 cv
373.247 670.428 li
cp
f
375.963 680.349 mo
375.491 680.349 375.255 680.112 375.255 679.641 cv
375.255 679.287 375.491 678.933 375.963 678.933 cv
383.167 678.933 li
383.523 678.933 383.878 679.287 383.878 679.641 cv
383.878 680.112 383.523 680.349 383.167 680.349 cv
375.963 680.349 li
cp
f
375.963 677.04 mo
375.491 677.04 375.255 676.687 375.255 676.332 cv
375.255 675.979 375.491 675.624 375.963 675.624 cv
383.167 675.624 li
383.523 675.624 383.878 675.979 383.878 676.332 cv
383.878 676.687 383.523 677.04 383.167 677.04 cv
375.963 677.04 li
cp
f
374.665 673.736 mo
374.309 673.736 373.955 673.378 373.955 673.024 cv
373.955 672.67 374.309 672.316 374.665 672.316 cv
384.468 672.316 li
384.822 672.316 385.176 672.67 385.176 673.024 cv
385.176 673.378 384.822 673.736 384.468 673.736 cv
374.665 673.736 li
cp
f
427.936 710.115 mo
402.067 710.115 li
401.831 710.115 li
401.359 710.115 400.887 710.352 400.533 710.705 cv
400.297 710.941 400.057 711.295 400.057 711.649 cv
400.179 711.885 li
404.309 741.77 li
404.309 742.359 404.549 742.949 405.021 743.304 cv
405.258 743.539 405.729 743.775 406.319 743.775 cv
423.801 743.775 li
424.391 743.775 424.745 743.539 425.099 743.304 cv
425.453 742.949 425.689 742.359 425.807 741.888 cv
429.941 711.885 li
429.941 711.649 li
429.941 711.295 429.823 710.941 429.469 710.705 cv
429.233 710.352 428.762 710.115 428.289 710.115 cv
427.936 710.115 li
cp
402.067 708.695 mo
427.936 708.695 li
428.171 708.695 428.289 708.695 428.407 708.695 cv
428.525 708.695 li
429.233 708.813 429.941 709.171 430.413 709.643 cv
431.008 710.233 431.361 710.941 431.361 711.649 cv
431.361 711.768 431.361 711.885 431.361 712.003 cv
427.227 742.006 li
427.109 742.949 426.637 743.775 426.043 744.252 cv
425.453 744.842 424.745 745.195 423.801 745.195 cv
406.319 745.195 li
405.375 745.195 404.549 744.842 403.955 744.252 cv
403.365 743.657 403.012 742.949 402.893 742.006 cv
398.759 712.003 li
398.641 711.649 li
398.641 710.941 398.995 710.233 399.587 709.643 cv
400.179 709.171 400.887 708.813 401.596 708.695 cv
401.831 708.695 401.949 708.695 402.067 708.695 cv
402.067 708.695 li
cp
f
420.729 672.08 mo
409.392 672.08 li
409.037 672.08 408.68 672.198 408.443 672.434 cv
408.443 672.434 li
408.207 672.788 407.972 673.143 407.972 673.5 cv
406.084 708.695 li
424.037 708.695 li
422.145 673.5 li
422.145 673.143 421.908 672.788 421.673 672.434 cv
421.437 672.198 421.082 672.08 420.729 672.08 cv
420.729 672.08 li
cp
409.392 670.664 mo
420.729 670.664 li
421.437 670.664 422.145 671.018 422.621 671.49 cv
423.211 671.962 423.447 672.67 423.564 673.378 cv
425.453 709.289 li
425.453 709.761 425.217 710.115 424.745 710.115 cv
405.375 710.115 li
404.903 710.115 404.668 709.761 404.668 709.407 cv
406.556 673.378 li
406.556 672.67 406.91 671.962 407.381 671.49 cv
407.5 671.372 li
407.972 670.9 408.562 670.664 409.392 670.664 cv
409.392 670.664 li
cp
f
417.896 681.057 mo
417.774 680.703 418.133 680.349 418.486 680.349 cv
418.959 680.349 419.194 680.585 419.313 681.057 cv
420.256 696.768 li
420.256 697.24 419.902 697.477 419.549 697.594 cv
419.194 697.594 418.84 697.24 418.84 696.886 cv
417.896 681.057 li
cp
f
421.555 729.013 mo
421.555 729.484 421.908 729.721 422.267 729.721 cv
422.621 729.721 422.975 729.484 422.975 729.013 cv
422.975 714.014 li
422.975 713.541 422.621 713.306 422.267 713.306 cv
411.044 713.306 li
410.572 713.306 410.336 713.541 410.336 714.014 cv
410.336 714.367 410.572 714.722 411.044 714.722 cv
421.555 714.722 li
421.555 729.013 li
cp
f
529.633 716.609 mo
528.217 712.593 526.797 708.577 525.499 704.564 cv
525.381 704.328 525.381 704.089 525.617 703.853 cv
525.734 703.616 526.207 703.498 526.561 703.734 cv
532.823 708.104 li
533.413 708.577 534.003 708.813 534.594 708.935 cv
535.302 709.053 535.892 709.053 536.6 708.813 cv
536.718 708.813 536.84 708.813 537.075 708.935 cv
537.43 709.053 537.548 709.525 537.43 709.879 cv
537.075 710.469 536.6 711.059 536.127 711.649 cv
535.773 711.885 535.302 712.239 534.947 712.476 cv
540.616 726.294 li
540.616 726.416 540.616 726.53 540.616 726.652 cv
540.616 727.006 540.262 727.36 539.908 727.36 cv
539.199 727.242 538.492 727.36 537.901 727.597 cv
537.193 727.832 536.6 728.187 536.01 728.658 cv
535.773 728.895 li
535.537 729.131 li
535.42 729.131 535.42 729.248 535.302 729.248 cv
534.947 729.366 534.476 729.248 534.357 728.895 cv
532.705 724.76 531.167 720.626 529.633 716.609 cv
529.633 716.609 li
cp
527.505 706.099 mo
528.689 709.407 529.751 712.711 531.049 716.138 cv
532.348 719.8 533.768 723.58 535.302 727.36 cv
535.892 726.889 536.718 726.53 537.43 726.294 cv
537.901 726.059 538.374 726.059 538.846 725.94 cv
533.295 712.357 li
533.178 712.003 533.413 711.649 533.768 711.413 cv
533.768 711.413 li
534.239 711.295 534.711 710.941 535.065 710.587 cv
535.302 710.352 li
534.947 710.352 534.711 710.352 534.357 710.233 cv
533.531 710.115 532.705 709.761 531.993 709.289 cv
527.505 706.099 li
cp
512.859 662.631 mo
513.567 662.277 li
515.105 661.688 516.758 661.688 518.174 662.277 cv
519.594 662.985 520.893 664.047 521.482 665.586 cv
534.594 697.712 li
534.711 697.948 534.711 698.184 534.594 698.42 cv
534.357 698.774 534.003 698.893 533.649 698.656 cv
531.521 697.358 529.515 696.06 527.505 694.876 cv
525.499 693.695 523.488 692.516 521.246 691.218 cv
521.128 691.096 521.011 690.978 521.011 690.859 cv
519 684.719 517.112 678.578 515.105 672.08 cv
512.388 663.457 li
512.27 663.104 512.506 662.749 512.859 662.631 cv
512.859 662.631 li
cp
514.158 663.575 mo
513.922 663.693 li
516.521 671.727 li
518.41 678.106 520.303 684.247 522.19 690.151 cv
524.2 691.336 526.207 692.516 528.217 693.695 cv
532.587 696.296 li
520.185 666.176 li
519.712 664.996 518.764 664.047 517.702 663.575 cv
516.521 663.222 515.342 663.104 514.158 663.575 cv
514.158 663.575 li
cp
f
540.38 727.36 mo
538.964 727.242 537.312 727.597 536.01 728.658 cv
534.829 729.603 534.003 731.022 533.886 732.557 cv
533.768 734.091 534.121 735.629 535.184 736.927 cv
536.127 738.226 537.548 738.934 539.082 739.051 cv
540.616 739.287 542.154 738.815 543.452 737.871 cv
544.75 736.809 545.458 735.393 545.58 733.854 cv
545.816 732.32 545.34 730.787 544.396 729.484 cv
543.334 728.305 541.918 727.479 540.38 727.36 cv
540.38 727.36 li
cp
535.184 727.479 mo
535.184 727.479 li
536.84 726.176 538.728 725.704 540.616 725.94 cv
542.39 726.176 544.16 727.006 545.458 728.658 cv
545.458 728.658 li
546.761 730.311 547.232 732.203 546.996 733.973 cv
546.761 735.865 545.935 737.635 544.278 738.934 cv
542.744 740.235 540.734 740.707 538.964 740.472 cv
537.075 740.235 535.302 739.405 534.003 737.753 cv
532.823 736.219 532.229 734.209 532.469 732.438 cv
532.705 730.547 533.531 728.776 535.184 727.479 cv
535.184 727.479 li
cp
f
540.025 730.664 mo
539.317 730.547 538.728 730.787 538.138 731.141 cv
537.548 731.612 537.193 732.32 537.193 732.911 cv
537.075 733.619 537.312 734.327 537.666 734.799 cv
538.138 735.393 538.846 735.747 539.436 735.747 cv
540.144 735.865 540.852 735.747 541.324 735.271 cv
541.918 734.799 542.271 734.209 542.271 733.501 cv
542.39 732.793 542.271 732.203 541.8 731.612 cv
541.324 731.022 540.734 730.664 540.025 730.664 cv
540.025 730.664 li
cp
537.193 730.074 mo
538.138 729.366 539.199 729.131 540.144 729.248 cv
541.21 729.366 542.154 729.839 542.862 730.664 cv
543.57 731.612 543.807 732.675 543.688 733.619 cv
543.57 734.681 543.098 735.629 542.271 736.337 cv
541.324 737.045 540.262 737.281 539.317 737.163 cv
538.256 737.045 537.312 736.573 536.6 735.747 cv
535.892 734.799 535.655 733.736 535.773 732.793 cv
535.892 731.73 536.363 730.787 537.193 730.074 cv
537.193 730.074 li
cp
f
497.03 677.158 mo
497.03 677.276 li
496.204 678.343 495.969 679.522 496.204 680.703 cv
496.44 681.883 497.03 683.066 498.097 683.775 cv
532.823 708.223 li
533.886 708.935 535.065 709.171 536.245 708.935 cv
536.245 708.935 li
537.43 708.695 538.492 708.104 539.317 707.043 cv
539.317 706.925 li
539.554 706.688 540.025 706.688 540.262 706.807 cv
552.311 715.312 li
552.429 714.84 552.665 714.367 552.9 713.896 cv
553.373 713.184 553.845 712.593 554.557 712.121 cv
537.783 700.666 522.19 691.689 504.473 681.529 cv
497.03 677.158 li
cp
495.851 676.45 mo
496.322 675.86 li
496.44 675.506 496.912 675.389 497.271 675.624 cv
505.181 680.23 li
523.252 690.623 539.082 699.836 556.091 711.531 cv
556.445 711.649 556.563 712.121 556.327 712.476 cv
556.209 712.593 556.209 712.593 556.091 712.711 cv
555.737 712.829 li
555.501 713.065 li
554.911 713.541 554.435 714.131 554.081 714.604 cv
553.727 715.193 553.491 715.901 553.373 716.609 cv
553.255 716.964 552.9 717.199 552.547 717.082 cv
552.429 717.082 552.311 717.082 552.192 716.964 cv
540.025 708.341 li
539.082 709.407 537.783 710.115 536.481 710.352 cv
536.481 710.352 li
534.947 710.587 533.413 710.233 531.993 709.289 cv
497.271 684.955 li
495.969 683.893 495.143 682.477 494.788 680.938 cv
494.553 679.404 494.906 677.871 495.851 676.45 cv
495.851 676.45 li
cp
f
559.871 711.885 mo
558.333 711.649 556.799 712.121 555.501 713.065 cv
554.199 714.131 553.491 715.548 553.255 717.082 cv
553.137 718.502 553.491 720.154 554.557 721.334 cv
554.557 721.452 li
555.619 722.636 557.035 723.462 558.451 723.58 cv
559.989 723.698 561.523 723.344 562.821 722.282 cv
564.124 721.334 564.832 719.918 565.067 718.384 cv
565.186 716.846 564.832 715.312 563.77 714.014 cv
562.821 712.711 561.287 712.003 559.871 711.885 cv
559.871 711.885 li
cp
554.557 712.003 mo
554.675 712.003 li
556.209 710.705 558.098 710.233 559.989 710.469 cv
561.877 710.705 563.651 711.531 564.832 713.184 cv
566.13 714.722 566.602 716.728 566.484 718.502 cv
566.248 720.39 565.304 722.164 563.77 723.344 cv
563.651 723.462 li
562.113 724.643 560.226 725.232 558.333 724.996 cv
556.563 724.76 554.793 723.816 553.491 722.282 cv
553.373 722.282 li
552.192 720.626 551.721 718.737 551.957 716.846 cv
552.074 715.075 553.019 713.306 554.557 712.003 cv
554.557 712.003 li
cp
f
530.341 699.01 mo
529.869 699.01 529.279 699.128 528.925 699.482 cv
528.453 699.836 528.217 700.313 528.217 700.784 cv
528.099 701.256 528.217 701.847 528.571 702.2 cv
528.925 702.673 529.396 702.908 529.869 702.908 cv
530.341 703.026 530.932 702.908 531.285 702.555 cv
531.757 702.2 531.993 701.729 531.993 701.256 cv
532.111 700.784 531.993 700.194 531.639 699.836 cv
531.285 699.364 530.813 699.128 530.341 699.01 cv
530.341 699.01 li
cp
527.977 698.42 mo
528.689 697.83 529.633 697.594 530.459 697.712 cv
531.285 697.712 532.111 698.184 532.705 698.893 cv
533.295 699.601 533.531 700.549 533.413 701.374 cv
533.295 702.2 532.941 703.026 532.229 703.616 cv
531.403 704.207 530.577 704.442 529.751 704.328 cv
528.925 704.207 528.099 703.853 527.505 703.145 cv
526.915 702.318 526.679 701.492 526.797 700.666 cv
526.797 699.718 527.269 699.01 527.977 698.42 cv
527.977 698.42 li
cp
f
559.518 715.193 mo
558.805 715.075 558.098 715.193 557.507 715.665 cv
557.035 716.138 556.682 716.728 556.563 717.436 cv
556.563 718.029 556.682 718.737 557.153 719.328 cv
557.153 719.328 li
557.625 719.918 558.215 720.271 558.928 720.271 cv
559.518 720.39 560.226 720.154 560.815 719.682 cv
561.405 719.328 561.642 718.62 561.76 718.029 cv
561.877 717.317 561.642 716.609 561.17 716.138 cv
560.697 715.548 560.107 715.193 559.518 715.193 cv
559.518 715.193 li
cp
556.563 714.604 mo
556.682 714.604 li
557.625 713.896 558.569 713.659 559.636 713.777 cv
560.579 713.896 561.523 714.367 562.231 715.193 cv
562.35 715.312 li
563.058 716.138 563.298 717.199 563.176 718.147 cv
563.058 719.21 562.586 720.154 561.642 720.861 cv
560.815 721.57 559.754 721.806 558.688 721.688 cv
557.743 721.57 556.799 721.098 556.091 720.271 cv
555.973 720.154 li
555.383 719.328 555.029 718.266 555.146 717.317 cv
555.265 716.256 555.737 715.312 556.563 714.604 cv
556.563 714.604 li
cp
f
517.702 699.482 mo
517.82 699.364 li
507.073 691.808 li
507.073 728.54 li
507.073 728.776 507.073 729.013 507.31 729.131 cv
507.428 729.248 507.545 729.248 507.781 729.248 cv
518.528 729.248 li
520.066 729.248 521.719 729.484 523.252 729.603 cv
524.673 729.721 525.971 729.839 527.15 729.839 cv
529.515 729.839 531.285 729.248 531.403 727.006 cv
519.948 727.006 li
519.594 727.006 519.236 726.652 519.236 726.294 cv
519.236 725.468 519.122 724.524 519.122 723.698 cv
519.122 723.227 519.358 722.99 519.83 722.99 cv
531.403 722.99 li
531.403 721.216 li
531.167 720.626 li
519.594 720.626 li
519.122 720.626 518.882 720.39 518.882 720.036 cv
518.646 717.317 li
518.646 716.964 518.882 716.609 519.358 716.609 cv
529.751 716.609 li
528.925 714.249 li
518.882 714.249 li
518.528 714.249 518.292 714.014 518.292 713.659 cv
517.938 710.941 li
517.938 710.587 518.292 710.233 518.646 710.233 cv
527.387 710.233 li
526.679 707.986 li
518.292 707.986 li
517.938 707.986 517.584 707.633 517.584 707.279 cv
517.348 704.564 li
517.348 704.207 517.584 703.853 518.057 703.853 cv
524.318 703.853 li
521.719 702.082 li
520.893 702.082 520.066 701.965 519.477 701.729 cv
518.764 701.374 518.174 700.902 517.702 700.194 cv
517.584 699.958 517.584 699.718 517.702 699.482 cv
517.702 699.482 li
cp
519.358 699.718 mo
519.236 699.836 li
519.477 700.072 519.712 700.194 519.948 700.313 cv
520.538 700.549 521.128 700.666 521.954 700.666 cv
522.072 700.666 522.19 700.666 522.309 700.784 cv
526.561 703.734 li
526.679 703.853 526.797 703.971 526.797 704.089 cv
526.915 704.328 li
527.033 704.801 526.797 705.154 526.442 705.272 cv
526.442 705.272 526.324 705.272 526.207 705.272 cv
518.764 705.272 li
518.882 706.57 li
527.15 706.57 li
527.505 706.57 527.741 706.807 527.859 707.043 cv
529.043 710.705 li
529.279 711.059 529.043 711.531 528.689 711.649 cv
528.571 711.649 528.453 711.649 528.453 711.649 cv
519.477 711.649 li
519.594 712.829 li
529.396 712.829 li
529.751 712.829 529.987 713.065 530.105 713.424 cv
531.403 717.082 li
531.521 717.436 531.285 717.794 530.932 717.912 cv
530.813 718.029 530.813 718.029 530.695 718.029 cv
520.066 718.029 li
520.185 719.21 li
531.639 719.21 li
531.993 719.21 532.229 719.445 532.348 719.8 cv
532.705 720.861 li
532.823 720.861 532.823 720.979 532.823 721.098 cv
532.823 723.108 li
532.823 723.462 532.705 723.698 532.587 723.934 cv
532.348 724.17 531.993 724.406 531.757 724.406 cv
520.538 724.406 li
520.656 725.586 li
531.757 725.586 li
531.993 725.586 532.348 725.704 532.587 725.94 cv
532.705 726.176 532.823 726.53 532.823 726.771 cv
532.823 730.429 530.459 731.259 527.15 731.259 cv
525.971 731.259 524.555 731.141 523.135 731.022 cv
521.719 730.9 520.066 730.664 518.528 730.664 cv
507.781 730.664 li
507.191 730.664 506.602 730.429 506.247 730.074 cv
506.247 730.074 li
505.889 729.721 505.653 729.131 505.653 728.54 cv
505.653 690.388 li
505.653 690.033 505.889 689.68 506.365 689.68 cv
506.483 689.68 506.719 689.798 506.837 689.798 cv
519.236 698.538 li
519.594 698.774 519.594 699.246 519.358 699.601 cv
519.358 699.718 li
cp
531.403 689.325 mo
531.167 689.325 li
531.403 689.798 li
531.403 689.325 li
cp
530.223 687.909 mo
531.757 687.909 li
531.993 687.909 532.348 688.146 532.587 688.381 cv
532.587 688.381 li
532.705 688.617 532.823 688.854 532.823 689.207 cv
532.823 691.926 li
532.823 692.162 532.705 692.516 532.587 692.634 cv
532.348 692.869 531.993 693.105 531.757 693.105 cv
531.639 693.105 li
531.403 693.105 531.049 692.869 531.049 692.634 cv
529.515 688.972 li
529.396 688.617 529.515 688.146 529.869 688.027 cv
529.987 688.027 530.105 687.909 530.223 687.909 cv
530.223 687.909 li
cp
531.403 683.066 mo
528.571 683.066 li
529.515 685.309 li
531.403 685.309 li
531.403 683.066 li
cp
527.505 681.646 mo
531.757 681.646 li
531.993 681.646 532.348 681.765 532.587 682.001 cv
532.705 682.241 532.823 682.477 532.823 682.831 cv
532.823 685.545 li
532.823 685.781 532.705 686.135 532.587 686.371 cv
532.348 686.607 531.993 686.726 531.757 686.726 cv
529.043 686.726 li
528.807 686.726 528.453 686.489 528.453 686.253 cv
526.915 682.595 li
526.797 682.241 526.915 681.765 527.269 681.646 cv
527.387 681.646 527.505 681.646 527.505 681.646 cv
527.505 681.646 li
cp
531.403 676.687 mo
525.971 676.687 li
526.915 678.933 li
531.403 678.933 li
531.403 676.687 li
cp
524.908 675.271 mo
531.757 675.271 li
531.993 675.271 532.348 675.389 532.587 675.624 cv
532.587 675.742 li
532.705 675.86 532.823 676.215 532.823 676.45 cv
532.823 679.169 li
532.823 679.522 532.705 679.759 532.587 679.994 cv
532.348 680.23 531.993 680.349 531.757 680.349 cv
526.442 680.349 li
526.207 680.349 525.853 680.23 525.853 679.877 cv
524.318 676.215 li
524.2 675.86 524.318 675.506 524.673 675.271 cv
524.791 675.271 524.908 675.271 524.908 675.271 cv
524.908 675.271 li
cp
523.252 670.074 mo
524.318 672.67 li
531.403 672.67 li
531.285 670.31 529.515 669.838 527.15 669.838 cv
525.971 669.838 524.673 669.956 523.252 670.074 cv
523.252 670.074 li
cp
522.19 668.771 mo
523.135 668.654 li
524.555 668.536 525.971 668.418 527.15 668.418 cv
530.459 668.418 532.823 669.248 532.823 672.788 cv
532.823 673.143 532.705 673.378 532.587 673.618 cv
532.348 673.854 531.993 674.09 531.757 674.09 cv
523.847 674.09 li
523.606 674.09 523.252 673.854 523.252 673.5 cv
521.601 669.72 li
521.482 669.366 521.601 668.89 521.954 668.771 cv
522.072 668.771 522.19 668.771 522.19 668.771 cv
522.19 668.771 li
cp
514.512 670.31 mo
507.781 670.31 li
507.545 670.31 507.428 670.428 507.31 670.546 cv
507.073 670.664 507.073 670.9 507.073 671.018 cv
507.073 681.293 li
518.057 687.674 li
518.174 686.018 li
518.292 685.663 518.528 685.309 518.882 685.309 cv
519.236 685.309 li
517.938 681.293 516.64 676.923 515.224 672.434 cv
514.512 670.31 li
cp
507.781 668.89 mo
515.105 668.89 li
515.46 668.89 515.696 669.13 515.814 669.484 cv
516.64 672.08 li
518.057 676.687 519.358 681.175 520.893 685.781 cv
521.011 686.135 520.774 686.607 520.42 686.726 cv
520.303 686.726 520.303 686.726 520.185 686.726 cv
519.594 686.726 li
519.477 687.909 li
521.011 687.909 li
521.364 687.909 521.601 688.146 521.719 688.499 cv
522.309 690.388 li
522.427 690.741 522.19 691.218 521.836 691.336 cv
521.601 691.336 521.482 691.336 521.246 691.218 cv
518.882 689.798 516.404 688.381 513.686 686.848 cv
506.012 682.354 li
505.771 682.241 505.653 682.001 505.653 681.646 cv
505.653 671.018 li
505.653 670.428 505.889 669.956 506.247 669.484 cv
506.602 669.13 507.191 668.89 507.781 668.89 cv
507.781 668.89 li
cp
f
667.119 666.294 mo
665.586 664.165 663.457 662.985 661.215 662.985 cv
658.852 662.985 656.845 664.165 655.307 666.294 cv
653.654 668.418 652.711 671.372 652.711 674.563 cv
652.711 676.568 653.183 678.106 653.772 679.994 cv
654.362 681.765 654.953 683.775 655.425 686.607 cv
656.137 686.253 656.963 686.018 657.789 685.899 cv
658.852 685.663 660.031 685.545 661.215 685.545 cv
662.396 685.545 663.457 685.663 664.638 685.899 cv
665.35 686.018 666.176 686.253 667.002 686.607 cv
667.355 683.775 668.063 681.765 668.536 679.994 cv
669.13 678.106 669.602 676.568 669.602 674.563 cv
669.602 671.372 668.654 668.418 667.119 666.294 cv
667.119 666.294 li
cp
661.215 661.569 mo
663.93 661.569 666.412 662.985 668.182 665.468 cv
669.956 667.828 671.018 671.018 671.018 674.563 cv
671.018 676.805 670.546 678.461 669.956 680.467 cv
669.366 682.354 668.654 684.483 668.182 687.674 cv
668.182 688.146 667.828 688.381 667.474 688.264 cv
667.355 688.264 667.237 688.264 667.237 688.264 cv
666.294 687.791 665.35 687.438 664.283 687.201 cv
663.34 687.083 662.277 686.965 661.215 686.965 cv
660.149 686.965 659.087 687.083 658.143 687.201 cv
657.081 687.438 656.137 687.791 655.188 688.264 cv
654.835 688.381 654.362 688.264 654.244 687.909 cv
654.127 687.791 654.127 687.791 654.127 687.674 cv
653.772 684.483 653.064 682.354 652.475 680.467 cv
651.885 678.461 651.29 676.805 651.29 674.563 cv
651.29 671.018 652.356 667.828 654.127 665.468 cv
655.896 662.985 658.379 661.569 661.215 661.569 cv
661.215 661.569 li
cp
f
694.404 688.854 mo
695.348 686.489 695.466 684.011 694.286 682.119 cv
693.224 680.112 690.978 678.933 688.499 678.578 cv
685.899 678.343 682.831 678.933 679.994 680.585 cv
678.343 681.529 677.158 682.713 675.86 684.247 cv
674.563 685.545 673.143 687.083 670.9 688.854 cv
671.608 689.443 672.198 690.033 672.788 690.623 cv
673.496 691.453 674.208 692.397 674.799 693.342 cv
675.389 694.404 675.86 695.466 676.215 696.532 cv
676.45 697.24 676.568 698.066 676.687 698.893 cv
679.404 697.83 681.411 697.358 683.185 697.004 cv
685.191 696.532 686.725 696.178 688.499 695.229 cv
691.332 693.578 693.342 691.336 694.404 688.854 cv
694.404 688.854 li
cp
695.584 681.411 mo
696.886 683.775 696.886 686.607 695.702 689.443 cv
694.521 692.044 692.279 694.64 689.207 696.414 cv
687.319 697.477 685.545 697.948 683.539 698.42 cv
681.646 698.774 679.404 699.364 676.332 700.549 cv
675.979 700.666 675.624 700.549 675.506 700.194 cv
675.389 700.072 675.389 700.072 675.389 699.958 cv
675.271 698.893 675.152 697.948 674.799 696.886 cv
674.444 695.941 674.09 694.994 673.496 694.05 cv
673.024 693.105 672.434 692.279 671.727 691.571 cv
671.018 690.741 670.191 690.033 669.366 689.443 cv
669.008 689.325 669.008 688.854 669.244 688.499 cv
669.244 688.499 669.244 688.381 669.366 688.381 cv
671.962 686.371 673.496 684.719 674.799 683.303 cv
676.215 681.765 677.395 680.467 679.287 679.287 cv
682.354 677.513 685.781 676.923 688.617 677.158 cv
691.571 677.513 694.168 678.933 695.584 681.411 cv
695.584 681.411 li
cp
f
688.499 723.816 mo
690.978 723.462 693.224 722.282 694.286 720.271 cv
695.466 718.384 695.348 715.901 694.404 713.541 cv
693.342 711.059 691.332 708.813 688.499 707.161 cv
686.725 706.217 685.191 705.862 683.185 705.391 cv
681.411 705.037 679.404 704.564 676.687 703.498 cv
676.568 704.328 676.45 705.037 676.215 705.862 cv
676.215 705.862 li
675.86 706.925 675.389 707.986 674.799 709.053 cv
674.208 709.997 673.496 710.941 672.788 711.768 cv
672.198 712.357 671.608 712.947 670.9 713.541 cv
673.143 715.312 674.563 716.846 675.86 718.147 cv
677.158 719.682 678.343 720.861 679.994 721.806 cv
679.994 721.806 li
682.831 723.462 685.899 724.052 688.499 723.816 cv
688.499 723.816 li
cp
695.584 720.979 mo
694.168 723.462 691.571 724.878 688.617 725.232 cv
685.781 725.468 682.354 724.878 679.287 723.108 cv
679.287 722.99 li
677.395 721.924 676.215 720.626 674.799 719.092 cv
673.496 717.676 671.962 716.02 669.366 714.014 cv
669.008 713.777 669.008 713.306 669.244 713.065 cv
669.244 712.947 669.366 712.947 669.366 712.829 cv
670.191 712.239 671.018 711.649 671.727 710.823 cv
672.434 710.115 673.024 709.289 673.496 708.341 cv
674.09 707.396 674.444 706.453 674.799 705.509 cv
674.799 705.391 li
675.152 704.442 675.271 703.498 675.389 702.437 cv
675.389 702.082 675.742 701.729 676.215 701.847 cv
676.215 701.847 676.332 701.847 676.45 701.847 cv
679.404 703.026 681.646 703.616 683.539 703.971 cv
685.545 704.442 687.319 704.801 689.207 705.98 cv
692.279 707.751 694.521 710.233 695.702 712.947 cv
696.886 715.783 696.886 718.62 695.584 720.979 cv
695.584 720.979 li
cp
f
655.307 736.102 mo
656.845 738.107 658.852 739.405 661.215 739.405 cv
663.457 739.405 665.586 738.107 667.119 736.102 cv
668.654 733.973 669.602 731.022 669.602 727.832 cv
669.602 725.822 669.13 724.288 668.536 722.4 cv
668.063 720.626 667.355 718.62 667.002 715.783 cv
666.176 716.138 665.35 716.373 664.638 716.491 cv
663.457 716.728 662.396 716.846 661.215 716.846 cv
660.031 716.846 658.852 716.728 657.789 716.491 cv
656.963 716.373 656.137 716.138 655.425 715.783 cv
654.953 718.62 654.362 720.626 653.772 722.4 cv
653.183 724.288 652.711 725.822 652.711 727.832 cv
652.711 731.022 653.654 733.973 655.307 736.102 cv
655.307 736.102 li
cp
661.215 740.825 mo
658.379 740.825 655.896 739.405 654.127 736.927 cv
652.356 734.563 651.29 731.377 651.29 727.832 cv
651.29 725.586 651.885 723.934 652.475 721.924 cv
653.064 720.036 653.772 717.912 654.127 714.722 cv
654.244 714.249 654.599 714.014 654.953 714.131 cv
655.07 714.131 655.07 714.131 655.188 714.131 cv
656.137 714.604 657.081 714.957 658.143 715.075 cv
659.087 715.312 660.149 715.43 661.215 715.43 cv
662.277 715.43 663.34 715.312 664.283 715.075 cv
665.35 714.957 666.294 714.604 667.237 714.131 cv
667.592 714.014 667.945 714.131 668.182 714.485 cv
668.182 714.485 668.182 714.604 668.182 714.722 cv
668.654 717.912 669.366 720.036 669.956 721.924 cv
670.546 723.934 671.018 725.586 671.018 727.832 cv
671.018 731.377 669.956 734.563 668.182 736.927 cv
666.412 739.405 663.93 740.825 661.215 740.825 cv
661.215 740.825 li
cp
f
628.022 713.541 mo
626.961 715.901 626.961 718.384 628.022 720.271 cv
629.203 722.282 631.331 723.462 633.932 723.816 cv
636.527 724.052 639.6 723.462 642.313 721.806 cv
644.088 720.861 645.15 719.682 646.566 718.147 cv
647.75 716.846 649.166 715.312 651.408 713.541 cv
650.818 712.947 650.229 712.357 649.639 711.768 cv
648.813 710.941 648.223 709.997 647.632 709.053 cv
647.038 707.986 646.566 706.925 646.212 705.862 cv
645.976 705.154 645.74 704.328 645.622 703.498 cv
643.025 704.564 640.897 705.037 639.128 705.391 cv
637.235 705.862 635.583 706.217 633.932 707.161 cv
631.095 708.813 629.085 711.059 628.022 713.541 cv
628.022 713.541 li
cp
626.843 720.979 mo
625.427 718.62 625.545 715.665 626.725 712.947 cv
627.904 710.233 630.15 707.751 633.219 705.98 cv
635.111 704.801 636.764 704.442 638.892 703.971 cv
640.779 703.616 643.025 703.026 645.976 701.847 cv
646.33 701.729 646.802 701.847 646.92 702.2 cv
646.92 702.318 646.92 702.318 646.92 702.437 cv
647.038 703.498 647.278 704.442 647.632 705.509 cv
647.868 706.453 648.34 707.396 648.813 708.341 cv
649.402 709.289 649.992 710.115 650.7 710.823 cv
651.408 711.649 652.12 712.357 652.946 712.947 cv
653.301 713.065 653.419 713.541 653.183 713.896 cv
653.064 714.014 li
650.465 716.02 648.931 717.676 647.632 719.092 cv
646.212 720.626 645.032 721.924 643.025 723.108 cv
639.953 724.878 636.646 725.468 633.691 725.232 cv
630.741 724.878 628.259 723.462 626.843 720.979 cv
626.843 720.979 li
cp
f
633.932 678.578 mo
631.331 678.933 629.203 680.112 628.022 682.119 cv
626.961 684.011 626.961 686.489 628.022 688.854 cv
629.085 691.336 631.095 693.578 633.932 695.229 cv
635.583 696.178 637.235 696.532 639.128 697.004 cv
640.897 697.358 643.025 697.83 645.622 698.893 cv
645.74 698.066 645.976 697.358 646.212 696.532 cv
646.212 696.532 li
646.566 695.466 647.038 694.404 647.632 693.342 cv
648.223 692.397 648.813 691.453 649.639 690.623 cv
650.229 690.033 650.818 689.443 651.408 688.854 cv
649.166 687.083 647.75 685.545 646.566 684.247 cv
645.15 682.713 644.088 681.529 642.432 680.585 cv
642.313 680.585 li
639.6 678.933 636.527 678.343 633.932 678.578 cv
633.932 678.578 li
cp
626.843 681.411 mo
628.259 678.933 630.741 677.513 633.691 677.158 cv
636.646 676.923 639.953 677.513 643.025 679.287 cv
643.144 679.404 li
645.032 680.467 646.212 681.765 647.632 683.303 cv
648.931 684.719 650.465 686.371 653.064 688.381 cv
653.301 688.617 653.419 689.09 653.183 689.325 cv
653.064 689.443 653.064 689.443 652.946 689.562 cv
652.12 690.151 651.408 690.741 650.7 691.571 cv
649.992 692.279 649.402 693.105 648.813 694.05 cv
648.34 694.994 647.868 695.941 647.632 696.886 cv
647.514 697.004 li
647.278 697.948 647.038 698.893 646.92 699.958 cv
646.92 700.313 646.566 700.666 646.212 700.549 cv
646.094 700.549 645.976 700.549 645.976 700.549 cv
643.025 699.246 640.779 698.774 638.892 698.42 cv
636.764 697.948 635.111 697.477 633.219 696.414 cv
630.15 694.64 627.904 692.162 626.725 689.443 cv
625.545 686.607 625.427 683.775 626.843 681.411 cv
626.843 681.411 li
cp
f
671.254 691.096 mo
668.654 688.499 665.113 686.965 661.215 686.965 cv
657.199 686.965 653.654 688.499 651.055 691.096 cv
648.458 693.695 646.92 697.24 646.92 701.139 cv
646.92 705.154 648.458 708.695 651.055 711.295 cv
653.654 713.896 657.199 715.43 661.215 715.43 cv
665.113 715.43 668.654 713.896 671.254 711.295 cv
673.854 708.695 675.506 705.154 675.506 701.139 cv
675.506 697.24 673.854 693.695 671.254 691.096 cv
671.254 691.096 li
cp
661.215 685.545 mo
665.468 685.545 669.484 687.319 672.316 690.151 cv
675.152 692.987 676.922 696.886 676.922 701.139 cv
676.922 705.509 675.152 709.407 672.316 712.239 cv
669.484 715.075 665.468 716.846 661.215 716.846 cv
656.845 716.846 652.946 715.075 650.11 712.239 cv
647.278 709.407 645.504 705.509 645.504 701.139 cv
645.504 696.886 647.278 692.987 650.11 690.151 cv
652.946 687.319 656.845 685.545 661.215 685.545 cv
661.215 685.545 li
cp
f
660.268 691.336 mo
659.913 691.336 659.559 691.096 659.559 690.623 cv
659.559 690.27 659.913 689.915 660.268 689.915 cv
663.575 689.915 666.529 691.336 668.654 693.46 cv
670.9 695.588 672.198 698.656 672.198 701.965 cv
672.198 702.318 671.844 702.673 671.49 702.673 cv
671.136 702.673 670.782 702.318 670.782 701.965 cv
670.782 699.01 669.602 696.414 667.71 694.521 cv
665.821 692.516 663.104 691.336 660.268 691.336 cv
660.268 691.336 li
cp
f
668.063 54.686 mo
668.063 54.686 666.058 54.686 666.176 54.686 cv
677.984 72.9956 li
677.984 85.9888 li
679.759 85.9888 li
679.759 72.9956 li
691.689 54.686 li
691.808 54.686 689.68 54.686 689.68 54.686 cv
678.933 71.3413 li
678.814 71.3413 li
668.063 54.686 li
cp
644.796 56.1045 mo
644.796 85.9888 li
646.448 85.9888 li
646.448 56.1045 li
657.199 56.1045 li
657.199 54.686 li
634.049 54.686 li
634.049 56.1045 li
644.796 56.1045 li
cp
619.872 54.686 mo
619.872 73.2314 li
619.872 76.5381 619.872 79.2559 617.748 81.7363 cv
615.502 84.0986 612.315 85.2783 609.125 85.2783 cv
606.053 85.2783 602.862 84.0986 600.62 81.7363 cv
598.492 79.2559 598.492 76.5381 598.492 73.2314 cv
598.492 54.686 li
596.84 54.686 li
596.84 73.2314 li
596.84 76.7739 596.84 79.728 599.204 82.6802 cv
601.683 85.3965 605.463 86.6968 609.125 86.6968 cv
612.905 86.6968 616.567 85.3965 619.046 82.6802 cv
621.528 79.728 621.528 76.7739 621.528 73.2314 cv
621.528 54.686 li
619.872 54.686 li
cp
570.973 56.2222 mo
571.09 56.2222 li
578.887 75.8301 li
563.176 75.8301 li
570.973 56.2222 li
cp
559.163 85.9888 mo
562.703 77.248 li
579.477 77.248 li
583.021 85.9888 li
584.791 85.9888 li
572.034 53.978 li
570.028 53.978 li
557.389 85.9888 li
559.163 85.9888 li
cp
547.94 85.9888 mo
547.94 84.5703 li
531.521 84.5703 li
531.521 70.6333 li
540.025 70.6333 li
540.025 69.2153 li
531.521 69.2153 li
531.521 56.1045 li
546.761 56.1045 li
546.761 54.686 li
529.751 54.686 li
529.751 85.9888 li
547.94 85.9888 li
cp
496.795 56.1045 mo
506.012 56.1045 li
507.073 56.1045 508.489 56.5762 509.67 57.5225 cv
510.854 58.4663 511.916 59.7666 512.033 61.6567 cv
512.27 63.9009 511.68 65.4351 510.617 66.499 cv
509.552 67.561 508.136 68.2715 506.602 68.5073 cv
505.063 68.8613 503.529 68.9795 502.349 68.9795 cv
496.795 68.9795 li
496.795 56.1045 li
cp
496.795 84.5703 mo
496.795 70.3975 li
502.349 70.3975 li
504.001 70.3975 505.771 70.3975 507.428 70.7515 cv
509.197 71.1055 510.854 71.8135 511.916 72.8774 cv
513.096 73.9395 513.804 75.4756 513.804 77.7197 cv
513.804 79.728 513.332 81.2622 512.624 82.2085 cv
511.798 83.2705 510.735 83.8623 509.434 84.2163 cv
508.136 84.5703 506.719 84.5703 505.181 84.5703 cv
496.795 84.5703 li
cp
505.181 85.9888 mo
506.955 85.9888 508.726 85.8706 510.26 85.3965 cv
511.798 85.0425 513.096 84.3345 514.04 83.0342 cv
514.988 81.8545 515.46 80.082 515.46 77.7197 cv
515.46 75.4756 514.752 73.8218 513.686 72.5234 cv
512.624 71.3413 511.208 70.5156 509.787 70.0415 cv
508.726 69.8052 507.781 69.6875 506.837 69.6875 cv
506.837 69.5693 li
507.781 69.5693 508.844 69.2153 509.552 68.8613 cv
511.208 68.1533 512.388 67.0889 512.978 65.791 cv
513.686 64.6089 513.922 63.0728 513.804 61.5386 cv
513.567 59.1748 512.388 57.4043 510.854 56.2222 cv
509.315 55.1602 507.428 54.686 506.012 54.686 cv
495.024 54.686 li
495.024 85.9888 li
505.181 85.9888 li
cp
451.439 67.207 mo
449.904 65.5527 448.131 63.5449 448.131 61.0645 cv
448.131 59.6484 448.603 58.4663 449.787 57.5225 cv
451.085 56.5762 452.855 56.1045 454.393 56.1045 cv
455.928 56.1045 457.226 56.4585 458.291 57.4043 cv
459.235 58.2305 459.59 59.4126 459.59 60.9468 cv
459.59 62.8369 458.646 64.4912 457.226 65.5527 cv
455.81 66.6172 454.157 67.561 452.501 68.2715 cv
452.146 67.915 451.793 67.561 451.439 67.207 cv
451.439 67.207 li
cp
452.619 85.2783 mo
450.495 85.2783 448.484 84.6885 446.832 83.2705 cv
445.416 81.9722 444.709 80.436 444.709 78.3101 cv
444.709 76.0659 445.652 74.2939 447.068 72.9956 cv
448.484 71.5776 450.259 70.9873 452.029 70.1611 cv
462.189 80.6724 li
459.707 83.3906 456.163 85.2783 452.619 85.2783 cv
452.619 85.2783 li
cp
458.291 66.6172 mo
460.062 65.3169 461.359 63.3086 461.359 60.9468 cv
461.359 59.1748 460.77 57.6406 459.472 56.3403 cv
458.174 55.042 456.281 54.686 454.393 54.686 cv
452.383 54.686 450.259 55.2783 448.603 56.4585 cv
447.068 57.6406 446.479 59.1748 446.479 61.0645 cv
446.479 64.019 448.367 66.2632 450.141 68.1533 cv
450.967 68.9795 li
449.078 69.8052 447.187 70.7515 445.889 71.9316 cv
444.118 73.5859 442.935 75.7119 442.935 78.3101 cv
442.935 80.79 443.879 82.6802 445.652 84.3345 cv
447.541 85.9888 450.023 86.6968 452.619 86.6968 cv
456.635 86.6968 460.533 84.6885 463.252 81.7363 cv
467.387 85.9888 li
469.511 85.9888 li
467.858 84.3345 466.084 82.4443 464.314 80.5542 cv
464.786 79.8462 465.258 79.1382 465.73 78.4277 cv
467.269 75.5938 468.094 72.0498 468.094 68.8613 cv
468.094 67.0889 li
466.32 67.0889 li
466.32 68.8613 li
466.32 71.9316 465.612 75.2397 464.195 77.7197 cv
463.842 78.3101 463.488 78.9023 463.134 79.374 cv
459.943 76.0659 456.635 72.6416 453.567 69.4512 cv
455.219 68.625 456.871 67.6792 458.291 66.6172 cv
458.291 66.6172 li
cp
398.169 79.4922 mo
398.523 80.5542 398.995 81.5 399.587 82.2085 cv
401.596 85.1606 405.14 86.6968 408.92 86.6968 cv
411.279 86.6968 413.29 86.1064 414.824 85.0425 cv
417.538 83.3906 419.076 80.9082 419.076 77.9561 cv
419.076 75.4756 417.42 73.2314 415.414 71.6953 cv
413.762 70.5156 411.634 69.5693 409.51 68.5073 cv
407.5 67.561 404.428 66.2632 403.129 64.6089 cv
402.303 63.665 401.596 61.6567 401.949 60.1206 cv
402.421 58.1123 403.955 56.8125 405.729 56.1045 cv
406.91 55.6323 408.326 55.3965 409.628 55.3965 cv
410.453 55.3965 411.044 55.3965 411.752 55.5142 cv
413.645 55.9863 415.178 57.4043 416.477 58.9385 cv
418.015 58.4663 li
416.713 56.3403 414.588 54.686 411.988 54.2139 cv
411.279 54.0962 410.453 53.978 409.51 53.978 cv
408.09 53.978 406.438 54.2139 405.021 54.8042 cv
401.831 55.9863 400.179 58.7026 400.179 61.4209 cv
400.179 63.0728 400.887 64.373 401.713 65.4351 cv
402.775 66.7354 404.073 67.6792 405.848 68.5073 cv
408.798 69.9233 411.988 71.2236 414.234 72.8774 cv
416.004 74.1758 417.303 75.7119 417.303 77.9561 cv
417.303 80.2002 416.004 82.5625 413.88 83.8623 cv
412.342 84.8066 410.572 85.1606 408.798 85.1606 cv
405.375 85.1606 403.129 83.8623 401.005 81.5 cv
400.533 80.9082 400.179 80.2002 399.941 79.4922 cv
398.169 79.4922 li
cp
385.886 76.6558 mo
384.586 79.2559 382.695 81.3823 380.333 82.9165 cv
377.971 84.3345 375.137 85.2783 372.183 85.2783 cv
367.931 85.2783 364.034 83.6265 361.316 80.9082 cv
358.6 78.1919 356.945 74.4116 356.945 70.3975 cv
356.945 66.145 358.836 62.3647 361.672 59.6484 cv
364.506 57.0503 368.168 55.3965 372.183 55.3965 cv
375.019 55.3965 377.735 56.2222 379.979 57.6406 cv
382.342 59.0566 384.231 61.0645 385.53 63.4268 cv
387.42 63.4268 li
386.004 60.5928 383.878 58.2305 381.277 56.5762 cv
378.562 54.9243 375.491 53.978 372.183 53.978 cv
367.694 53.978 363.56 55.75 360.49 58.5845 cv
357.302 61.5386 355.176 65.791 355.176 70.3975 cv
355.176 74.7676 357.065 78.9023 360.136 81.8545 cv
363.088 84.8066 367.34 86.6968 372.065 86.6968 cv
375.491 86.6968 378.797 85.6328 381.516 83.8623 cv
384.231 82.2085 386.358 79.6104 387.656 76.6558 cv
385.886 76.6558 li
cp
341.118 85.9888 mo
341.118 54.686 li
339.348 54.686 li
339.348 85.9888 li
341.118 85.9888 li
cp
314.07 56.1045 mo
314.07 85.9888 li
315.725 85.9888 li
315.725 56.1045 li
326.473 56.1045 li
326.473 54.686 li
303.321 54.686 li
303.321 56.1045 li
314.07 56.1045 li
cp
293.991 85.9888 mo
293.991 84.5703 li
277.573 84.5703 li
277.573 70.6333 li
286.076 70.6333 li
286.076 69.2153 li
277.573 69.2153 li
277.573 56.1045 li
292.809 56.1045 li
292.809 54.686 li
275.801 54.686 li
275.801 85.9888 li
293.991 85.9888 li
cp
257.492 85.9888 mo
259.264 85.9888 li
259.264 54.686 li
256.194 54.686 li
245.681 83.3906 li
245.681 83.3906 li
234.696 54.686 li
231.744 54.686 li
231.744 85.9888 li
233.516 85.9888 li
233.516 56.2222 li
233.634 56.2222 li
244.855 85.9888 li
246.625 85.9888 li
257.492 56.1045 li
257.492 56.1045 li
257.492 85.9888 li
cp
196.899 79.4922 mo
197.253 80.5542 197.725 81.5 198.317 82.2085 cv
200.441 85.1606 203.868 86.6968 207.766 86.6968 cv
210.128 86.6968 212.019 86.1064 213.553 85.0425 cv
216.271 83.3906 217.805 80.9082 217.805 77.9561 cv
217.805 75.4756 216.271 73.2314 214.145 71.6953 cv
212.608 70.5156 210.482 69.5693 208.356 68.5073 cv
206.23 67.561 203.278 66.2632 201.859 64.6089 cv
201.034 63.665 200.441 61.6567 200.797 60.1206 cv
201.151 58.1123 202.688 56.8125 204.458 56.1045 cv
205.64 55.6323 207.058 55.3965 208.356 55.3965 cv
209.182 55.3965 209.892 55.3965 210.482 55.5142 cv
212.373 55.9863 213.909 57.4043 215.207 58.9385 cv
216.861 58.4663 li
215.561 56.3403 213.435 54.686 210.836 54.2139 cv
210.01 54.0962 209.182 53.978 208.356 53.978 cv
206.82 53.978 205.286 54.2139 203.868 54.8042 cv
200.562 55.9863 199.025 58.7026 199.025 61.4209 cv
199.025 63.0728 199.615 64.373 200.562 65.4351 cv
201.506 66.7354 202.924 67.6792 204.576 68.5073 cv
207.53 69.9233 210.836 71.2236 212.962 72.8774 cv
214.734 74.1758 216.035 75.7119 216.035 77.9561 cv
216.035 80.2002 214.734 82.5625 212.608 83.8623 cv
211.072 84.8066 209.3 85.1606 207.53 85.1606 cv
204.104 85.1606 201.859 83.8623 199.733 81.5 cv
199.261 80.9082 199.025 80.2002 198.671 79.4922 cv
196.899 79.4922 li
cp
153.786 69.8052 mo
154.024 65.791 155.794 62.2471 158.63 59.6484 cv
161.347 57.0503 165.007 55.3965 169.023 55.3965 cv
173.157 55.3965 176.938 57.0503 179.772 59.7666 cv
182.488 62.4829 184.26 66.2632 184.26 70.2793 cv
184.26 74.5317 182.488 78.1919 179.772 80.9082 cv
176.938 83.6265 173.157 85.2783 169.023 85.2783 cv
164.771 85.2783 160.992 83.6265 158.274 80.9082 cv
155.322 78.0742 153.668 74.0576 153.786 69.8052 cv
153.786 69.8052 li
cp
152.134 69.8052 mo
152.134 74.7676 153.904 78.9023 156.976 81.8545 cv
160.046 84.8066 164.299 86.6968 168.905 86.6968 cv
173.629 86.6968 177.764 84.9248 180.954 81.9722 cv
184.024 79.02 185.914 74.8857 185.914 70.2793 cv
185.914 65.791 184.024 61.7749 180.954 58.8203 cv
177.882 55.8682 173.629 53.978 169.023 53.978 cv
164.653 53.978 160.4 55.75 157.448 58.5845 cv
154.26 61.4209 152.252 65.3169 152.134 69.8052 cv
152.134 69.8052 li
cp
139.022 76.6558 mo
137.723 79.2559 135.833 81.3823 133.47 82.9165 cv
131.108 84.3345 128.274 85.2783 125.202 85.2783 cv
120.949 85.2783 117.171 83.6265 114.455 80.9082 cv
111.736 78.1919 110.084 74.4116 110.084 70.3975 cv
110.084 66.145 111.854 62.3647 114.809 59.6484 cv
117.643 57.0503 121.305 55.3965 125.319 55.3965 cv
128.156 55.3965 130.872 56.2222 133.116 57.6406 cv
135.479 59.0566 137.369 61.0645 138.667 63.4268 cv
140.557 63.4268 li
139.141 60.5928 137.015 58.2305 134.417 56.5762 cv
131.698 54.9243 128.628 53.978 125.319 53.978 cv
120.831 53.978 116.699 55.75 113.627 58.5845 cv
110.438 61.5386 108.313 65.791 108.313 70.3975 cv
108.313 74.7676 110.203 78.9023 113.272 81.8545 cv
116.225 84.8066 120.478 86.6968 125.202 86.6968 cv
128.628 86.6968 131.934 85.6328 134.652 83.8623 cv
137.369 82.2085 139.495 79.6104 140.795 76.6558 cv
139.022 76.6558 li
cp
.705043 .672724 .63888 .740383 cmyk
f
.170079 lw
1 lc
1 lj
10 ml
[] 0 dsh
true sadj
668.063 54.686 mo
668.063 54.686 666.058 54.686 666.176 54.686 cv
677.984 72.9956 li
677.984 85.9888 li
679.759 85.9888 li
679.759 72.9956 li
691.689 54.686 li
691.808 54.686 689.68 54.686 689.68 54.686 cv
678.933 71.3413 li
678.814 71.3413 li
668.063 54.686 li
cp
644.796 56.1045 mo
644.796 85.9888 li
646.448 85.9888 li
646.448 56.1045 li
657.199 56.1045 li
657.199 54.686 li
634.049 54.686 li
634.049 56.1045 li
644.796 56.1045 li
cp
619.872 54.686 mo
619.872 73.2314 li
619.872 76.5381 619.872 79.2559 617.748 81.7363 cv
615.502 84.0986 612.315 85.2783 609.125 85.2783 cv
606.053 85.2783 602.862 84.0986 600.62 81.7363 cv
598.492 79.2559 598.492 76.5381 598.492 73.2314 cv
598.492 54.686 li
596.84 54.686 li
596.84 73.2314 li
596.84 76.7739 596.84 79.728 599.204 82.6802 cv
601.683 85.3965 605.463 86.6968 609.125 86.6968 cv
612.905 86.6968 616.567 85.3965 619.046 82.6802 cv
621.528 79.728 621.528 76.7739 621.528 73.2314 cv
621.528 54.686 li
619.872 54.686 li
cp
570.973 56.2222 mo
571.09 56.2222 li
578.887 75.8301 li
563.176 75.8301 li
570.973 56.2222 li
cp
559.163 85.9888 mo
562.703 77.248 li
579.477 77.248 li
583.021 85.9888 li
584.791 85.9888 li
572.034 53.978 li
570.028 53.978 li
557.389 85.9888 li
559.163 85.9888 li
cp
547.94 85.9888 mo
547.94 84.5703 li
531.521 84.5703 li
531.521 70.6333 li
540.025 70.6333 li
540.025 69.2153 li
531.521 69.2153 li
531.521 56.1045 li
546.761 56.1045 li
546.761 54.686 li
529.751 54.686 li
529.751 85.9888 li
547.94 85.9888 li
cp
496.795 56.1045 mo
506.012 56.1045 li
507.073 56.1045 508.489 56.5762 509.67 57.5225 cv
510.854 58.4663 511.916 59.7666 512.033 61.6567 cv
512.27 63.9009 511.68 65.4351 510.617 66.499 cv
509.552 67.561 508.136 68.2715 506.602 68.5073 cv
505.063 68.8613 503.529 68.9795 502.349 68.9795 cv
496.795 68.9795 li
496.795 56.1045 li
cp
496.795 84.5703 mo
496.795 70.3975 li
502.349 70.3975 li
504.001 70.3975 505.771 70.3975 507.428 70.7515 cv
509.197 71.1055 510.854 71.8135 511.916 72.8774 cv
513.096 73.9395 513.804 75.4756 513.804 77.7197 cv
513.804 79.728 513.332 81.2622 512.624 82.2085 cv
511.798 83.2705 510.735 83.8623 509.434 84.2163 cv
508.136 84.5703 506.719 84.5703 505.181 84.5703 cv
496.795 84.5703 li
cp
505.181 85.9888 mo
506.955 85.9888 508.726 85.8706 510.26 85.3965 cv
511.798 85.0425 513.096 84.3345 514.04 83.0342 cv
514.988 81.8545 515.46 80.082 515.46 77.7197 cv
515.46 75.4756 514.752 73.8218 513.686 72.5234 cv
512.624 71.3413 511.208 70.5156 509.787 70.0415 cv
508.726 69.8052 507.781 69.6875 506.837 69.6875 cv
506.837 69.5693 li
507.781 69.5693 508.844 69.2153 509.552 68.8613 cv
511.208 68.1533 512.388 67.0889 512.978 65.791 cv
513.686 64.6089 513.922 63.0728 513.804 61.5386 cv
513.567 59.1748 512.388 57.4043 510.854 56.2222 cv
509.315 55.1602 507.428 54.686 506.012 54.686 cv
495.024 54.686 li
495.024 85.9888 li
505.181 85.9888 li
cp
451.439 67.207 mo
449.904 65.5527 448.131 63.5449 448.131 61.0645 cv
448.131 59.6484 448.603 58.4663 449.787 57.5225 cv
451.085 56.5762 452.855 56.1045 454.393 56.1045 cv
455.928 56.1045 457.226 56.4585 458.291 57.4043 cv
459.235 58.2305 459.59 59.4126 459.59 60.9468 cv
459.59 62.8369 458.646 64.4912 457.226 65.5527 cv
455.81 66.6172 454.157 67.561 452.501 68.2715 cv
452.146 67.915 451.793 67.561 451.439 67.207 cv
451.439 67.207 li
cp
452.619 85.2783 mo
450.495 85.2783 448.484 84.6885 446.832 83.2705 cv
445.416 81.9722 444.709 80.436 444.709 78.3101 cv
444.709 76.0659 445.652 74.2939 447.068 72.9956 cv
448.484 71.5776 450.259 70.9873 452.029 70.1611 cv
462.189 80.6724 li
459.707 83.3906 456.163 85.2783 452.619 85.2783 cv
452.619 85.2783 li
cp
458.291 66.6172 mo
460.062 65.3169 461.359 63.3086 461.359 60.9468 cv
461.359 59.1748 460.77 57.6406 459.472 56.3403 cv
458.174 55.042 456.281 54.686 454.393 54.686 cv
452.383 54.686 450.259 55.2783 448.603 56.4585 cv
447.068 57.6406 446.479 59.1748 446.479 61.0645 cv
446.479 64.019 448.367 66.2632 450.141 68.1533 cv
450.967 68.9795 li
449.078 69.8052 447.187 70.7515 445.889 71.9316 cv
444.118 73.5859 442.935 75.7119 442.935 78.3101 cv
442.935 80.79 443.879 82.6802 445.652 84.3345 cv
447.541 85.9888 450.023 86.6968 452.619 86.6968 cv
456.635 86.6968 460.533 84.6885 463.252 81.7363 cv
467.387 85.9888 li
469.511 85.9888 li
467.858 84.3345 466.084 82.4443 464.314 80.5542 cv
464.786 79.8462 465.258 79.1382 465.73 78.4277 cv
467.269 75.5938 468.094 72.0498 468.094 68.8613 cv
468.094 67.0889 li
466.32 67.0889 li
466.32 68.8613 li
466.32 71.9316 465.612 75.2397 464.195 77.7197 cv
463.842 78.3101 463.488 78.9023 463.134 79.374 cv
459.943 76.0659 456.635 72.6416 453.567 69.4512 cv
455.219 68.625 456.871 67.6792 458.291 66.6172 cv
458.291 66.6172 li
cp
398.169 79.4922 mo
398.523 80.5542 398.995 81.5 399.587 82.2085 cv
401.596 85.1606 405.14 86.6968 408.92 86.6968 cv
411.279 86.6968 413.29 86.1064 414.824 85.0425 cv
417.538 83.3906 419.076 80.9082 419.076 77.9561 cv
419.076 75.4756 417.42 73.2314 415.414 71.6953 cv
413.762 70.5156 411.634 69.5693 409.51 68.5073 cv
407.5 67.561 404.428 66.2632 403.129 64.6089 cv
402.303 63.665 401.596 61.6567 401.949 60.1206 cv
402.421 58.1123 403.955 56.8125 405.729 56.1045 cv
406.91 55.6323 408.326 55.3965 409.628 55.3965 cv
410.453 55.3965 411.044 55.3965 411.752 55.5142 cv
413.645 55.9863 415.178 57.4043 416.477 58.9385 cv
418.015 58.4663 li
416.713 56.3403 414.588 54.686 411.988 54.2139 cv
411.279 54.0962 410.453 53.978 409.51 53.978 cv
408.09 53.978 406.438 54.2139 405.021 54.8042 cv
401.831 55.9863 400.179 58.7026 400.179 61.4209 cv
400.179 63.0728 400.887 64.373 401.713 65.4351 cv
402.775 66.7354 404.073 67.6792 405.848 68.5073 cv
408.798 69.9233 411.988 71.2236 414.234 72.8774 cv
416.004 74.1758 417.303 75.7119 417.303 77.9561 cv
417.303 80.2002 416.004 82.5625 413.88 83.8623 cv
412.342 84.8066 410.572 85.1606 408.798 85.1606 cv
405.375 85.1606 403.129 83.8623 401.005 81.5 cv
400.533 80.9082 400.179 80.2002 399.941 79.4922 cv
398.169 79.4922 li
cp
385.886 76.6558 mo
384.586 79.2559 382.695 81.3823 380.333 82.9165 cv
377.971 84.3345 375.137 85.2783 372.183 85.2783 cv
367.931 85.2783 364.034 83.6265 361.316 80.9082 cv
358.6 78.1919 356.945 74.4116 356.945 70.3975 cv
356.945 66.145 358.836 62.3647 361.672 59.6484 cv
364.506 57.0503 368.168 55.3965 372.183 55.3965 cv
375.019 55.3965 377.735 56.2222 379.979 57.6406 cv
382.342 59.0566 384.231 61.0645 385.53 63.4268 cv
387.42 63.4268 li
386.004 60.5928 383.878 58.2305 381.277 56.5762 cv
378.562 54.9243 375.491 53.978 372.183 53.978 cv
367.694 53.978 363.56 55.75 360.49 58.5845 cv
357.302 61.5386 355.176 65.791 355.176 70.3975 cv
355.176 74.7676 357.065 78.9023 360.136 81.8545 cv
363.088 84.8066 367.34 86.6968 372.065 86.6968 cv
375.491 86.6968 378.797 85.6328 381.516 83.8623 cv
384.231 82.2085 386.358 79.6104 387.656 76.6558 cv
385.886 76.6558 li
cp
341.118 85.9888 mo
341.118 54.686 li
339.348 54.686 li
339.348 85.9888 li
341.118 85.9888 li
cp
314.07 56.1045 mo
314.07 85.9888 li
315.725 85.9888 li
315.725 56.1045 li
326.473 56.1045 li
326.473 54.686 li
303.321 54.686 li
303.321 56.1045 li
314.07 56.1045 li
cp
293.991 85.9888 mo
293.991 84.5703 li
277.573 84.5703 li
277.573 70.6333 li
286.076 70.6333 li
286.076 69.2153 li
277.573 69.2153 li
277.573 56.1045 li
292.809 56.1045 li
292.809 54.686 li
275.801 54.686 li
275.801 85.9888 li
293.991 85.9888 li
cp
257.492 85.9888 mo
259.264 85.9888 li
259.264 54.686 li
256.194 54.686 li
245.681 83.3906 li
245.681 83.3906 li
234.696 54.686 li
231.744 54.686 li
231.744 85.9888 li
233.516 85.9888 li
233.516 56.2222 li
233.634 56.2222 li
244.855 85.9888 li
246.625 85.9888 li
257.492 56.1045 li
257.492 56.1045 li
257.492 85.9888 li
cp
196.899 79.4922 mo
197.253 80.5542 197.725 81.5 198.317 82.2085 cv
200.441 85.1606 203.868 86.6968 207.766 86.6968 cv
210.128 86.6968 212.019 86.1064 213.553 85.0425 cv
216.271 83.3906 217.805 80.9082 217.805 77.9561 cv
217.805 75.4756 216.271 73.2314 214.145 71.6953 cv
212.608 70.5156 210.482 69.5693 208.356 68.5073 cv
206.23 67.561 203.278 66.2632 201.859 64.6089 cv
201.034 63.665 200.441 61.6567 200.797 60.1206 cv
201.151 58.1123 202.688 56.8125 204.458 56.1045 cv
205.64 55.6323 207.058 55.3965 208.356 55.3965 cv
209.182 55.3965 209.892 55.3965 210.482 55.5142 cv
212.373 55.9863 213.909 57.4043 215.207 58.9385 cv
216.861 58.4663 li
215.561 56.3403 213.435 54.686 210.836 54.2139 cv
210.01 54.0962 209.182 53.978 208.356 53.978 cv
206.82 53.978 205.286 54.2139 203.868 54.8042 cv
200.562 55.9863 199.025 58.7026 199.025 61.4209 cv
199.025 63.0728 199.615 64.373 200.562 65.4351 cv
201.506 66.7354 202.924 67.6792 204.576 68.5073 cv
207.53 69.9233 210.836 71.2236 212.962 72.8774 cv
214.734 74.1758 216.035 75.7119 216.035 77.9561 cv
216.035 80.2002 214.734 82.5625 212.608 83.8623 cv
211.072 84.8066 209.3 85.1606 207.53 85.1606 cv
204.104 85.1606 201.859 83.8623 199.733 81.5 cv
199.261 80.9082 199.025 80.2002 198.671 79.4922 cv
196.899 79.4922 li
cp
153.786 69.8052 mo
154.024 65.791 155.794 62.2471 158.63 59.6484 cv
161.347 57.0503 165.007 55.3965 169.023 55.3965 cv
173.157 55.3965 176.938 57.0503 179.772 59.7666 cv
182.488 62.4829 184.26 66.2632 184.26 70.2793 cv
184.26 74.5317 182.488 78.1919 179.772 80.9082 cv
176.938 83.6265 173.157 85.2783 169.023 85.2783 cv
164.771 85.2783 160.992 83.6265 158.274 80.9082 cv
155.322 78.0742 153.668 74.0576 153.786 69.8052 cv
153.786 69.8052 li
cp
152.134 69.8052 mo
152.134 74.7676 153.904 78.9023 156.976 81.8545 cv
160.046 84.8066 164.299 86.6968 168.905 86.6968 cv
173.629 86.6968 177.764 84.9248 180.954 81.9722 cv
184.024 79.02 185.914 74.8857 185.914 70.2793 cv
185.914 65.791 184.024 61.7749 180.954 58.8203 cv
177.882 55.8682 173.629 53.978 169.023 53.978 cv
164.653 53.978 160.4 55.75 157.448 58.5845 cv
154.26 61.4209 152.252 65.3169 152.134 69.8052 cv
152.134 69.8052 li
cp
139.022 76.6558 mo
137.723 79.2559 135.833 81.3823 133.47 82.9165 cv
131.108 84.3345 128.274 85.2783 125.202 85.2783 cv
120.949 85.2783 117.171 83.6265 114.455 80.9082 cv
111.736 78.1919 110.084 74.4116 110.084 70.3975 cv
110.084 66.145 111.854 62.3647 114.809 59.6484 cv
117.643 57.0503 121.305 55.3965 125.319 55.3965 cv
128.156 55.3965 130.872 56.2222 133.116 57.6406 cv
135.479 59.0566 137.369 61.0645 138.667 63.4268 cv
140.557 63.4268 li
139.141 60.5928 137.015 58.2305 134.417 56.5762 cv
131.698 54.9243 128.628 53.978 125.319 53.978 cv
120.831 53.978 116.699 55.75 113.627 58.5845 cv
110.438 61.5386 108.313 65.791 108.313 70.3975 cv
108.313 74.7676 110.203 78.9023 113.272 81.8545 cv
116.225 84.8066 120.478 86.6968 125.202 86.6968 cv
128.628 86.6968 131.934 85.6328 134.652 83.8623 cv
137.369 82.2085 139.495 79.6104 140.795 76.6558 cv
139.022 76.6558 li
cp
@
%ADOBeginClientInjection: EndPageContent "AI11EPS"
userdict /annotatepage 2 copy known {get exec}{pop pop} ifelse
%ADOEndClientInjection: EndPageContent "AI11EPS"
grestore
grestore
pgrs
%%PageTrailer
%ADOBeginClientInjection: PageTrailer Start "AI11EPS"
[/EMC AI11_PDFMark5[/NamespacePop AI11_PDFMark5
%ADOEndClientInjection: PageTrailer Start "AI11EPS"
[
[/CSA [/0 ]]
] del_res
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get exec
Adobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get exec
Adobe_AGM_Core/dt get exec
%%EOF
%AI9_PrintingDataEnd

userdict /AI9_read_buffer 256 string put
userdict begin
/ai9_skip_data
{
	mark
	{
		currentfile AI9_read_buffer { readline } stopped
		{
		}
		{
			not
			{
				exit
			} if
			(%AI9_PrivateDataEnd) eq
			{
				exit
			} if
		} ifelse
	} loop
	cleartomark
} def
end
userdict /ai9_skip_data get exec
%AI9_PrivateDataBegin
%!PS-Adobe-3.0 EPSF-3.0
%%Creator: Adobe Illustrator(R) 10.0
%%AI8_CreatorVersion: 16.0.0
%%For: (Rixwan) ()
%%Title: (apr-10-39.eps)
%%CreationDate: 4/11/2018 1:16 PM
%%Canvassize: 16383
%AI9_DataStream
%Gb",KlWY;gddR"Eca3Y(F!h!Y^0cC9(^p]W"9Kk01'o]&"ru?`pbFYY&+AD)WcTiG%<Q20CRaj>cgHsgeWQq3.TMa+d_1!Cm6Rf0
%BUu95s'.$VV8^N]9)'LohuC93mmU_Nm9Nkhg.hjs[+4("[Ze)M>An0ADJuM]rhJ$omF9G>QWiW@RUtkN8o%Q]\U\TJ>Q4/),>0uM
%h.Ecr$Ha+dh.-0KgE(_G(#[sX&!+2g!$.m65'-kkB'lbiI!A*7"LoHJQ=Ii4#%8K>0)NP,*!cJ!/N`GoF.`0TZUV.UXn<Y#f&qfj
%:Lu'7m2i'o)ZKhA=t84pIrk*hWLBF0#$IRBW2*)&TDaNkXCAoNgHhXU^']BZ2Z#^3r#bs**@X8QhkH,1?Pa[[$ibBBDTUr+m-RfX
%%>P`*XHMbac]7e9*bbV:3S$c4mpXr:A@6m/`mM,oZ<pers$Qf0$c;tLK!t'4"$7!3guG^/_d>\D,@m/!Ij3'r`$\_&dbc#.+%rFH
%Bs!tM`J@U,rI`+>?t=ud#^Ci\V;8V_7N]/'0J)AHZ.#kR))SN]hoohOp^+5#hm11/Xa?B-6!i=!!/G'@[.8OigogTH];1SF:>.aF
%^LJ9iZm2d8]/WE+&='!2Qc%oh#a&P[2<*foZ)fhlEJX<R:j9O2ZUS^Zp.C5cLI-ZdG8kZV_4aebpjY"Raq=GF/H6sk#upZrBhNK`
%G)k0uaBYsl3sXF/7]X8[DBet)ps1f/oG5Z3XF2FEec0$l5o#$4TS3EeYM8P4UP0H_qd6Q&Dpe)]2LlmAGM@bq<pR-kmsiS^lKseB
%oI`l7m4Jf\]sN.W%K>n%1rn`ml*+AbTFUb+.T<K-3Y/En&ErJX-2oEBbPhhJH]%i-jEm8lTMKY5*8P<,Sn@@"WE:=O<kWTSlZS.b
%^6dAR[;Lj"T^(BOr!pKkJ7Z<8N>8H/7&L,\@NVj16VUf_JG`BFWET<A1iV0KpJgPXT0o14@$)oLIPajS=ejSJ'iIHu?*JPO[+j;O
%nSWLT^%9Z\]:EY*n,hSs4ilGCs(5^Y;2+T[J0-/Jo(?1P29re@c?UYVX$>cke^,W"(6YDFEBUKoo-`)@kSKH4NYJ4IH39Dh-.D_5
%1'`<YqT1arQ]l<hgISN9M`AAIN>=(PV1V(/TBbr]2`k]`Pn))T*JC]Y-7Pq[ooEO4TF8QpijDF3D=J\YhE;*RY)hoHA+b%[$3'UH
%BDXP;ip?,K,Jc7Jf)9U5:WoTF5FYd`IU!"&FW2]\IL7!/!=Dl=h:ch9jLgW*]4m1gE(Z2#5T-UEn\=obOEUD=cF0g$%nhroT[MDZ
%=m5T`2@u_aB[lqBQP=5cR_0>V5a5K?BO]99`n>XP!&_(?\B&A?'7r1^f@+oc"H?QE"UHqWO,M0'eo<#%SC`eglcEql$W)P2`^NQ5
%q>4$>L*)UR_I\m$8bc6_EEtdV9dfW>h%ObC>"O$'-hpcp1.,&*Sfo[irq3(We9^@k2uPo?b)=@);#,)Ck?LecCXCj2qR,50,"dt5
%*Z%PQp-HFok0EXqoiO559,+)E-p93BE-bec=?#UVZ6H?V/6Ga%>h3QbW]je)m\Yck.1O_gX#WD15sa9)3[3=LZs*X]]YL3(U6@0?
%NRh\+_ltPne@5cEBFh[GqOG0[749WRd+ILhF2WCK2(L@dIShbcrHiqt*`ph>ddkVIRlFkhY2!R!Eo,$*S%3R'TG(,526c2KfBl&r
%ju@Dc![Ue1b8&AC1LG%^bKYFFR4gMjj^u6^%JJnrS)ha-,%bS;3Uh(?dbiO?i4N*/s)B9lXVRHHi9_4'ib&'LI">^$ptr]r9WC2$
%ldr3%mgYS1>0(BS`Q(F!8N+(pV4(koq0?i(lSWFZ[EGP=CqI6.\CHN$_"qSgd.JS4Yl<g]:QL@a?L?4j?J</'2GEXGhds/hjXea)
%HGjX6KUn5"j8<r4`E6c%A49s[U>37hY!AFGDpUYL-0[]n.n5UtI&7PU.l&e;I<TY`]_O5R_3jr\$:l.54ihBoNB]Ml<n]#if'"Jk
%,Hs.Ulg7`V?i);KoI!T&E.HC@s6k7TrMKWor\I%$d4Ro.Uq=Ek+Y*It+8Apj(jkX>X1qpk.(&L0\oAjilF*o9VUF\=EE`K/)<dI_
%SUnYD_*?\oR@[]E8^dYCQA(7?C`PPR=D1s6<J6+M![%[VhF-+^(N'g'grZFeLrR+FUVa-U)u]A?g+T`B4&mfk:TPfT^FK6"rUM\^
%T).djr+pBNYF%OgC[9;7HD`'e@jgZ8V9$cX[!%=&[$s&s^U+f`/>']#Nj<;#5*o,&mOXu[b__>PFurpoVWiR;m".r\,#]X.SG4LM
%!?,j!*g9k^E3-ZUX#C5OVOB%qXoYX`n:nImk%EPP<3lW_9[0/FOn&2Q76XbQ\)$GAitZtG<;$I++Ytu6nS7D;.'I!""D^nLR45?>
%OY(t`nmMos)k6Ka?!tEYHKOtZHsUET'7>\D?uOu>pd1-$l#YZ1@PLXBl2Cb+ag9IpK!pLqh1&>@H^U=VVZ8I#ZLCQ`"U17S\'Wf+
%oQ\6?cQs8;Wl`Sn\.MBs8HH)b*c4o-R#0^[W>+!B=[0*t>%r/AB'`f^,!.S*T8\]Br;t_15>U2#-Y$J"Wf:=4X!K4/UU!ha9]_Gd
%X?gt4p2HqHe'W(OPt(b[NBaToR/L1+,*`<Z=sHf?)H@oW2Ebj*hgE]/3-?3j?0`sd1"lE*cra!<lmQo*E[pPT-kQ3ASloENR(n"!
%:YKVH/XS26g;pR/WF4BrXbk5%Ii<<#cO+@s;/TX7'[R>C.+S*.7_uLN%@&"OOf`f-JEYOHAC)<$Z!hQI7LG37/AH]Per/<7`(Q)J
%N,HdcV#g`uY;bsA_BQmmMGEZ`I+iErMs*3&ChuF=^]SBhnc.>'US4"P;>X3uZ@JXqYB:5A'YNM:8BMjQZrZ,S9N'%HHigbW9tKOj
%4c<LEd4D)G(Of?pDSX5-MpX'hAKi,$j<eH4'Hq'l_ABOPPY$bY(6YajTBeH4dD-sXQHaGI"Dng7Miukk>a-GN9Ztj?jgccC9Znm,
%74BK]PFmbR,8SVd-KUs9+_I$u1<W,^?`Z/l>a,QdFfn;$\XBuVKf%f-Y>I5-(SqBldpc0MHS.paZ'b1:EDppUP+.\o;M:EORIu'm
%0$Q68e.`hET?nM:*6[T\4KhS9f5)_0mrF<M)2MYRMfJIK7bqERffH:A4(40Ljp9?kY$XUAI^>Mm`dV@LNI-'K-Z>E@l*[/2CV`]J
%'k"jOYKc^n9Wq0E?JFZF1,IO"QFW=@T['pu9WS,u[G&i,]2?T%9WQFFg-8cAd2eq@1$igS)G:FAi4n*2SZ3.7feiR$Bb\ji;#qHV
%VU92u))C5V-,2\H+")BL:_"Qr4"b=8+7mM$?K9?ggWO=rNlQ,$ERJC.Rl9#f?Fqn.Qa\eTp%5W=]):M],H\#1f)!o`GA*)Dj!*jp
%h+Mg[?CY:nP=O:/>Y8KB&]35'1h39F#2Y$]lel%sf9>i.DaG>f/1T>rN`EB5pi!29s&k)kiI@3QLXN@d(,A&ajC`@XR5ECVB"dI'
%5B(_bPFl(CU%,*Ri\*dH5;A.I9HM/;IEuKaO2r--0pAc4PBO:]mXa]841Is[rKm@sS;L][;E'kETKoaMij)Z!*=OJU[K&Vp)D9cC
%12-0sBK?s&iNcE0K*HP*Bdf]s0?0r2CY_J[]UAJOX<:HO3YjXL-[oq1\OC)0f#V3?q;RB9,c>W,i[;ciC6F-[-iIZS^U*mrakZn:
%_o77l-HiaohqA"tD#\^fs#]!8bo<A0rpPhq$"JA6,OPOneoF&LEjk-mT`LemO-e)aHtRf?ZT[3<2KK3B3K;M:5qcM^[pXo+'p5b`
%0?,;S5LM)us)C2Y=l\k]%g<^^]R[<gKu5!kbt9Rf)%I#1A8d\RS(1>#Pn1I(@+H)>b:Gj9\o6"u=u!^/d%XL,U03.CKf*HSZ<;kI
%n*t`4XM(qofqaAEArl]3_ITu,g#(ee/>%(6['^<C@_)t`=6$Bqr-P30V>]Ln>$l/kCTU8([:f$9EEp%Q+I\^1n?7H6-;o#'l9$O]
%;scf/k+I4W@tTL?PU4?iVPuIU+CZ9aNNqWC<4Sd//Sq#X'RNYG2`[Tf$U.7+n=eH*'<lbo^[1$sj@Yu9I,iN_p_&8^Z(mqMNPGV]
%MX9_+7%-V1R0?o/JX9NtAJTNY"^YelQW`6X(3mB5V8=no&%m]H%#_mE!\Y5RJ^+<M58/8ZT5ejlnpDc2J92nRSuI_mh9_',DU),5
%T*hmJ6:U"b9[eFC7$.iYAsZ4c"q?cFfgHDjAsZ5NM6PtWG*B[%rkbQq`al.EpM,[\j6a1lEInqZCiPsR,A#:>a4X0\'>-=(Uq8MS
%$Y8c2ASTf9faUV6lNX5Y(t[I.9=*B>`[.M^R!X]#c>3+H+1"IPDVD)f!k1qL:?>918MKhXfaBnV=YK8B.4[5-d4.K#Aa=k4_k3,V
%4XOK^[80SFBcgtT2m!lqajW02G8ZD?6m(?jN:+r4"t"1tDX(`b1CrlmH"aX!h7Hu[s(Kmij_]ipj'(nf[g4_OBsBKC<H)ctpHQlK
%rgU+d*=F`_[U29&MqIN/1uX?);8e:jEu)f`#YuS1`A+72Vj[B@7W\al(e&,*`A&^je"*p-5Ds$qiY[k;1:&s[/<2G2EK#C-YM?;r
%arn=\qokto>10TcYM5$\C"`ErC\a[(*t(Z^hjhqISrD?CJ\,;bC;"_qRslHTXe^ap0N<L+Zk^+TVDW&TJmeRakU8;?4>*@3m=Tk_
%T3N/g2'N0*m]_fgU<P)L[OG3!VDpHB//9>jVQ9[K772b3FmKnR(")NWbB`Y,Rt/\-Ap<iO5!3>iS#;@!FkU[kMl8j@Cj_H]Gk@rl
%/n2<!a%+,8Y,!95`jdO5I)2GI\MiYQ"b$pdh31,/lf*!j"_Y<:'QLq/G^QWTRkQ.^g7LIf2%,WaM.,28KWd_\bS%XG]/pTjCqTrm
%?Zu!fRZbCB#iUH7Hkdg`Ag`!!Y;=A!D*,Q`>;nJT?Q_FC(5Wj79gg6JVq92:g6qbW1LG%tZY&@Ec+LTT2`FFTba\LeHZK?!cC$UM
%)'n!RDsdh,LKW^?="?tD4'-s<R6*?Kk@X/;bak66F#/%.`k$6j9lfD(&MnLk-I&)CC:EMAh-,r[AE&$J7Jd:6F2`sFg&Bc$HaKGr
%__\od@JiVJ$6Gk4P%W^Mra(H7rKsp<-)U0<M(oWeF-P;6F$[fjK$bI'eGPm.V3A!H>V)4$eF(hL7fUM,U!R\\s!'$,V&&14-$KNb
%A"T38<03\cR7<YoGZ-V\DHq;TY?cN3nNkHp'4thsN)?YKfThrl2bUVSpNq/hDZ:9o:p.93loje]?Gc1JitAjdc3kY6cc!`ZMcXU)
%9&T1Dj.`aH$X3j-XcOE5PTCW@"nHqbKC3G*8W/aC(8!UkrtQE*T;A*IFfG.']/TY^PG#]s6YQc).Ms3RA]LYlh#cl;p7Ffq:hY2S
%PoLT'D!;hTSNO[0I&])lNNc])6[%EiG(_;qD6^HDV)<JGm@BYV0[Z3&:VFk32:b'U$hu"/)h3%bXgF1R2#>;sHP*Qi5N)a*IPN^:
%Ak(0$1l>m'dGNfC"#5S/g*jOP+oIgqT_q`#_orCT"hT8XTlY3V)*/U:BO'Os^_jVlCgZ(m_4,6Z0"[juTY[18)N&4bM_Q^<>.;mD
%Dl/5kp7J?"Z?SWYnlNl$Q@tbcqKoWiV(UhFEL^Ej2Hq.K_ap3f`N][XZc-o&*0_mS+H%m$ZaFfLf>_N`+O;)JS5c9HfBA7Z)38.Y
%MlDqs)gI.ac$ECf-=8GgHg>P&XsCUPnt%;=fr"[VU1Ok7.r\q:<9S;5A;U?0qb&*a;p5.k1;.57Bp`$:^M#ccYBs?HUeS+[@)mP9
%Y*s-iXX7qOF`^Qcq"XM0il4!6VZ)U7`<%sn`*\\4GS=u:piTH2Z&l<h5<9<:cIkG$QV?2Egq(6EDc<l1ne:`[`2a$r9#(Hg]TKZ(
%:NmGfc]-2fMjdr4g#K'=Vs-G]3))ALZY8V5lC4ZThk-e%bslo9nW-6\iI:0iaQQAfFODTQfXP;l^FL4O1eNg3RqrR<ao58>OddV,
%jfi9\DRu2uT8D72`QZ'lb%tpraW\mI_'@9]h--k'>3$u`$'b6)(]*pkK*Du2p%UPbF"6Ni5"O_AUh?B^][:.:Dj;lCGrU:R?=t^Q
%^F$qj(\Q]6+$mJ>fs7a?NE0=JL;YbfU#XblefN>XmMK+Apf`!pB[L2drNFhD^\ggMJ#d\g#C'6k%g:uoX8PPHr<oH5mLs]L#4q4<
%d.A7Qc\1PUdHkDC.V+ffn\8W6%K>8^)C#(J?ffYD*3^L-5o9ihbPn^c#FsgpCtX@e5'pYQ%qP7Vq]GU:QgiTc_#>b8<b\K(l*FBi
%ru6FBa&.FHlHg93W/R7B/<,c,KW+4IZWG>uIQuq)m%"jZpY;ZppqGAKZHsn:$&Np,+68sf_nZ5ZQfN.#mYG.E-%7JhXW#sDX<e[4
%jhq$E<p;XBBC1O%52TSn9N%te3SE'i=q,`p*=6'508_5Q'DCJ&O60"q_lE\XSN]F)AM&^5=51ii$+>#bed$rb4+8^]'PI?AYo!I+
%<f3E>0A!g4=D?Xl<Af8)/!h^+HcK2?E;,CUm^IM_^Xp'1j_IpV.#^AqlRf-noZVe[4f_<r/UYJ&q@l@H$S4G3ql^l5$F#F(?^M+.
%>N"BS+Z*s^([8?:'!\%LU49(;r:c/[dY>8U>\pJ\(`k+_1Q%.ZfE_H>Q,:u<`RP$USI?Z33g2k5hel2>qYR*5]%!dS)2N&V.%9.Y
%qS/CV#M5j`rNH*>Z_hd3oT'<?mjZWE]r[@O*&Sd?<pB.'>0F(A\Bq"\X:P/1h!(K5fF,6k'BG/.n^FpKKXbe2O]_p<9F+5AdrTA$
%12hS-kQ+,Yeo"h`cUk_Z7`BOsg>D9UcE7ZcZHeDX1bn\+;iEgOb+<XF$j-R^[>F*;1[WfZ?s3F;SVdC4cJ5CWn44^j,GiYa\sB1,
%*G+a]WI/6V\Uc<hWR^=G%R*%E[GJkVf'B^?_cSL+8:_94e>md3AV#+.9%mELpUme3WXSakdXJ=M:V2VdUr0T@[VWQ$aX^Z(_#%pY
%qPCN9HdK=7CnoV-CAkLB[NP2:7n^n!:9B_'9>*f9OQf/(XZ<UV+#es:[4\&lL1VBI./oi\8F!EeXkQ'Sf=LX<^7>2ZZ0up4FD7G3
%"2.XnEc'L9DQ6+kg;7.WU^+X&qNi#+BcjK09D`[F@GM/ME$JF!Q*J*s>3kodn%dj/)9TX1g.T&mVkq<'c[KT'hWWQd)Hij8@q6Xc
%i[UZ.VZ3;fg4UX:V_&`m<_pIu!]+SC@(1@.hRO7a-3g=F'SL*a,f9=aGL5f/$srsj+Et22gU5VcTQZWep=^N:a(3chUGYE:XnhQs
%]0h)?,PCY7g;U+XqMjC]k9-qJXJ1\=qj4:;27?m-X:06.;4!jT[W?frC4W"pCtJ8jZ;iqcK*&A=CUDMf+3$4:BL%I+>5^nse4WO$
%QT<eN>@j6EF&CWE*+YIJo/l.oN!0')REcaTEt?^c7BI)mDmtp6L6Btp"nG`.<>nD(]3A:1/H,MY4]-%,+>\?BDYlcR"Wj(96CO%h
%2hN#DK$ni=H^\5=EKW1?0HDl_n0^oM1LNLe<'KO_>pe*[^Vc_^*'U?520SV;A9u[B3c^t'Io!ZsN;q'jHmqV4ZSp=@T6:EA:X>/7
%r&JJ8lY/LpS4\iL\,5=V;V\^SQPH33[]34V54,0=`h5ocioc)OP&O$ti*<#oL^<#*KX+ZFg!`S"AHSuQ*P&g8\@ca!H)0f0)!V35
%W3+7#*U;l$qIHa;)6SK2^Z.\h2EXr.g"kVL\XlrIBk-Vi-b+l,Y@ABPZQR#-iTh@nQFhf[]MLn[M&M.pAlIHXe^i_dC:)VE'58\F
%6s9-XZ1\GEIqt[@40UJjeT!M&Z&s(ZF=k\=.Fu+EFA@A5MkPtl>cnJ2Ut\PIMqr0+_?,e,e]9d6>Y\H*5=:G.L.%nl21UX7ffn)(
%S[M0ZWF!VY-`=eV=bbYY`lL2!<(Lc4V"s%#p5tO*rqWtg4)+>V2>lAF,D2<NS2DtB-b*!^:J]0h]9N$@V<+2SmR;&iHle8Zon-QX
%WtmK![%7j+bGD!+jRKiO4`*F?BnIFl;KZD%",%n1,=5?u?JE/B<j)&:g#+Bpjk#F0760B,>Z%q.Dh9!m[>O^Q;nobA^=/`Jk)FAY
%dhUuIi]InfmE3C'p<0V&4/buAL@-830#s<E1a6A:>t.=-^LX)GWhu;;;-1DP^F]mq574SGh'H?`>c[3ug1t$O&D/uS4](D9d`IPJ
%[0nm+pC`V+moqg7]ci]Z9YA$&_8%QNCPrkTf2Xb7DH)*n1$31VUH.URYAr.9o2Tk^l%o];>ZiF)ffj7`Bp""T*nO`Ml@*e:7S1n:
%jegu`j;(>@/K"1F"rse?",j20pk5L.>Z&"80=SP&n.TOsrn;>5;_V7tgYMmCM`/$]>PkVOjh0QYo$n@$$H`6HgUaa/4.3!]]=-Yd
%f210o3a)%6$C/R<-*?$hZ4)H`i24tZb9^-)J7Z,`!Hs9N<tW4`ZF#;qf9N?RMtJb_l:M(h`OH7&'B=tU+S#D"?VdB$j'TAYK@WOc
%F\!<SYr#fh.-\0%f9JXsZ2p9?Flg1[L[Nl>dFUU^FaI1!TP7hr[AH4RIX<>"Ed;*)e.aTr85BSWeibHYR._eD*hBb9ja)*0p>^if
%h:$Q59%A^YH@lkg-f)G_l2eFV>**N[oY<"H)u?R#n!.,A=Uh,l=-l6\#gD&[2)9gg@HhK3;d3jDI5OH$^7Kt/^%30;0'QBk_GY(i
%6Ph?<TB8X]I7(uj4Pg$MVecQ/=SMBDF[ljhgV9QJ=e9Pn=&:H/,`%aF[^mRl0O7Tk(;-\P`IM4<FRh(6g$U+eBcL0JGLc2h'(nPq
%TZ,95f2s0RQM(Ze(p)BSTTrb./A.&MPph4*mhmW[CUMY-aq_muoch3C,^O"hD>Bi`N`p/1%K:Xdo\80;dI,k0%njZ!Q[*B1\l.k?
%oX??V,k\Z]ON,nWmCgN3Bss@O:K(QI-]rHkM0e$\e^=(?eQR)-HQO#H1;i3TgDJYDFST!S5@EP&ZRm68q<>ooB*DK9/)bou["I*$
%kmmK:ND>d?L;Ft_75OL&[*cJ+H@;1@K@\R.,ms@/mV2Fmd!0K:/kVMV4Z(M8!^/q]Vq+c3a]t\!4ooE!Rj(CZk"r\=kA`X@!;j'M
%;VL4sd849hRc-tE/8p/SG[oa+V-K2(CCSD!b/*r*<od>5K6;@!ih#m\p\q)dQ(o];Q>>q*?FolT(Y;^"c^X)jB<>Ak2fC:l4]lXP
%b.YF'gD:gFSYalGc_'WMc^)"hHa'j1*@0V+L9hQLZT[c;AbE(\Wb2^jh::U?j[Z@%$_?-hn!3J]RTWqQ^=ALF?M<!r?G+rt?1H?q
%ou<2n8[VfPE&Q.qG5VM"(fiTa/VP:=pT*18YB_3+(Fm]'Fq8,\Im3lh\22d=H?YG$^1@h8TUG)Ep$sB;[_#sq)SURil*ngoHMQCY
%XjV5_T3#)H2F"AtoubPTlGC6Nk1oS).5\s;[JBK?G>LI$Hk`_pX4dBHe$\fHqK_k`2E::#IPnC>^TXe&HZ6nRJkl'k^RT^d_dE/Q
%=1@I!\(2=iDg*]:Mg&@;'CT`0!AkI>S"!23'*$53qRLg_]Mc<'hOe/%^$p/nFoB/2c1Q2Jkio^GGKuP=Uiq<=2<Hhm\'K?K[e7-G
%FrPY?/iCAUXKQ40Sip3BcMof$C`hI4NW_IL?%.(e68QIK]?dOC<q;nDs(#d<ES13V8L"WcpJ0O:2qbM"0:$ESAQ!s0HO$&K+/IkX
%CXnail]5g8aS*oC\]'8E/IV<AS;%R/pK#nT<pgrE/As`DJ>mF7$LU"cf@sZp=5MIl/NG2&5-oR-[dF/f:P2/]E*,:-8&:Z1ZKg].
%`PZ(\#jAns[Ujs&ZVu9W>IhLoC]7f[RgJS>0<>pi"IcSjDJsge+7i8e=2\Gr7iSXVq=TH$YIldVK<k^or8*llqK-5`WBNCj+t>X"
%ZEda8pA,.9:"<aPDg0Hmbs889Q`:FcFVjDT-i7!qobciK>,r]#G$!/L1GAM?HqPrEeSk'0e&SZ+Dq&M4m]H^@Dr8K[pYNZem&mPZ
%<DO,DhcIRB?93^Nf";NKa./hFKDNWJ@se42ReOP%]35)UFM-K*(-GneD;IA/>X*XI!tV#Q%E&-j>;mB>HuHa!lu#%6[97o[J&SrC
%H-N5eMEnpTIP_#j?0s^$l"L^Z<gO?o[k!4eqh%c*L6tUn+U@%UpQhoG!+sUG3hEt:pfP:Tk'UH[<jai8>BQ>RXF+=,XFcBn>*rZ4
%a'XSAb@E4G>WEX+I%Ho'#)l>K%;")5mH9bpQSt%sQ2/_rf?LkT=65=IEqn%-Gk]Agmto/K@'C`NRre<c&(f-[rJQ[2mII-?=-s47
%g.^0>Ct)<Y=(-80mfRQR*j2-+DtLp.jR%CBr9,+0O2Kh4m%%#LmH5FH$R]rNYf%@BX*&*QEk#&?#A*K`Y-)Vk\B*th.n[rIrt(d=
%jOnK'kIJ&X.R*gEc%gZ!nn-GPkfc8>rY83UC!qO7jE,I<lA'/kipJn*Hcl&?G71M&lJo(=7r.#Yp#]H/HIo;>T"i#JFhF/E'm)>L
%g97'lqhsF2b5UZ$"8M6SrO$$^qcp)FLXjiY0*:?Uqja_*NHahu8<"*2]_[$>DQ]QoH&qh$C\>V-5H;B0Qh8LBpFH,rT<dZb[^a2]
%RpHo8)-rp6dTTecR-QRe=.\/f7+HeBIoN1ZJ[L31DVI2iCs5'<I\^&:TjLZikPF-TF>,ip.1gou?f((=K)SO5phTRGqc#TNqJom>
%)HXYUY.Rji6]nS@5Tah"?aDs,N[k?e6Vma)$DU>uUq,2RQL=>fUD*=jLQuMal`G.+oPDf:q=:uRhS42W"%@RmI_NP0MLRds?9Yij
%=R!rU1OEPJrL(Nol7\eJ?'N2#cSa41lg.:<cer3cH%WjqiLe:/ee)-H[8g6C2a`)"]'gVgltg'l'il1O=bUHe#M630CL%Nj"rfDb
%=B41,WkMSI7Bek#XA=`3$L8!T_^OV'A%0=g(H[D./[O/Q1TZUF0$-j!\'"]Ll8t*PW6a-eb?09,nk=+gQ"M,uN,5%:^JRZa?n>=&
%X:,O[ML[]j3TKuQ#%M<lA2F-.jHm$>&].X]Eo[P%9E14+VODt*dtuV&C7\`r/A0Hu03'<:ebge]%9s/k'9>dt!t0#t]!T-2nr*Hs
%!^4]0-_+F"K-WsYBWA?,DB</?VQAe9'>_%!8f:j!bW;>`h-!fRF3u%DPnhlV%g?,IR5)'E[ICKmaG`a:PZ_$mgf%s@M^nTiC&qB(
%ca3L`Tj_2=N+=e=8^#S;N&W[bIngjVYc,)X<%%"nILt0CGM->N#`oVKIJg:0VG6iaEqo'&CNK/7H3eu8WC,9u\C,uZo5&dFlct9^
%c!-7O\?$ifOgG*(mt*]$]i[G/oCd"6n`>"<,J!SuT<E+M`pikPQb,?/(7@BrmLFPYVT6Tc>!6);pl*s\HWq#1du0gVO'-[-h`[?b
%f?X^!+02SOI:&`pXW==)rDn&bp#&L;"HD/P[:u,TbVRj[l*ZcsY:P.YC_-RBq"DU$i2FBUCa9CDO4SseB9B]ip=dVk21;k%6CV6(
%J9j532/e.jp04ms]K9k2JH(K:E1CdR:V#.:;Sd\j5$MhfhV%q2JfR2\$>b"fj+$+%'_#@p!VKe\0*OHSBauUY>t!\^@r6J3?S8\j
%'4p:n$S`-0mp-4*l2Ad_B&RK*l)JWkj2(Y1l#FE3XnlcaGQ9<X4B[$;qWZD]RsUe)bZ%'6&a$<T\ggDMT*DLAeZEau9lgdb%qM7K
%JkG>tpb(;bXR*ZL"_&"kPfp#na^mX@BBdkfGbjK<o<g,/qo!jaBL]T=UKpT<X3WHeV(g6PXC1fJJ\MuscTAU3icoq*HYq?GI>JK@
%nj"UmkEU[9FWN_2qedeYcZYl0\$oi*c5o/AJR95M28K=Vj2IS^oA=F;6'%(fV$MH$"2SQu!c&T6oAHS6SU,%F/>:tjAaR?[E_HG*
%ADULi2_thslD<H2#A]eZ)o%Y</`GiYc]@L1DR9U-4e6q>1ZIu5E;/n#-qq'VY.`LmL"53No<mfIi5<7NS(@o6cm>#C*.;l3S(m\>
%n7$@BB5Mk8g%4'<g)Xp3:=#Wbs6cbX)'t]?X534>>An6=kS\/Efm:+)'ck)4lSMr*,*hV?em>G'K/LhYGh]iAN5MPHQ$E,TUAEiq
%qd+/>\@8oOYhHeho#9adLC50%Xs7n9(@!JRY4ae5O!!4>7p=a!Q'3l'eY>(ppQs1g%iVYj`o!/n'4!a6l?KR9IG'&@<CkiBgt^V.
%b)<9fCt)L%)EU7H5$JY&biZL)m-6Rle^KoX"K*u!Ms]!d7^!E.nAF7`II$"7p[t40$Ub(f]l.f)@P4R`$V&CAN"oL$UKcpoCd.d$
%f<;j`@+Y3V5'ch4?EH0H"Y#%E\&"VbAl[Gigu41?@f+a*1(P5kB\UoJIjt>B58C8GZ1iJp/+;4hks:6\,1$a:oC^l%o>^<eH_6u.
%B=CpVYC2g;9A$e<51%-^h0ZqrGRN,rZ]10h*uh(g_t<[Nk2M:FI/=<]W:4JuF'u06]P+h7DPS4YG#+.7@Tc1VF8Bi#RC@XGG]WBo
%:k_CO[gtn(m[_mnB5d6?\!i:PC]:s?jiX&_HY8WB_g->dT&4no3F'2#lWn8@n-.srj6G3nm71i@m'@n/X&ff%\fVsL^O*21I-:Ka
%l7&rR/W9$L<+!p6S7<n,ecO(.34jA8OqHSX5.u;^T$s\EbNaOpA,]>E9%Q-EYKl[lQdp;(qgI#e2@T31Xe<GB\W6gZ+-m_&h]CRY
%[QZi]&Tt#uQc4)k^7CiJ2'0E`!F'K9Z<@.qi_^b:7QGr>RT]XFrq+rFV;=?B?RO%/6Ud<i0+T^<ghl<KflCS4U&E@C2<ik\"+Tq6
%o4J$M""a1@.@UoP]$l;>A`oSQ2p[*McduO-^O%ja+Caf7Hg;?4eDL"/UfY;EZVa\5Q%?hCG[D$:5KOdu1/-2!61AFVqhp_S[d@i4
%=UaAX41D5f#@H6ONSAZ*ODf'HdX&LTc4_H]2CNpamA(EaS3FA3]1X*H<gVE!e1;Da>FA^_0#e"Cd&WH$F8^7S2#d>rj($fX5K)"F
%>PGrWfE,DD<8-NIO-"(Qa=&QrrUVu(IH]7g/KuZ?T*0&'Pf+B'NPe@*mk]=]\9e"KLPn"@)PXu"mVK%-5+c\pYFb-r\GO5$Wl0rO
%.euL_O1qa145?iQY#P:o4.qr/gg48I9$^P5:A:-0138lbTC3@209E$Do:iU4qp2?Tja";`S:;G@It?q1pQ*K>e7cCc2)fguidV%c
%o'QGA]@4XuWVgK"E_n@Vf,%MT?@TR0Q95#r@;pS"[4\n*e@b`d@4ptO'@oN\#TdN;cdOOS-+d*:Eob4-T_dY@Y?,!hg"]\TGk^'!
%ON7sif:'<IrDB86EuUFOMiZ)4>.3TZl$<$=L-'cf4[&.`5A6TGa].'\IK'*@hWCqAX5,jEqUO&<\""\P0s%-_%rl[SrT<t@1KR?s
%l///Q&7YF#RpMS.hg]EDNdl%TIK&kF$?eoZnAoJ;mUK&C]=^/5<BieToJb88n#P]q(N^o,o@c]6gI1J)\VH=)>s8="l1qg2Y.`tL
%2u`/QFld?#%\8j43eG-3NsR&5hSR=kl!&)$i\/#lK.=daBnhm^?2_(n*9JkO[l:d#)i<I(VAIDdF85F$&g$CU_DlqqX0aCTF-e]c
%gj^&E<lZ0s<S#jOcFaO#lf%eHKr1pprF0RqRfFpUDtRO"+1<Ybo5+"-Lt5XC,Pf^ZX/dm7hdtc#2B$lBQ_rpf<\q2_-r#`t-SI]u
%,Rf99kjqsnY23`]L=d%HE+^AB1dKTr^U/6sdT*[&=N/RDLXoXpFhS@]q*`ZP;LYok@]_bcp:[C[i'12H>)IYFGAsn/WpI4(qpgDV
%mr`>0>ms]ANV/#`F+5FF*IJ&ek>leJ,MIW%Ck6t`Z+nQ=l/gCVrVPO/Ig`W?P[bHpJH"CRZN8*YXtV\uO#H-E+3Xft^FW\kmcb5*
%a&dJYl-46Te'O%grFg="gO)O$o\nL6/t[YRQbT`=hMAqP"_RaJmpiF6-)s_9lH.hNLEFlqH2Y6mB5'fe]!BiJEV;?lKc+F%iVTs@
%9(]dJa,T`1c+01!n(-m8c/*KPFMA,]mm!UB5Q0GLjsAL'c]ZdWSV'OVdQ&O&"B3&Whpbt_&_OOX:BtTX=:r"a<?IDXe/gE0*/noc
%\)RQE`Xasd=3j.a%gIg^lbthkSh]7.H3lYU6UqV'.4[KFK8!;BS$PU:UDYDR)p.%3E@"d>haUO!(_ST+T3CKJG>YOKn(rMB(PU2d
%?`]lLWo$8^m.T_e)u!"ueZ4tiC>X=31UPUhC\KbgQTr4gM_of;D`J3_'2\NI045Y]m8Wd8s2\$Y[J-`8L[T._?bLPIqX:M.o!GGk
%!ndAe*Zbhq(q)N9Zi6bHjp/@s('_N2Ju@KJD1J,JkkjMbAg2n+kpiO,Uj<Y7XXALV^&.Cs<l<ZlQAbf,q7IaieCuKeWd!l[=k"&2
%V0Y9b>]OS?p=?N<qsaFYO7-:,2Z5KRs5QOSIlSB_If2Ag`sdt5b^!B./KB(Q0^+$km"._k,,^J<O'qV;c;e$qB0E*SN%2S%9suO7
%]FCXmG@9$O)#t13g]J;cAtXVgP'0ebHlF,Ap;IiKhmS+2k)g8<6r&4pJi0T=od\P8lOF5s14H>g=?3HHC-56l(-]B7X$d>"=Ps&]
%;T!+KZBHp$^)S8(qJCbB[?ad8?bO7'f<Z"/$-28YS(k/JUn<rg8*t6Yi]c5oG&MFHDDsJf]K^lR\nCP#:AM*0gYGZ_KX0:fr9_qT
%2]qa[gD``RcsPOQpok@=[bf4aLOD.@r<@(hS]qB^eTX5q/:NE#f"<5OObc9_bJIEDYhFF<I",.Cp&mMA3Uja`CpQE-b9PfW=[$!"
%GZ+Lqpi)"ES#V:Ts0)\b0<<!=Z[TVl?`\-VlUO<SJE=H>mEXkLX0i5RB(+bHS$9\aTEe(Z1sebc2bjiAI'"`TVE^e0nY4;Qh(kAg
%0kTA\k"30ch2KZ2D:H:K>H"p#h:gW]3qq=D8b$$XjfMHSG>M=hr+1.hpVhTco`"4a:m5c(gCXQ`k`(oE#)L\+HO)5$7cXE_d[e^<
%ZBkF`G^a.85).`L^Ar?>Yd]`WI0!?]^#-@>^YS[,2a0;i:E'*'!b;)g09sHHUlW4e^Sa+3d*08*Z<L05ALGcOg<-]%4$V*[QH2e?
%Kb"OQVb^fWia-d!Gc0A4-g0</1Te+cB^tEX7MA)Z.r_]oIWkmcgMccZGhsr/^=UXKlKClYT(gPOPJ<=^H)CgS'4,JU]NMF\q"5D^
%.hgQH7>K\gEsE3q'I^Rp4%m&AZQGq[bd+=_?(u;k20ra#Wa>%iB=,QXEG8^K+/j:b4=jt6A"OaPQodD82OA17[+%<99B)=MWL*=@
%e%O0Ok@q!HX8S&&=_j:A0HROgUu\7TP\NAZ;<PC1X(BGM[lmbHr-+3OB2nf(4XbG<+A2$%.HQ3*]"om[X#4(W7Z2at,''naJqd8/
%/Kh%BDdu4->&(8dk-\)fj59gN95nX:%S/1dI\\nncEY8kXXZCVW%6m[MtV[R"6an)<-P:g.h,YuGR&NiP'JP?%b."j)kCb>--/C*
%KGefpT"Jj7IhW`>IT'*2*E'YPX?)\TTGQrUOu;9Ud\XP6YR;H$=4ZH!oGAso+mHk\\P8+:?I=CXI]ZVRFg(%]_\EJV?<aN7":.K8
%csVkU>fW$qq"VY7E9TEKQZHZ[,osYtC6RF?<,-g6ES4(5nhC+DBQl,\XujTT^Vo:BfCdfAEDt$1kD"lOk`^L$a5H7/Y=b-6CTeYY
%X,a#]G=TqY!\hP>daFE)`J/.+o^I7T4DE=a=coON>T[uWDUBpf'1'C=j!TWS*9l!?NAM*d[!ec"EA0@<.;QEhq`*F9V(6b;nrDMQ
%V$uY(jPm230Ms)3S4frI4<`Ls1\I#s[Q:VdF7W.r!C]\N9%%RKeG@q-+),ro$DXYU5$o)/VUQTE&ON\0/q?N[Wem?X&[aZW%-r5O
%<G1L5\*>Z[NRNWnoV-jg^#CrJX*'WJX:a!)m:)2B5X06,Db(nan,/gi]ck>/<';&.U$^P7c^hW'Q#&eo]gB^k46/P@U*$4]<CdJL
%!FV.CJ]X9gQiPa,Eq69_fA38I^CdZMr#d*Zgfu:A":9q&o;X$ic';TF^DdA;I]+pS"G[bAjO1K>*6uraN4ETl.TpqVi[<g+K2JP5
%4Fo<\bfN"q-j>[TrL5pX_A"8F:ra@?n(=I*]B&a9.?)pZ==#'Jm?<&"CX.n]QF:#Aq1a@[>u1EBWs[/Ih!q#>HOPV=$Z@%Ql*oqq
%2!j6W^4sO3rH\F`^]-1$iYeEkY6*DD<?S?\DE;\7qd9+_m-fo5c2LQ>,C__-+.]]I7AWGnoufPaGkfpOrN[6m"O%-b47J(C1JiOk
%LXD0V+iecKOlqF1;m$duD*&eR9;Ak'>sge:e=c-<AN+R5ZU)nJb(8jfohV?iC0a1j3n0f=]&bo3c1]el4JD)/V):k\<Ya\I6`gNX
%=8)#00UiI;YT--Mr7!-s=kAar%Q,ZTeI>o*!m<;D7=eE9*8`3#5o:G:Ob;&B%8!6fBpkX5M>WHmM+m!)6Oi;mV%%1-TZ)ccOK+.2
%jJ#!NW\L@;BpkWjM>WI([8>q86`oSbV9N_BTZ)ccOID#"jJ#!Nb&R)`i)LU^L865Z8r=RuA^Bol6Rm+1qQV1mZmdR?ZoF0i;DF;j
%>]co14ef;L/JGKNOWRIYObm=bW'N;<ZoouSZo!me;R7-r4E.5V4ef;D/JGKNOWRIWObm=bW'NGHJJ4>TgG;nQ"]@q^D<SQ@a&FPZ
%0`&$t.C:NU'=>8=BuRZ<Huu;Q4ef;L/JGM$7VUDaL4"*A5rGOH4Y7>SZpncSWe+JpW&6`4ZoK]O[(&S>c+8XWFJqJcY+Zr',M*VD
%M,?8>4K->^NHHQY,MsDK6JBiX5RJ1P+ghr&a@4A)oN7:-ZnRTY6uGQ/6l'f?ZSaV)UbOG-Ub!)r;QZ7<4O@n:O!8:2MZG8#,_f8k
%U`^I2>C/4%\b@2b$_!bh[\<c(XT6M^%QA&f]BfZo9i*onb-#M9a=d?%(dp9DD>U#Z&BI^bq5"5/"_L0HW!hO-3sq[S=8)R=8'$=7
%;8f+Mk,#l-MLciBD,^^OiX0JSjVY2Ya@t*7MX5:!Fb(bi[Y"bjncr8!s+191D''q9lpQELRg>\]Y!D%"!s^'(*l+"+-n'Fn+-@Th
%j@:9k'KY^8T`u+6/QWVoOnG/j"lZB+`Q7QhJn>u3Xh^g+"69V?D$(@$[qrB$,9X&4!W.N&6])@]UOt9n6EOf"[1\X=M;rUfE>AiR
%!TFB>$MG*#$j6N+K-2;N=j2cJWl1hk&nF5nfReR&@_gj;]LDi&`m4-p&1s+i"pJ80$0iP_Ni>,i#&C2*8mH"24Fq1t%q@*0a=YI&
%W3fb_+eeo=8oc9eT6ka\MSDJ.[M4,@([F%SV82']#)u)*-t,!<m0^q@fF6.b$]+IUpHkNhR"KDnHh;)=X<@(I)]$`!^`f6\`*8NH
%F#<U'LiFm5@_p5A[![LGIQ=dO:(cM$\1SfRC`$/nPG"j!ifK"&*(bD_I5]_a@)lO5fXt[qJ:tF[<dWrL[]pt%"<)k"/G=fn&rmAp
%0d5-deOCmcB/6Z@J\W6YoLM&oKYHp&c@Gb1*'$kqY5sXLQk1Y,QS<qTHMX#-i[XTS$%7knJ3]sFPsY^1(Kmn.#BWoRP?d&\bJmbk
%F>+:2mRPW.-l%:7N.G2-Nq/<1-pf&I!ce@c2'CgC,c<+\4kI#5ZoT#!hVsW5=$ZP_%276sI"GrMNC,(hTA.SKnS'3PUj>C)fkjWX
%,`]5^THoj_@e/7cE1X>#1(@'PcY-U&"DURF'Wl/,G*AYP*aP>2>.7.lk""NpKlAHdr"qo>Tq"LVlm\F4@6ghK"I6YIeOeJ:Z\2nb
%S.R;>:H9=/1D"];0^D=5)/N5'CP;>AJt*HZPpBG?89b=03sseP!E2p%J$"Y6h1Pg.Xq4QUR8bQu,4-"\NA/>ATdZ3-/o6HSDhGcb
%Gsh\IZ9f=TP\A'6cg`E@:^I$\OQX-k:^DQnIL$WgaNtRY/:rJA&]/Q[)Gr#ImL<IBFO024LA-#S>"(WaEFlKYg'E6tDchu+Ps*HJ
%;,3j'6nr/8O%CsJl.QUK"l9CB'_E-lYpNO"Y/<S]'$UiL=:(dXI$E,7U6]Y$\enN16Glts,L;5RC4dT?Gg*IDFiC\+fmu0IqTSp=
%K,G#LEb</ql>Y6mIF3,'f:bTB%h2'[!oITgfIGWN?m&j[=]/gF1aot5i5c6O)O>e.;+MW<;].dd@MFIb)2Kmp>*OH6.0_3;F]NQQ
%+RD`3<miCh`>fGJ-oUA-jd(=/1^YKsCclh.^oN@'Z;WSn8.[:^;PJatR>FN?W\u]#<G.7V;SCYVWCYKJ4sCt<Y/jFZ-GPGsDfWR;
%^2FZ!9Q..A6]Urg)2?d-S+Ik_A7PqNX+'"&*"@9S10.cjolFq7<-0rh77X-2a4[%c,)sCr=<?0\\i0Wb[NcV:HQ@rsMNAV4EY]Oe
%,GBcd.aT<C;%OTn+]08?8*C@?)oBO*?F0'l?HEos)PY*D;(=[H<BO6?!2i3J"6kb!+sUd@aV2&F!EBj";'-C2,Ze[MF;63A+#NDI
%XpWP)AYZ6c<nacG\n*;*S-B1tFHp0[e1:sR0ac#rdf9t=%2*C(TUb&RI\d?m8#XSWF=>t>WKdf]F+rhW!1e2;(j%n0%%RX3(3ia6
%:np2f4%"o-A@^J(Ou*`+L`/R9W"E!J:Ud#WX?0o#OQs4p8O]'hmh*B,ElH""G4i%,:J!p(88NebjSDBh2*daEGsg$^.#;]_:fPBK
%Q'7.l6uiQ*7#.FUMX*`r,1+#s)FJ^QW>83u;F$ZY<)Z@QNY[;u+`PZj^qKK5@0Ht#Ccc8/PRT4$cj5aS%2.(9T]D`F?g9&q%6>?$
%BZ<n8KcWlUWugdCd7A9]-:^RWEE8)O%sPBjSC0.`57e8*)W-&OLc-pSB3J_(MEk:6aHiM)>dJ8g[re8t2o_5D"5;7F@GX$^)Y@,7
%&R@=79Md*m0h`5m#ergK4^sDLJfm9tL_C,rZ]RV8O'QAF&nom?q/A=-$[rQrEPatme2UjK`h)Qp.X[1rKcZqRI4>Q.@rQ//"%ER_
%0OZnkM97!gqa1a^j("`B7fIu-j'l72+cmq8lMt%_I01+u#P"o]I36*PE2Xd!=;CWk\o(brI,GQVcO&6M/KqsmctCOq.MsmdEV8n<
%5PJS,_boIkq4<E.ihmpMDTFAOBKlXH!J3G#W@/k],ncoF!5hWapf+#]o]"5/"YHk]rGphN-n7Kic&s=r[a!cuXiae#Lug>LNcCeG
%I@DI@8Zn!b`TZ5RZU-!n0LATt9/)B:`5U8`?0$^#q-YcC$3Cqt^l*f,`deJpS77]i04O$P5N4i8@MEM>O<&\"6?(1K2qb!(6$,Ge
%As\6#?PNnM!:,nE>(oh2IF_bE_(?FFn^*=,`MY,VN3StYO\n#%9eaZJS#\r5,fBfs>qV)Gl%1&>Oi*o,n70NVV]eEP26*Gl*S!u>
%UL=%@)!&<;b9r8go*Cl/),R@s,#REZ.Hn:C-V1C%107?On]7LG7isT>O7gDZCHIo`-%ln"_R4[!gVFU/C.-R(q#Tgdoa(Bo]k#1'
%Ym$&;C*itdkltaAke"2EOR7hE!+"EZ-mlJ+R\trD%$$6SF<.?9Q"H1m`_g,,7@a]e0+.uHCI5g.2\\SN;=HE5'!2Y&2(u=0Zs<\Y
%7Mc5qjn2hoS-$19osZr./6n"">]!Ub$R8;$1Y3%dCAimKK.`)hKs'U,MU8V*M$j'Fe\Mq)e$VTu'i8B5;4q'0cNQlWQa#/UMD;R"
%3c_>:b!;[=7t'9h-rjbj:kuqb(r8TXdWZicE5#PNeU`ZLYtL@DKG(VP!mPb4/kN@F=!b!$-<E^1&SRg_j/<c@'LaG0p5[p[1ni!I
%CoQ><$HlEh7jV=Z=S$E<QY<u49$BI+1s>9s-:oU4Bg4M82.!"f5n@q@/MPb#ZI`Z^!?)rb3qQ/eLT3oP$,T&rftS0E9N9%IF*au(
%"W@bgbTd`EAD6)m\/PH=6_BbXg=?7t[VTjf@N.DGr9t`P6+52*Y_#^h$Ae*G&kbb^@chnV><>4-Y!k2f>*q'I@c9BR.g*QrR+j2(
%2I4]_k/D0/1OW:6lq%3]\3]2/W$l6$<^pR2oj$6+^'0/7MaYq=`dKauJfs-1)oTTC"o/8.:&Cu(R3_-C4u0?g:mBTgMGJQr-priQ
%9?r`>jnOoQ`'=Ye#)bV<m"#@;i\k"!",j'::bI="JG[,u*5Jq:`J#+=?56Yf!SA]mVGXTiEeR(t::ODWn6o0-E]*$2Kckb)M.R`m
%5,:G,0Ks@HH%7LXKkskK\=+Y@o[5MtNH)#Q/U:a^!mO&'"p(fBSf;Wq)'JFK>],^L/f52*mrO+G`gF6u6nghF\qfQ2Xp?='#egJk
%'I5;S#`>$+-ukqN56m#LGLE7G\EKd"Cr;h9`^Os$n)2B,K+A0`**:%J2M+I@i27KYr5q]40G]EN8;RZMF%.h)*E-E6,DZ)T<QJu+
%SmI>u@-H5Gbm]gF)F7l?C1H0.9LhkqDn$1.9Su1YiJB8+-f@[M.:Z#W4E.N4LfuJFaXf')-QO0-iGb!3'I_*7N4?ds<@*NC@7MJX
%`,fA@Z9/rW)p\teO*l>"Y;Kqq>oFjG29J/4^dHfr[]b[i%3`'2oS>IbN2FQQgg'?!*M*H[IG9^%M+':\bQ?"nNIo4pr[gHsnBrUE
%"7Trt5S.ko%Kth(c^cc@-a3h=2F*u!3#qL.YB$Gr8Id>B<+a%BKN]/Gqo;MtGQD'2>]*b#?MhJ&84k`Hj+1L4ODD0tJWUj)Ma0T8
%s#,f\@J[onXh0J0/=<@En1F(ad4]pThAqWr(_fFF>Q?L*4`mN^N@ao[6ocZ58(%mIO=Pt9[6i/DbB7e1:ubY%Dp(Y#NI;aSb#)OT
%%*W"c1m$\FV0$#H;?CVOo0(`d.o5G/8dE`T;gL:,&;kHDOiik9-1hTC&oiuNpUGoM7h<';,?-!D4_$S3&9*PCXJ%@DE^sHs(qQ*k
%bPYI&pe@pPj4JCri\:)Ai./7*$]7+k"?'@Q3hPnbR('(%br?&odjH-_98>!QaoG+uJ2!A@#^rq9*%t>;B_BHATeT_IW>@7W!o#Sd
%^sk_F>3M+qABJu0eJ*j^>54al+N1]aU_KNTZ99DT8."$'2hW5L0_mje4-0i1`HN$8%+;dD^I?1q]BTGTLQp'=S5E%%a.=nEb+MQ<
%YY"^a'b$gS(res&C$Lrf6ca?.cr>//ccD*jiGh:78.D6pP%:'R%_Efm1r7PX3Si9/hVtT8K:D!Sk(+ka-O<X!GVKf53!cd[H0s6,
%"Qlk&H9g+igZ@2EWZXiIjEj@=$Bje6D^A#W/<.e+(WpP>_^uW`dU4NC.L<%;9X(D0OS*'<6F[X12e'p=)l-GI7L%h\Qj)N>j^@m!
%8eq)P_2Y3$-8G;\e'QUYUc+mtncPXe!O3\-(_64P5p/L=fOF[.Fp"1K^?:>%MuFI70T9EA!aA9-+Ck$O9usOG7cZgFGnX[]mgE#t
%:8$+r'3VC`AD=OSCbQ2TK2s@i&_aC<'%='$k`B4+:hmt-7OY'ZA"p'ZZoUJmD-(Y-jm\"L-4rcq=%:VJ8&jMbN1%]Ni\9jB4IP['
%@d#k9q48'IJ#p1/`qUZ,LnSi#*J@n94XE"-gt:W8Io0eVi28:*(3?gt#dDZZ5U9AAGbm*!Yp5eo=PKs>#;KN>B(22_"XngC[NQH4
%3tORY6@n/'h^XSq6m<OqT(!2*PYHgaWP^K-?!<`)8B%LD:Q]<CKP#Ab%t,Cimi@?J"#3SY<*o_A3e?c=I*7A%+R/i%<9+$d$Rm,"
%(`ir-cE%"51C.t4LbK+\*=uUgbQfB4<11\/3Wn/u&;DA7LG=mXMW>8.2f<o!b[M_3nrT?d]gaF4HO;%Y<-pW/*0mM$@Qc=J:gu()
%d`ib1cuq$;C;WbacX@k-//o!144W8:5q/*,iPW#7WUXk^9-;>in=fG;.u;q!15lcQhRnd:H^i&i"N8"Xc8obh8em;$RAR-e_]9ef
%V=2fT,<Q+G$d&rK:l/[$A;ngr,^57^UB)`#./B7S=.oZmQtODHY%'?''8u3=Q3WFUE1*,L:uI28d=%9.69NG[BFbR:D&Yl3oM%e^
%O<LlE$dtdmE#@?(J@,dIFH!nGhr8MVg[UAq6^Bg-/XQj!YW4TC'#=oe`mKAZ?aOKh\AgW#:qIm*K"1l3#Y(E+j=+W_[jD2)DsRn]
%92N`t&As-O8(i[(giDBt5/U'R*#?@k"+n\AO,RL7/a5"9:/37UoA[CHgsHRZ*^JhdU(e1q45iB/7RP5*M0#Ro17cKS9.M)emG99F
%1I-<<MPu#^m[PY/Q!P9$?HcSA)oN=bjP([FQq5Ui9oNhFlZ+#E5uaXgX06"K@.@qMYl4bK=)OfiHC^4i`e56pE%,4+*@)V\d&[L$
%MNBrU+W5#[MXprc,8=Rf;B0&KX<9"SbiU0pNp#bqOX8itk8Kf%<B";Y[6t=8*[h"fLLc5H.)qep`[DDtQmMRLh/\/mO&lQUL5--G
%JO46/MJjf`OtF<ZXU_fS0jHutAJmGE2MdE;+pJW9)44c=q[k]",a9.7:DX/o/FWb:3i,c7G/7GkfIEm_kfG&=M@9OuH3l&=6`Q@:
%,OH+-lON1\;.Sm!)]@NYGLVW&!E?5FbQ&07G_n\_[er7RU>Ra)>.,DcDB+k/[;h-GMnR1_#W?N:fLC!+iJqE3G),9\4Ar5CLXn%H
%\-PLu9@4#(#&/4I,`ElldOra%/+dDFAI$bqC,0c*/Mu],OI3G=0rgmYT;kZXRC3Jq-YDX6G;//F)bL<g1qaf-N7$0)p5P#LOuqrS
%q?"=`=<%E^=e5hT#.StVaKsqfk^o]?CN[S?*nta4XeKILD(FCc[Y5_CiDpi*Kj9BNh6G2[L*[\8M[bL(NX/(K;/%*9g8*7a=qt1_
%lr2Ft=K3q]IM!LJlE+ccO>-^p88^kRK%fNee_uD*;c.5?N]\5U4/cC'9ne<M\JeIqdFB]6l#nMB.EZhI1/<\i[Z<NB\DNs9;^4:b
%i(9LS;"Xk5"^`\;]jd*S+X:t@77LXL#pBtkBZ1#cc%4fA"a*=8Fir*qm>Bj8?CaK>8B:?`bG@BB5e\PS+X&lX'P1ubZoTlEcmYRS
%MQBnLD%t'C\ClG?JXbqkL`o?W+J=BD:i]2De3'#(C#7<>ok[U`_iVJD(dq1k;l`d7(1!J?hT2'3\WW&L;EP<hKU,G<0a9s!d"hFZ
%5')Q+l<+^j64\puo;l'NpZ#Zt4&=*g'YHr&X&'n![X,A.:(3oooe7:R+Q)0uAelN<-mka!=Ar9KGK3:eR"XS24@5o,M"t$fm*Sdg
%M*e/ko?"nFe,c+9LtHSbd&K468$AD8op[$jd!`gQ[iH;"BS_bM;8j2SS`6/Wf3klKT,nA/KH@C\ThTP4S-H?OM'-`R#%WMfKK-oD
%*?#q#_'Q--X]@]]1!kNT;%PZ96F/;'pq*o\+X4l\NnfFB/m=WuN:BgU)9epjjGJ-BR&Y^7mE246dB;]+O"%m^C"6aM/.a:%.PF3\
%7$UVSdhO>*)D,^G<F(N%59MiiTTH$MTpd9RVCKTF$u;"ffXXHVhU:?gan!hjDfY4hc>H2f=*r-"W!FTc2\Jtag%c@k44ptX;Mtl@
%KRtTr;F)H\6,^56p$l8hCID/MGt$GP*#7Urkb-/@+_8Y39^%bgd%[QJU2M'>eZ$?]dB6fK<!QER;NmdsK3jNe`i//Zqc(03T2c-h
%J1*2FY`4T[Ouqqr<e_\ce;eGc.uqZufc7Ro9)V1oeg_,+-QFV7ql6[67"C(C*n*H<VEA#6V.`e`ns?(er_S5;NK%\>bWREh(AN?O
%1C+l@QR22jS6fYfW.K?3<n/W_)sq)_er,LtlFEh6TTH$PUP^e+3mGC$nP+$oh:*6)SmUE")1#$qra<8M^)-A\8s\T]fFG[K$iA$J
%FqR57K]X]$PEuuJn8Cb2NY^+UR,/6k>S`&-#lE'0=gqQ^ZbE(D`7-op3&P]k@Xp60GR,%pl96-U4I#*hr=-PJZP8%TiGVkRZO$X5
%E@H[$8M4pQer#MKPWn\7gk]/CaEdD:GZ'SMD?+,[J/RhF79Nl-Jrht0lJZnA1=UhV`tJBRDqP?b\su=27L6AUc_2cFX/#+ei]8#8
%>XM<B"GlKKlNmqX7[G2?O.R=%Q7sLF?]@P=I5g;Xq:[15$A&19E.pbo8$ES_4?k+&)o(J87?X,HCkK:7j;TVS4<^X8:WV.h748QG
%;:*9f&LqW0chgC0+iiMN&=.:2CmN8?$K_b'OuoI,ZOK\]nLYdjdod/&F4Z\T'lY*Ik5!qkMUMp\,PGCRH5qiplkgj31(krm35h>,
%_cZ7dqKT/'1M0O82mjcB\3\:3g1B1]Tth/Vp(BG,L,ItaE?=^;oo%Baeqg56fh$4P>41-/C*oD.VQNqJ=VM0T7GuMp'c@80B"YjU
%8@+7?[]l(I[oafB7Nn8L)!D68c:'j\`=lMH%\s)9SNsK=!84M.'"MNs$)3!iO)9`HZO_Kn$V9UNHA''9L^7W1Gq]:38&aF>lo)VS
%2TG])\!/*H8Zn#6AK8a[+%3pc'&2QhNf_5?c"9d'NdV7PqY]E7aSXJW_n6&?Bf"M,*Z(u=^/2CkqOGV4O#5e0/Y9>/990<G,2E9$
%%[:U:\F`5lU29&;Z,-#G/AGK@BnL?B':d&?H&0E:kSFF/`,QEa0gJ4)n;OY"a#6C&=:rm&&bg)r#,8]g#uRr!J[c=a<Z,,o@<kZ\
%N<Z!*L+'ed80&ctEbsd;$osr.no$n0F=Fk*MJ\pL\h&fKZ@#U).,Ld7oCG;SGBa@Xc*()E1rs*(`/;BRI)uGuMB]ttr7%Q8#]X2W
%+jUtA3Pmp/S9X=k*@&LT/R^2r1r:?R86o&&1J.QG&ItF!i/>,]:QL]N#^7!1+Y'(F1b$.u`).MQ77\r`Eajt2!?i[3r[l4OXr/\M
%nmj=XeL6\S0'u$;+,ja^[mW=cQ[#D(E<ehA\1C:68MZ*_n7T"#T'YS!qCMcJikTo,="Ug7>Zd$^'U(U49ti^o*_RrDa8WAQ1pS*V
%/t2TtgtbD`V^JL;XKWN:3GKF#1CsfH*tsbAogZdVg/t/r5Q]OUW\)^.\q(=B`PTb%_LdK+-?59>eHUc'-ajiE4Zf`+Q`&oF9h.Sq
%Mm3R"(]Qfm3$e'(K7n_8KSg-8ORH?\'Hp9=jPn>B15)8f&qHq+Z2M`p22YKjP:l^*(+p((M%e9<orWjQX)2t&&L[)oV+a20\=jt+
%O_/WNOXpYg&X_3#1-'@u-;4aG2Mh1.AKc<O0Zk[U+Jqf>FINgLhMN4/lJXpl$*f>"6=>)ZUYdg`)b.@Y9KFS]AHUAXYp1p$P$8F+
%TS\U3D$5Jmlh_lr(5W+r-H]RbKL-:7,nSD&VVA@9BZB]X:TR#"b(0E$!R$$J&]aL^?Cl7?&Tn0nnREt6YaBc)OAL<lhhEWGX;^%&
%P&h40`e^KJeSfu(DCk5iAN,#q&]K]CIV]*F-8"poJFcoK0d(MM"&Q>j$;S#:ZP+Vj"YQ6gY[1dr&!Kp[=Xst'jTtBL:t@a9eA:b_
%TJQY?M^o2:@[%+2a#g_]J:V10k^U3ll-l8,4Sat&:&pgm0Un<'[X\h.4Y<%iQkP8`T7a%&q1Tu"H/n"N+n'%L.jG`2"iD:tgE1g(
%+qALhF8AAAbQ-=A'u+9%m#\o3L`8/^MkWa]Q/1/Ef.D>crrgqNf0K\kg=aHSGV[j.,K2C/eLk]i!3AL>o9_NYUNZ_sU6%JWFm)uP
%5E1Bdah(ah@C@gVf\25bj'#kVTS/48.)L5-?l6n$8RM=_,A]rS#SQ/H!,(%qSfBN,$[<pD5\E1N`DLUs_l+uSYSmg'=b$NgL/lI[
%VOtj#)q)[&-aM!V^o'W;j+[^m(OG$rjt_q;T\(%>U#ZL!"ZJd,5BtpRTZnSnTnjT_EeK-O$'7aaR*@fV9n>&2qDPAabXddf>8T,0
%'DH>/W?Z]jMf?JNQ^s\a*jb_T(_kt`"?8L<j\c@=cTk#,?\B,N&;Wp!-\rMjHnquA@e3f/Q^JYk)o:hND!&c!G`3#B?I"oa\Ka,1
%Msu,%8>*akQu2!("ej!(`^MTU@5/N6OlL^`T!XEW#l%FWe1"->+R4VN>3PJ!%i>EV'dNr]ijbnEl6$jOLq-cnr"dophdT1t:BADp
%He7GB'sL[ToSa`IR=j0o2TMPR$S^jB(<TcZ=/cN`?lkTEP/o0k151DeD8b[;<]r!cr#>e#R0dX<d=@iVLbXf!1]]qJ3(T\b=553^
%OQCON"BcbN5uWP_1QFpWc[?GB,_SRgMVRA$0_!5^#"$&EO)-!YL--M+!k\POB/jp%LY[$%V8*6JiI)S!2c7!oO;Tp-j90_e&0^80
%aD,2;51i0QO+ss\E^Yc:s!T3<iP?6f7%p8^`&mZ]jpJ_,2rgjHF-u$pd/$VMJTaK'$Nmu*M3(E,&oiEK[imRI7Th^?egRU<m#ANC
%K7r.p%=Ch<4r/pK:`/u]N"H^]]u;0J@UL<qFsn[IhQt$n:"cK?`.atBo".!qFdt^jCh[G8o5-0L"&+XH)!bS(`9;I*,SPr0!K+fi
%<HL-nD\#;o%Yj)L@<U:/h_BaOg80^a0Kab.B@O<f#V\+^j9^+kVN`DtF[@oX0aM6LhmU`9Z4fY4E?g*J*?Y]L4:S,3'Sr;]ObHN1
%dg*\k4Sd+E^Y(6_Y2fX)ptQ2V<-YDKq>BG5Y1pJK,:!nsd2qk'mKK>XNEqQjbg8*f[ZVaYZMr3%N<1iJ7X1\(EUZC4Y9p_`ET%kK
%@#6J@i7168R?3B&*qr^rS[&N(]E*;L+#Oo1(_MO42\a8'Lc^*BiXJp@&*Y:\Z5WgU[LEcLONfS`,9/[U(^`MHAW7<;2]3e"n_Irm
%!l/9B;Q0$\`C5=7rYf0>)*auJ%e4*M'R/f\0b4<j3<%]KV%Cj@&\4*\bQAD3Q`Fh?&-<HK.3dfR!I@anT)eV/6_<#!US]i-no0);
%a0<C^2@u18:WH5#J4aiPPU\q?:.&5jXiPAe_=>OgA"o&k!L4NjM.j'mD0G8E*F_F&E-kBO9ghNW<CdTS;Kdp2M[3J@Z.G'b9Ma\Q
%A]peZ`1^QPTYf*7K^4GU3._a!4W4t8FfB-*W/XuF69&<RY=.-q2qI&odBmT^jO+5@hQ)<nU<,9da6o-m+YI5T8EGkdKu:GS9<l>+
%jS9%k!i*&6a6QkQ\5M7=#D"H>ef9U?57DL`6sM,d>lF``59aJZe1-c)/70CL@]'=H\*R-FQ87md-9Xt[N1#4JLR3.Xi/&IFP4hZC
%S@gES/LbkLhP,>G".,-(iYO]Ao0oVPH!FAri<OUF`Xuha@_>>[^r;9$0a2g:K4l#R^#@]u+s7rbW=GN@.8Tf%6:eT'060N]k#4eO
%69EKQR\!ZM3?t$SN]3MT6--5>e@U$$@ni4C%9u0;E@ucl[jA<[ia/Z3eg\6fK\qoheg]-H&Zn?L"Ul2])C_BmcYM.F:^,sgrE-hE
%.RIBH/nbY;9+63$Hi5A>@cIQM$#mVX=V0Nj#1pG28P1N;KLm4;Qh$@Q08C1cF%+/i0pH\A5946uni2TI!4,rkKE?G194%7MTYks_
%ji'HqS.)<(rK_(0@mMM@\YCcTON@h]kM""E-Fk?qm1h;oD,2FV>I\1o1^lBY[Sm!$jQ@a5DKbX@R27%4\525VBTh#K7Yj(]-7%Sb
%n>ueN%K@2Sc1.e'R;nJ+]qWrY&;i#aG(KHY!NoLq/$p'J,$Bo(O$\tA_Tk:e'X=<o9(kNnK^URnlB5E/E5l;q%UW]7EWY$VDK8\r
%KTe>HP1D@NL#Hd"m!r=,GZ$>T-/k".EQA_8^<c$%q++b3n]XbP0BNqUiMUqd:b4^/kR(r?k4/>]W:UJed\0JYc="cd#fTgqZL0<L
%7i:0@SA:tHW<e45189lS@+;`K3Lg[46[Qj0Y-;__PXRcXIK4(fDUKb?3MFLs@*&G$DF'?-"@1&5CpCh&1'%G]ScdXI3sEpDF[<`/
%E?N=/q8acF3L333@>Pd+q//l%Q67HD6mB0doS%,a,0GKX#g%Hn3FhQk,<pKGNj%O57P`4=>;jrJXpF2L3U1kEbnn^[OOd^07h/*L
%0rbpiSg7RfK5hW"01SRCdF-;NnGFV_b">^TFD]7Zq.)8G3gL%oW.dq%(5\-ncd>At7n=WbPBesY`gC-,k)!Ta!FC]*n&qM'aD[oJ
%1M2k1Jn]K$!E2T-FUIq5Dcd7Z<Wu>>,=`G7ir\Jr]l_4N\Y>FB*8C[Qfg792aBb[sq:Z;C6BmV1)f`u?=o?c=?Q^!L(SDu,cjfg<
%"UI-dMJOTKb-[g^X4LHTS7i+e$T4WT$bA_'82?_g,A`M/o#1bskfpDKm$\n/MleM].1Jj=>5(lTd@u\R()<npTefsIdBq@1\)EX*
%E;6ST6[_(^OE"7<acpk(VqcPeLm2e14E`04.C9rA$H+b,R9uh>IgQK,QqirEed.kXBH[3E%f@YD`Qh(ln]7Tl'1fS<+cg!a,,/`R
%EVX[,_BTVb8-U6gJ':^$l;0JbTT3$*PAQ]OPTJs@LZB@%G0s!6=bl8X'QuE-J4j_>3TLAZAoh29\oLe\J;sVR3i)(uOP"t.pLaYs
%^!.5$ieZLE`B6*CK?pjl@W=Rgj6^gO=^F?<5aF't4]UjFmo[Hqjo-fK#kR*K15U^i,*I_7PqT3sL(&mE`r$TCjjo5]DTVZ-98??'
%Min;^5F.mQ6@)0[.c[8ML_\W14tuFrmpV<Yn1fr3R?,0q\Um?r.ZPnIoC;NX[%Hi&G`4oW9>^n"+UB@`S%T!(OqnoJ@%]ig=:Fc2
%+,>SJ`6pQj@)``_)@/Oar]n5VI40]M$Gd7$]F3AQ825AuCf0%,8J-p0E8`_&(t2<HSI?(@*[*ka]VYr&?,lgup8s.O0f4Uc/1G38
%TRc4$U4F>kk`p`:WE,GU/4hPUTZ\FYQ?UFp8h-L4DFpM.5N6iug2V-.UEE`<-uQJiI),]:fOSF7*sshBL?j0(mmO"NbEmY*Lq"h%
%F9\p0YkdDhkqt*1Yd.(XMT`sF%g8%4JgN`+IJhemFa:+26Nbm+#aG#en#CDe_&'S!Rk0eJHr;#AlShOoh*c%a&8cAfFPK.;QotbL
%)Ssc8=>I6>khSYPYU#sbCe#*!+Y!`S1RKR6_*si#-7;[17U\RbMH<u+i=Hq;<&Z+"g*)M!:S9lFpo>g;k<iopE#10bnf:(9dJpPI
%@42Q&@g`G$\f_prI5+p2M4!`Hl+XYChT"Te->sK-q#d'nK\4;2k)=m)c:)>#BiOSfGo2(kYuQ!=6qpW>,uE;=]Z@q_N1Qg5Y&t[2
%dDZna/N4e'6\o$ZAjWb>#::6m9Y0i76]MAn0"[s>7!r'gp')$EMl.@_[j-?[5:%rA[lmS@#`*mZG3MO`l-_?n<aE,(`W4?E\N;f"
%;mbO*ERJQ+r7Kj^P/]D,PRS$4Sn\o78f'mpehplR/LCL^-8Fc3&L?T>g(lX=#ups[l\CQTTu7KD>u5MS'0H`$@g8dm%7u*8SK:,1
%.Gg)T+ik&1l`10]q40t-0^=B.>qZcs0Hl!j##FPF__VVVfg#dt;ASb\!6P?D-,uI;BP,IAI+6C!l-m!DMX%&A8iq]/bu%m@4As"!
%8n-#^-^52t&"f4ci!^J?Y2chO?T&>hG"e<[BelATH\/,]\G(r(fg/o%O1f5D*09!`7lVWbK^*Z5AlSfjlf)77g-[tZ:u.@$BnpYo
%/2m.!K6KZW_qGB;PJF]*%!+*Gb9)ILc5T&(4iip9&4K`dQ8F1Pj#O7cMs,-WiZTT'D=kF0E[F,CX7WFOJqObO@OT_[HX5D3FlT/1
%dmS=W!i6pS?.desd^\0Qqr&).?%.JEjTE,Nf0Jg<_I4M*Qj5K"M:d<E]kjM`n5.kaL+K(TC5Z.:FdFg5MS4YD$,c\=aDiX>-'V5)
%=.pM:MHrnFNNHTEKa+P]&h*..bHI8.*>]79Rk2M)>\nH)',R*7aAXa/:___UAqrqG_o6jRB'F"_76ulGl-5<A_W=&d];HYo7,01)
%?V1h9;((;fPn5muAnH(V]J0R9e8\D8Z4E/*fRC=/gqcomG/u*?@r)8jn==q:\`+Sdn5ER?lXF<2hD0ZogTb7M'3Lq/iVfpr3`@H`
%5OXIGk6]3_f%3V=@UY_-mL+>_!T1rEI7B=S?`GPRmcTDlC9WE%Y3I/e)=q:]j(YWmnV$rH+2c/I+<j"]F%a1mJ<7qe2Ukq4$3-6&
%Yp'O?n0*Vd:iM1Q:i@I#iBW$Q[Fm5P@TZnpJ\tsW-2"i&#e;+>J*KcRlGXqHQ;`N7J-WT`-j_;q5lcV-l;2n(KNQBVh!/<E*!jjR
%8HJO[7Df*t%d=BHU++u0+9gk,0;Kfqnp%%,WR`@FkWi?PK4Mg:\]R#b2\p<^.>8rqPUJ_b`<3PZ'pe.86sXehSI471#b4*hZ/`20
%9"9Hej@D*`d=C[0$Z]dS'\0;nPSh0&1iBk_&ENXr(!nk+>]NQ^$raA!a;k.`/E2=M&fRL"Y4`3fQ@W^><'#^'GA@nM;AshH.*-GK
%9aKN>=,Je`Z3r6=Fpi:JN-Z6h)B!I+OQA3nXP4JO8WQ86H>HgpXAH>M.NLk3+JL8NbU@*8gY+>)gP^`mJjBbkY0oGYL/F<c3#I4f
%rc.J5.K#+4.j1#sM%7pCo6dKqHZ!:-O=9dT0`NNY^)PfoA5MW<_F>*WT)lp5&e(^HbW6(4%^D*Zp<dL8pX)Wd>%0LL6`Aq<i"-sj
%N1?&f\<qq[IVN),/B(l$N4Ik$3n(Zi(?TM.aefB\'_KHepAHOifu":lKJ.TBbme0_PpBlqg[`iU*S<l;h)T2DC':@`O-&fj!oa^)
%*dS\>8187Q4<tk84\&$\Dd(.^[*2.\kdM.Yd@c<J)"A.Ne[5``Mkc:5WHkHe7=l@?ZS>&f30>S(e0mDV7%4sc33?$l1dhh5fdTla
%_ILU2L/:aN7('VQ&OWBR<Eq75^ZD`MC`'N":5s',ms$3QL]C+@3+gTigQR3^B_Z<uN/DkR6qP#cYUH)`V2ts;)_3+e^#MZ8-rCRq
%+$sOL?EV8'"Lnh+U:h0p8X/EMOht'req,_-amK3b1A)uI.OI)(0VaP1.+42SO!klX]/F/Acs$-0Dk[L_ag47=dGrJr1r84A-o-72
%mrdS1/!KO[4^Stk*#'lg9s3=iF?IQm]fhPJ(YndSo_@L2AU-"WjH.&.jC$]&M_F/M*<UHrR"VJp\K&8PR_ORnnl-]3REqM4`65G+
%DTY#SGTTff]CepTK1Y,$=?1_G'^tUtQsW+RqX?)2r#.$WG+ArEq1B6[icLKCDtub-o$pQ)KU#:DRiU@L#U<>k'/Y8bTM.RmV'1,c
%`V>[V(C(Ol4Eg-`50leD[G>5BCg-ra2dl&@,U-\XnrVp)$#t)-[.jB).-[3T)8^e_VH2ejR=im#gD=nLhJC!V11&2;0A<"D\'Bh>
%mUrS+1BQNQBjf[_hr7'glr[);%iaFWB^BSB+Wg!E3Ri6MfMT^j2#`"IVYI]BUCc6AjUa0J"S%P@lp`.F]S9$$TRk:nY]-iYEVY/3
%K((lQj%DNsn.K4],]AWN2qWGE_r)f,mH+OqS3WZ\Q[:r5>k">'FpnuSQ>s4gjXDfhc1/5S*#=SWj'oFtFILCE0-s.l(\fb"KWb^J
%O>jJ0-![/>_X?o']Z#QMd,>_^(m\V61F(g&T04XD05O"s_BV/7>8DX.AW?UG4?d,#rdlD`=Y>2R8"_b5GsITsh?^[iaWT@Ka1r?T
%^(lQ(Q?ZR8;(rtPJr1I6IT?sI#^+eS[<R?`(7S]o`?)oq&g\\EBAu?\>#8ln>$]?*.ZdInhqo[7(@.eD=fn]?7uY,]Pjg&QD3eda
%Ht4l:Ac/Z@fAW2P6CfRSL=oi`FWINCA+jA'*3)B5%NZ%!4^j9-OY6r<deSefndDi;VPQ!*NtB;s+SHTL&0K-9>U%@gr$Nuu*>8%r
%UFq?<7H=WZ\l%]fEp!SI5t8+lO*:[^I"#b!c'V>_FJ,^@4@(JM]9!`e_8HUrHG0-sg(VLA)9U7*,K+[%PT<:fiI1U_d;B%dCP(rl
%!cft"L$3+TiO<J:3_hrp<Ng!aMjEp85XOQ-jdWh(-<I31@t)=p?;F/)LpB")7`ftV+e`Ncj>qZt+R4goinHJ<dD"`39B.n5PS2=i
%3;Z`L)4FF$WhlLDU7?t:>35`;)mr3D1$V+Zj:d%]=@d9?H7kU7FRnAK=<:"'F!P4g,.u_7?\(\"5F/+f+lm,%K0eiQ'JYfBa;,eV
%`H,bi9l*4M38tH.o/ArIo'jj36Coi'Z/'GArK=LYeVN%#"YG\H!p+@V)nI/&/tYiA?#+MJ8&k'tI^^0Mm+':cnng1C#*DPA?5)mH
%p*;/BQkM#cjQ]#+_6afb!9(hm0eX9A"F^S_'4gQG.[OC),*)Q.p`*8YA5@5G^sK*]hIsno"5`7h,`es8?eJT9N4^Ht2),0_/+eWO
%9(^&"KpZ+R,i>n!-e(Q3lRG4ej90(j5V$CSbHRc>)+Qi["+!$D+agY"Dhgq:c4K[R6c,IoB8JN_bKh!T7JIKb/AV;3hRb(<Y2`W9
%,KMn#$$_h*MPN'MrG)A0=jFahn6D3".k3V)Xh2gBn+cH*5!TY^5s4j@$9ak3O$I3;P25kLTWRo<H"f*!eUnK%)9"Vn:K3u;Pc6ck
%@3hkIbL*N39"MULdKIE@l0QGb\D.LCefBI/?OM(,XX5R,;>WBKc.6(*rcn2Kk9fG0%&i*?SJguXZH>O4SW@]^;JRfE5g1X1!2-*P
%e\?5`W52=!2G#JM*`)4%eok-HaLYhQ]i-raqt/K^$!>\(medgg!(F"DiI*L8f.Ih+gPR2I$n]/:g5X>7LdOS`j;fo8]oXi3<(3T6
%r^/uXIdmP(QK7sKW3<gN'U938lqd'X`q26.F1X7CBc$EUN)hr6f&;?WV8"J+q'2RLlA(0"]5D@Co@#%GSSleH(C6O>CXpjV[7\,-
%Xf8VC028$-i-r9\&\IcjOHfe-?eNWhWS_I_@([/GO..^1l:Bk>BGDrtQd/%kL#i:H]5mM9;ItW1nuh2i%?!nSD=he3m74"RGPk"c
%)ul!t1B<]pP/J<(WM,E10"B@_VXB.!MJ(WHC-`W#a%Nn4Z@6A<a1u$J::EkjF@0hZp_Gf*fn2h,d\Z#QrX*Afi_qR[YWRR:Go.ec
%1V%"Q%G#nZc;-W6Tn5i.+qJEZT[>VA+%oBH+cYDp?5%,q[8%?77lhlsj:GLsA"$s-&BT7jdp]%lLL@3I]sueFoVJ34WB]^GEWtZ/
%RiqHGQ:,OF.!t_&0l7GUi]5dXKHM!51#B2g"iXk&W$Fb3e=4$8fYc5JeSS[,6('9A$DN1$cVu(Gk$`5qeL=u!EgJ!qM/@\%on![G
%'_-<?@Zh*4bE4c@I<4o2r*Y]ZPBFUXh"t^]qk(S?gC<i8ZZs(;r[Tp;f7"&&GMeANp`S[`:7j/,i54d)B:7ETBDp:"TMm!gjh=BH
%Ll:'aU_bU+B,;!Q^U0WgR[G$drZ1]r&5pt_6>dXTs6a0EY6k6R]7cUL7449;R+EV+QU?CG8RXnO<^^W]Su-(@kI\[i?+*`,qc>FT
%m`*KDF\*XImd.)&V,JYLMFGCi'M2^u''D`agW)[GhV]mG:Dh'+rN$^Di4>Xk:!(Z4=>cV^/d8Y_WV_$rifrp+EN9YL*d5phZ3i"*
%($!Rq6]9fL]X@?p,T.Vcp!f^CX,9oA92,LV_51^ZKm"FY%As]$r7#1g=q<L'KsTE7\Dn4_::2Gc=_#cXTO$Q+C0<F5&4<m,=V6P)
%"Yl.BlE0p3dEgTr%?OVU]s"M^;3,uR81#SEirYJp9B/=/_K.%K7FMFoViF(l%]pIYXYiZI>+'aJSQ_5]l:\@VQ_KC%#05n432ggE
%"OUo>kV]->S'><0njsC-,kS$_W,[Mf%.>dJ,uMX^6ki"jVN^VM$d(h@[<f$!lF0q>pI\E=:AFH^S]k`uj-tl.ld0iLlIIUt$kZhm
%)@VG_!R&]a3Fq:8.,(,KT<j@@dCh.:)[3O-CS7VJ=i4HL[f-^._hqYmW*f372;(&YZ>'eMM>0#CXVEp5O_SA*CIU]39us#o&d&#D
%P6G]BI>0^Wm=2BFFVZ%;DEdK@Mos>"M[i@K*^d+-%\6c=[FX(,LH@o,3''NM;1=V=h-lcke*rHUA_$+W:EgsNli[Yi-:I&e8CID>
%?;Id?.W:\I8s$1RalOL6"F&%N7Y2OBg9+EZ-bdP^koD#q(VABrV%J.NF=^NJ#7sVO(#-g*DPH^>CIXk0N$r6TM$413/Mid?d[Mhd
%A8]6kCQb_PXdiRKpD,FZ?fAtr[<9BC`nY0fE%3DJUJ*oE9$5O"r!:gG_S,*OO5Zq^Le3[JTrl;,mQa6`Q\qVkUMB/=6tIr&7Cum[
%A's3I0O4=n_P/<dH@e0[=G'ct,4)k%L3qfPP)=H!6'KAaeEep>am(PW3FiZH0^<BM]dmA6^$+6*U*.;;IG@#471..7<[t\?j/P'&
%2'G$3@^9k$XG%IWO8M)hO366EmNS.4AJ8iXpPh.eHHM`5LN]cb..J7#bWNFfAtG4iU&)2`VPfP&P#5GYCI2McUSr)`q-,hKT-E=U
%;Oe[VD?(5!;9CprCeCsBadZm&[%;NGnj[Pp6L!#NMME2[)gi_G+D?(=Q4p/$V^sdm7Q10<Em7'e+crtY:/A*lQF#+P;;koLj_P%q
%0,5=INqie2V<E*(FqKs(^_r:pPkeOocCN8s&'Ih=`:A^="#X:$^sTXNW!PPH,PrGD.$^RPm(C`AP&X4'oBX+bF!)[!632dfp,fQ7
%^Rn6O+s9UR)?,^Rj=b^BeZf:=1Qo85p5*.(!:@hEM_j\ML:bBO6M]=.Inq*jjUlJ3M\T?@43h`]YuF3Z_t-seS3q2b[kp'/A]1C5
%3,=6Pn#**2HHY_qIcq0L5-T%=MG+s=J*-T@(][*F?#Z!+_PVc$H^7W@]8Q\rD0a]NopK@=E91PoAZ5DZMG^e[Z*Z5)+[c'UN8rpE
%ckH.J^D,K]Wl3`B!KEu=@J*UCPK"2MD[*=(9mdq0m=:MIRklH=YsItrpsWnsE=<$(H2:]Y]Vh?f_qqh<DLgI#dhV>!5]uh3H8';,
%hE^\c\%u=\kI/8jri7J*6ZaJ55igblR_H6gSj0^E6GTbsL&S=:5(9LXCSn-t1dJ>%Es&.`>k8P@1$SDd4r/4M(IQrP"Xnuk(?d).
%2Q[B&]OjAKA[#OWirhl\c*;Tt^"_Zcc[\[_CY,eh"Wl(Ef@Xl4'@"n+\0#&,E/(cE3Ms]9K'o16"^6u+c;tM[!4n-+^1K03g.-U]
%QK\qPRSgCmo<?J(QUkPV\E>tg6`n17nHQs&(Z\k&7fH=^cUEKV9S^5ZrMuD<G4M5igR6R+f9('%*[D9F0cd46Rh!brh\-a&F%GRo
%2'-M;P,7XOeHi]87u!-K7!a<?c!RP4\[O6q=/[>R%=(g:pba3S*?+p#qk)?Rj=e8u,\O;G\&tCVS?Wc_k*%6D#^se=J>-Z$:g$F.
%\(88X#PatMIsoa&mEZa.)MTdA&fDm9Omc:Uj\Xec'>pZF-6NOs/7]0&d/k6hFnl5V7Gj'b)0Y(0Ljrs<)X%$t\Ujn2a,P=.gS"CV
%bp`==3OJppVH++Djpe^?Wqb_gkPU)/#5*T9GS/O)D&\'beQWrX8`\pgn?f=SIgg%r+$cs,bM@T1[Odfni_=ct+VK2jk5uu*DZ];p
%T2.A0>*+Yl]\?_L[R_2[:Nq=ga2<I]3'R2dT"-S+DFH_.mG4B1E*nq@WTJAH,0(RshBNsp#OLkK0'7]O<b1lG/2Gpq.-@s0"[]uo
%iEQ(dQnPIm/_p<!ZIcOm#NRYYSoEfG'I)*PQuKS'.'=+Hb`U[#gWrZ%,u#+jZ<KGEn_m8jdq%X3-3pJLXn1Hu*j"4KJ]LhS]9>PA
%4:MJ$O5lV#:"(%NCI3#sVT,<+`$`VX?#HKI6fu8"fE04MT<*/)\8L)2cl89nd:,2aGddJX!bAJ2^-h#:5`t;.8uPN^K?U)3?lq(\
%%bTUmm:"(NRRn3l(17>Mi#71&@P?X[2mdqh!:%Ps^gTg?H(u77m3j8^B?5:q[<?;!H)ocan&:VG]K$Dtdj?2Y2YK)V)3P6h;npjN
%SDh'!5;YE?%n<\mPMmQ1)Y&\T[/Z?lD:-uk$%ln`d]/.--.5.i:p4T>GgsP%g$\d4kdPS2,^t'7coZ9XDTgMcrJSCXqnPD`ae7km
%/])<Dp[+bK9mFqGlCPaGqa3N@s+F>+_oBn)PLknn/#M&?>h/Vop+77f3aPdWf+b>!%Wc>mqk8_<>`rB"c$gSP?L%>^dB]u4!Yjc/
%Ng0X5&l,opJKt_O<U_M-,&pP+B`I816i6%a,WcUFECjar6`-NgOm5oRI@]s^c-WS9Nk[dG([&QpIaP:MES0%)!kkus,CTZt0?oeZ
%g,@c/-V.SZhtNK/hfF;+Y4PUd\hud&bFt7J\kn4OchM:1oHiaE6TY6!2l,f]Hl?s<dWEPDjS,U3B*)6gBYY(+"IX?*`uXMd*Voa-
%%OQAXIsqY"?f/:5(T[S\l^"44lP>m-*Lb3eOC-2*U-D@/BeBdO:](ccQ>)57RTWSfEP^dX:%&uA`PN-!DK_gobmEZbaQiB#(jOgc
%:R7;rc0UX-9Fb]`BpP(dY4M[f/Vl!\2Ct'b^]4"+_nZ'L_XCFi/-k$8Q?nVnqXr#%5Pt.0;sE=Ah[nj\&\$mQLP!7Md5SbQ)L<iY
%XK$.Wg2NhUW`X&T/0j;2IZH21E4`ZPW8o2H52^W3--1-]!M)@B5VGPPC*HM?>+dB,R3<H-[A[btr0gKR@J1:Dpn6XB8R#Z`##g5A
%:>Ft,;`.n:-7(c*d#6:uK50r&Md,sG\V3W,:=?\mns`25.+-.".VHiq$V!k*T]TLoTROubK9hjO!Jh7+-#W6J(s:7MW!o/ao>skE
%%\96!;<h"EF6AS@N#M_/Q1NWRcs99p1NuZ0nGH_E\rYDTU"pD2p:I4iRSf1tfgeSp*)&Wh[$OHFaD5H;YI&F-6gb&lW5X=.F*>EA
%^Sr>$<EVW_=92VE,h.o`\7oX_2.@c_?'EF,6#i+o/Go9G)Ph9fB>XQi/;tN,Q2iLqK@@>e_.V78ged-;,8ij?gDSP,VWN9&WS^tF
%S2%3hOsWC(qIM#f'Vfr;hps*Pi>sVd#7*[^'&26'Bo%M6dg52N2B$LK6DVY9HuS51r(>QSPleeOKu\#V:`PomQD=&/`ojm/dE)O5
%B]^%8/[ll^B-DQUY<`iN3I#u"hSiUEWX89k9W4%.-&7['lC"Y_Zmn#E86Nh-g#CW`BSqpSPsf?=/:M52nnKLDil)5D:f;I+AI5k,
%>:Ap+eiBYPl^Xc-F\_eP3_rSRo:,YlN^CSA+baVm%/?a>1p)eIJJT,-FYF3M!Z;58KH,c4>_`JrDd")l+:_`L6+LPAd'7g6GKGi[
%:rY=;)Tc*b))X)5li[hOEhU_)Yj6TF)u1bU\7<f9njt/;!]l`SJV#_7<NFm"T-G$>fGf%o[DSoY^fdf5C".*&.m)(:Td<A0"j5dF
%N#H96PG!C@18f9;60Ej>e7-s8*-6S6&S[f[:1fF^c(CecOt+.,8l`JdBat=sok,O!_bmKJ%BRtj.MleU0QXcYArmisa_$AbRk\Z]
%OP*39hTaGeg<CTqelugTP63(-bKNceSP6:R0<Q1ZT1<JQlm-=2:SWc@brKUq&,3C"j9Qqn$ZtAa6CkL28M38eAm2/NFtRK&/f4N3
%2s2PIIG?PS9RU!>nKbJB8^5aF7qF$*/%gm3=h+fDb9D(kCJ4q2irK,r4fa`Y:7**0aH/Q9fXHV3DS'N1*ZD=.0Tj@JnP,f.W!$:2
%>:QZ!kEagR[P0cda@:79[t[e?(.N_0GLt$pQju!Q8d)2Q(4mjT+s>"!Dk-aoeN6"IPbeejD,i@hk&1[I"H_MGMSfVOOb%6rp0`km
%9HX^LWM^_`R(t:="Vk6ZQ+7te5CaD6lQ%)iWkh]-+;:;Bmj<oPk#cT[=i^LY1fDpVEd%?@^^>L,9S#,'cVLi1Y4a"#&LddmAa9HW
%X'2VG"f)I$,*r9sQ:Se,3`1`Zk2n3qRens5^-rp`X\V/d1i?Zh"+-_`\OJ[XfPGt>fC\fl)R"KcHo:KtnPmE1WM?gO6(*Oa:jOB[
%eGZDRMg50C&S`SgDZHD#]ZoV]!D..qUe<s#Y6Y$17Y3;dp7)_=$"281K=EcX+*YmqL4S8bV]W),-'L6-9WY;WVc!1H=d'q(j'ZG0
%WgI-R/Z$qKQI6T%f&N2r1Xot`(0hCq_7r-2pC1HOBK?U,9.<;$TT^[nIr15;F3@fhbOUGsO)_?D>AE%eSrR!L\O@hnp(F(5l)6Ta
%-M:$L7&4EZGXl:eeXUarSt0O1ilW]s".HMYLn=riRK.WZ310$'dP/0U`kbmoj%X-D=X?_\oI&K)3meJ/R^j.=U-1<+ZF?bihgj3.
%mF6K1@rot4rF&\'c&J>@dGSlj.,:<3"UPg&FVZkF9`$,$hC]+L1j1d<-'_Z`["QX]5$F;^0dG]8(SdUpm%7?Z/`mA7c%]V-]rJf_
%qh#W%h,9e`CV.+NX:(3Z6H!cOTu$@'W"+&d^uM12)LqriA#qUW;\(..:2&H@Nh<#BeW8m3&R:!a"OJ`k#9X/qoQr!bCF$';!TDdU
%Z&FHh@NocE>*/=kW+:0VOk+o(8A)T937^Ze>'QWtDKVproK^6F5N.[/U-K9!YPs2N'VMQM7@PgXl75T-V!+6j)bN#DO<SgK!*Z0b
%I5n,ZjFipDWK1oRXsc/qFIaSSXZ]%H>OapEn(Trs_".OX"p`LWRQs6H1Wm1^juNej73Glp-@d?DdomN0Rg]F,hV_N%r4DjoYin?b
%[3??jb+mScG,ZNl3P6aEP*7#EAil\q])]2^6APmhj[N_,:+],uUN%'\ThSi1_&93G%Re6Mo#bIR`bL%XU!p,AZ&='P+*5s>YEd),
%-&6[dTOZGjQl@/o?0.>.+IfHY8A`F:fQXGeUA5bG(NDm(,#l4iTd:'5Y"5h)iu&4W;;qYd_R39NPVtYh+@K[m$FU6G/47C`Hjfu,
%oh\W+H'IH^Tj)IVcYopnYB7'pf`9eK%fNLiBW\3XYqN.E;Y^mCLLi!]1I4SY.2a+sQ:Q9S4=?6'f4T^+J5.[V+Ru6!_u%lcDLL3n
%[TTW"WF)ir:':.bjtmOcF\4QUR.%!h!osJ/EZqB'fB*@e'LI?D<im@ZboR<!-9AE#UL8a0/S7@1(Yu\[k18)2.=>*PPR'ZDJRrD1
%_s&k`NHe@8h)/OFEGEC<i5.#SBIK:n1Y"[SF#!ATK?J4J$:qIF5apd[jKa.>+2tOjB^Vg[gn2s%/.CLl)f6u:3re]`;EqoZlu\]2
%9iO#-fX.h_a>g[)%95L3r&Er^DW[M2jA,YShEV$nLG#6Jh7!\?<nKASq:<]?'=g.2"-bMLAV9BUV6H+YT:jC1aX1(Mgt(=N%AJKW
%UE2d,+6P@FYPW@efs\bmrtq#]X;M@.J5B;aOK*Ym,<F<]Jk5o,E4=I%;c,iF+hTm7Ru%aZY4S5hSH3+1<?l7*9[KjoSU[D&7Em5C
%RN0<=,k6il.4W':pGfc'NCgBh6ToL99O!aK7A0O<$ZQ(TDT]2>;ep?rL[0?[.\?n^<"oYK:UEm<Hsoc]Kd#_t*2?mZWKU)W77YM;
%A^I\s]X@CKLTN6HdZ&-]ieQT%=*08G[rA\9*>(NS3DeE3ndS&\'(&(SYB_A)69mkf+;Z.W^BTbHAPsinS?&!nP=pa&'5<7=.D1!-
%/_,'9m]h,4]0nQ4kIh2dYq7MhZE@J*MM>;AU['otZ6#;Iq?A>clu?8eEBV0)+AVGd=75LG*Z&:`4LOO0SQ,DP05X<o@8ir05eCUF
%6l!?2`&RN'\W>=RUOu;C5(i*=LlsXf_\?;2>YQ!.IW$N@?1s6_#]jICk?DoZ\15lAlaPr$^tVU``K&(c'D[`Q;*<4'IM"KBBd`Z&
%gSoL&SqKtADA)%i]%;QFLFhLUb+fbnS$bpCFdF(i6^lXhGK0i_@[q,`-n.DbmXc/DJq>@E`J.>\H77i,9LoUVXH[nb"-+f!JG[2E
%P_8mXFSkRYE(B,-H$"D.''-p]O(:eR"[RP%@8ouE\MnDpK91cBRd-J970r6i?+NA'4d%T.VpagR"jbPALOG[!kN>G,nM3J$@p-`j
%nPfDYk,KXlkb;:F@i602@J.Pkh7?iBi!Ro_aVC:m)lb5/I505><2#Nb)V_R^21ZqGQFg=jW&aWOF)],cKH'UMRnpbX!I>Fcc/P@P
%JqgiTAboj#r8&En`,/_(oSZ3\Z1-oVF,.dm#bq,-l@d:AJpc6)dl@XM$^0!.<I6=cq6f4`?Jm9=ak[Guj'<blZ<AZ2YSED!MlL=O
%?`oRIYX'UKe[^Ha=S6L)k,OrpL&*sqq\bpKfD3G<UhC)[9O#4Kau/\[[MRcrl5=GUHuNu>P7GjsT3puE/pXi4l:#bcB(#EZ*XAYj
%Otih"&FZ/XN@r_L'CWWGkNA:`#n$GnM3mqenNMAgU^2(laON)A>#YsaRO-_XL:@7h6F.#"5di-0%h:oZ7>h:;jl^3R[=C<+TKN)Q
%ooWT;$GL=kG-F`7lA_JVf1+e^NR@)+r58C9]G'pE'*CVl*(:;F7hs$sH7F^Kc#7G8FTM_sS<I?JhaE12d34k=W07Gi?;$c;lL]$3
%O=9Gm*Lp3B6Jbl[':ZT+U162G'G4NeC(QS"'*4:C(DKJ]4#U5O:$2gRr$Y.ZhpBd;Q8Z"7Fn4P%s8:rq8UeX(0oB:bIhR.SZnu8j
%4;k4iooA3^bl&)sHdHV,I56a8IFI2`1>4_%HdcH3ACEgg8hI^Mn%KWnI4;da92c6%dAdgR4,k'fl;E<bVcLc5Yqc>tW@9<2&B[D?
%JPO\[PL=q*2/M$bEtM!YIVMO(&jS_4L=J\u"'NX<$/`%5jk\6If%qKMN<.#.M%rWc&SZ[eaoDa!"Ij_h?kDVm[ili9<Fs(l@sI7I
%FCZX<Og[c[leT`;n,!/XBH/V)6h;AE+3'EVc/GXKL^qW,&j!>tBgJElb+hGQE>93MVFD-?_*j8\H-:/9,!*J#H(F(V39lm^"uY'l
%+^V5m8P`RU=e$^bK2f`^4"`;M*AZPLH]\)41TM%+,OC=mrG..hhdk%:(U!bpAQhR*Kc095c@Kl;0liG&8!J)s>)ojNIX![?o@q=J
%3'Xk\$b4tQaOakR07fE`:KQEgM`JHP\IYRRne;Bqb0h>_p]#m[gdc6d6#-P`'_<n"(j_k+B.&"ro.ImKHJ=/F`D]C%U\6T34IAMq
%IJq.?1qPWRTG2U$E0^'oZ;8HhAI@f,Q"Pn^\J)3rV-G/HL\cHd,etJD!bV0h?P#W5LlUX_K/]i!<b>Q5=EGGg/Z4XIBiQGV05!`c
%$e%M7<[:D1U2O'q58j7^grN^54W&^ml1XSl#\50aI*lb(&?ER6+l)5<[OndY\4QLG`.X7d0t,>._#FM])GVet/fq4&h]P#jce!q!
%&Zb\3mIQ5>=:@rcVK*8,#4]1Z=D!"+eVB<(QsP1(KfS#Qiu+;WkP_r;I\+l@GOm<B2fZ7Wrr<"dgn/oWRG@G<l'_JBG^doG\ps,;
%>_tno3D&*Yrd$[CoM_2p\.W!V48_NsWXmYQW.^?1P@G)Bmk_9P`:TZIf?cXEZL'+Sq_E8,_/9)#:s!_+G?1X0#tat)lIX7-G4sS`
%:eG,^F":i'bAWZRN9NA[RrS%T+eH!MOA=SJm&M+4GRNRXdXcp]RqRoFdj;nc,#e<V<S&d$A!,2-*D?33oCJ.Z-E3//G>l&%PMVhI
%h>VEoY:Y60b1rUT7W^T9`t,3cJ=[5]2oT"92Z!aUR(XIg!,<TF@&[_`&?c53'!K1]Ya@:"3e`[2X0YO<`gdGK1W+79ipr4ZB9882
%BU(djMIpoqqPi@iF^oH>iBWQi?moZWBTONDF4.bQqu#N,:RMj!45Ts4'g0TL6G:7Vr`H$b4.T&_a;sQ>#2X+b7[)*KV][!G718A5
%ViFqm,]7HTIuWgGP"h?Q+@1!X2p[k>aNG[d93$\sB')\@L]e3UqJXMqr\0RUD_8/W1_^WE/'#q&7MA-.o8+&I'Hf6B/=T;pZ!Njd
%3P*_S@LgLBYOt(D\U`cJ4I)bU9JH-X\cfs]_Ij1q[GGGW[K[UdjWTb9(lnsM>25%5Xd!T4HS02%nUOCH':7+[NGVisUmSChd/0qK
%F``)na@4?V=FN&tmM76nQnJA*,$qKrfWhqnU:m8?f<uQ,f^Kk6U.<2`-7CfUU/!=UcADC(oCJ.Z4s/h%>ia!1Iqn]CIHcF%&:@#k
%!qb7*cp7?CHd$=]r>S2p,a]b<]8:GVD*:AH*+%HUm,65G=5;GG0?2N-TfT4G)T0J*OhQVuJ]DiB+ie+&Z)8DK?dR-efb?/GAm6cX
%EKt17n?:1P,Y"-E&p$Slk;k=t2kfVu<OML>Y>!jk?EQ]?+kQ%fYik1i:Vu-UI(!Ua+oE$+D.sZmhC%,'4tWJI;9L8c'#@\_NkJ+N
%K\&ncS)^hCqDIEEB8`6ICR\*Spj+!.T-0kGJjXr&\[>`3Okf?,Q'mURI!g]0a3lMTom+-m&4r5`@8\bI9/:S'[trc3I2ZM!H;#P,
%RVm^CQ>A./pKHDEF3Qq/l6scg1+13ha+g*u/"ud)"31m^r5I^l/d^S_O/2.8(MXI+I;=g!"1"$GF$!2PKV9">&fKNMhh7F[b[is7
%Kab/#SR8&ZndSM09b#Dc3!PNKL6shlZU3g#i__&W$GSRg'4jGLi3DC=9[&#0ROY"+PADfV(VNRcO5]1%`>in5?d!kH1;W]H^8DnJ
%.D#5qV^tB>Tjof2DOJN`%uC&!(&,f6*)H;Zn(5htbut\s;OJZ`ICp2%:.j#[+uP-<Uc&qU(IcgHG`9*46@3S?9Gc/CWOGl^P.Y=e
%3Kt@hnqTNFCbFtrrH=t\.anC8KU1(XM!(7@&13l^s(J@^4Kkq6?9USTrGUQRlm8B.A]"7;c;?^>R8#(>ZGu#-3UZ6RboFQ*?NRTQ
%lbqK[RHeDA-7Uh1k'TZr^Si7-lnL1!kTZFliC?)Vf-$8Rp:QSR$q#:sGEZ?R!71U=W-E8fo;YHs^<R830t@St.M,4Hg7*/X;SPVJ
%)R_:4:!ORH^$=c.00C;Fbg$_d!Sgk;;mp\QBsm!/#pu.Qeu:ldN9]ObO?X0"Q(04RV%2qfSBiEQ<)0S&Tr&F?oOV!ehP?S^e*2bT
%@`gn-_&-pjK0F$2$%6]k%585h59O._c\S71mn%dC$Lt`h\ZM/6/g`J"\]kb08l9A!chE$`T5=!C<gpr,Yt[oZ"UPI#Pu)]?gJrYB
%R_9ZSa7ma22-PrldP(N-*E>>fN#Jr/4@+AP,1Q'rfp^6=\om=jI*4DQ$2C8u`(?<EjVqu&p;Q9/iNJ?&nPWo$0D&/jgTt(^"!li7
%C+Qu\#(\,+@O6Z$dHs?tFQe`2ZC0f0^=N2ZjFTsr+NLTKCPf%9Gi\'uk>B'Y3$pF"2,*_1#/fL[r@ZBZBWPl-MqL9b;`t&Q6L<8=
%`gH,`'9n/Ee87pebiY.Z]cn).gOh^''k)=2B4.s@:FtpF`,GpO8ireIr\2E]XTdP6T[DD(G,Tb;Gl6aS&n2b5C;e8Cm1at#p\Do6
%TAh-*\iJjZX(70V]BW-W>o'5t&JQ+G7%ct3=J1D(@/*CD'W>Gk-jb#JlZ)4!N`sD"DGEpMe>omM%E4*Mkfo2:k'$,`fH!W)dac$,
%<r</C\sUUF\J2[*mA@:gF)W#!k7\toAkK"cKGobFPO+OTSqDs_aXP.P^/k./jFKmi6j/If+;faD,%/97KHjm;@=sNG*WZp=b_%@5
%bFk4<eJ<Cu*\2Y+A_HF*qC"cD;`@S'Ds5r_V#EnQrR,2pFE5Nmjs3b9\'L"DO:g*d&jK(L=^sa,mP;=3`Wg@^I@Fi1&5P12TLh$X
%P^BS"q6f!b;Btqn@ele8'H*\--j%6OGm*@<ON\5s3$HQ:8JL^Y%fRIQ^2B%n<a^aCFU7ZmeL?$s!]Ql]%fhr7?g+>b%6L<,.6@*n
%`g%k;/ZpXWCV@8m\&;sWSZ'GDGbEnR>aHV.!hi@AC<h[)rA+%eJ?_d.NEj]ZWh5or^s[jEr[_I#35oD*@^Y_?[TV7O7QFDj7p7oN
%e7Ua_`pL`-1FRMlbrupF$-,Q.:';(_S"QQ1a%^LNY;p,SihNDJBH+,c0%Q6tc@6JfCdcAeIYK+4,)sp:nhQL9?i,q3dIKOW/HU0X
%0recY`giFbeNQ3Ci(KrKEHbZhIYWU3L7=3ujOk6`)Ct_6L[hRd!hnKXm6_7r^f*R)l%OWR=Y/#Y7!)9m(/87E(5Z3iL1i45BD0Ll
%ioH24MUCe=A/Rmh$@HAN[RX`6rUAALf&!=e1'!@3%1?AMYZ_dHSAk]NHjOr4A9/>GPPn8+NreAu`ADTi?`SX)o"l*2SXC/8A_8u]
%EjauD+ra3$;kTG;]XG`HAbAXJ%q-8(qp\jQZ$,F,0i.P/^7fjdfV(g7'#aER<5Y):?&PRAUjdHEg5'Tj\Z.B@d.`?c8Dfo"jOau!
%d7lG6<2O!TWR(hs`g:BDK]Gf/%#X+(%_B=hpAA1`&+NN.'n5q1C/JFa^6p1FO<odKS=9$\!F#q`:67GM/N.'0X)`D'<GVTPV)L0[
%VnndoMHQmm*2.6"r.3@f8*sirIFijipSTj\JWNlj3$toh0DI9aC]hP`*D\^?B_."u"8$JE74SP1TL:`4,06c#g^+[mgIjj(NL&`_
%r-Lt,>sK?8NrWmWRZXU#3kY]KrD#n=.VcG_YZMBla.PFPFR"_uF,BW5HFd'qR"k)tqChN`6if9*iJea>2nGr?-L)BQj1ldiCnLgu
%@QB2,#\7SBL;:3>lHnQjAZ.=9$O3ECHakKKdNP;\78uLlPnr-^<k7I?EQQXD**$2gm:R+^no[1@BLf<S5d_&Z3*bp'9p!ndP87#"
%9J.U6U':41J@T[V47)n#GIfjD*bZi+0(e)6;7Rnc"Q?J#*gF_8K'9nrA.'t-Zc5fo'VPe"L3d4b^<e.H"[OBS%U@rShdeJO%[d+R
%b@nr?P\;Jh.M%.@2EhNR;)=+m.W/N"(D4T<8JFaW$H*5,ep"H08PV+>Ja7q1F@gJlggYP\5W#Z?ROG2YD7-I@O!4,fI59REE".*P
%6H6.R;,Sj558`@-&a2qnaU=;l[@pSdWRG019;1^2(`eL05b-4A7SsV\"b8nU:amjQLFH"UhLrhmK)CYHAXJ&jqK'oea:^dX&,%jk
%Kc9T@Nq>[lM(,/h.bZ$4ZX!u%`)Z$XrR?Gd!:Lq!5'Uj<WtMcmI:HrbI%m[U=\s0Wi21tRN$*e7iH];MRY31Hb[h!H9^5X!&jL3$
%T/SWT&i8V"c`#Y;Y$%inVTjNK-big`r7hRG'X:X8k@/%-Ik\b_QDH>dK@i#L5>a]C;*40%!i)c@kb`E*BrF!N4[&l2rkpGN7LA=A
%Y96+jF/d2W@b[X-oRP`+M5HBqa21(O1%%(H+p3.t7&2jn_@)Em,"gn]MO/&WU%XV1%HZ)8%J2qn1[:1)YuQAW8:tVGDB`)7A[AI3
%du)o)5#M<mE9HD)P.&][C(G0rq&;[SQ*"Pe]Q!re2:U^rL)$=-Y?7BH4o,1_7lPaM6NBK\g5.!h\_?nqhRJRE[j[H3;"(DA.kI.l
%\f&!-j"^&3=Xe)p;CeV3A9_&Cr1r_HC0d=k7#cK5DAsu831dGqmY1'WUk#7:&?*\?*m,h7,]^`'E\,'R&mA#Po5.>:7`_TiK9Oq0
%GRDp/*WdqEQT>DKoVM2K11]DcLDDD:=eX=a0%Mk-LJF_2K>Nl-5ISkpeuJOUZNI!@dAJT<$*#(#I2[+*0ek>5D#UcTj.s7ue4H+"
%"Pn,U/2DV"Z&1`K=QpWoS6sJrmHpR@Mm+:Q1.aQlb2+IRBDo_D$'cY7Pd9!/`5#se(DDR#6@A)"aWVslR,)@&==[82XU19N:[04W
%,t=)\UbV#A5K1!+!?)d>S@p016mtQB[or.Tpppp\?'SJJ5K%7UH.g:;Z,>CU6X"+N==[6\XU/!rAg]n?(^mNDN]EC\B9jq*Mc\2"
%%f2>rk^SDLWor(M&VeHFPqQR4U8(;Uf7J#c(c:$ogWITP[H8KlTtg\1moK6?\JYYs-G`o?e(D;.3f(-L8$e=#O:Xt3]XE`f$ZM[$
%__.9^64G.:5.1Um\2MdKmr<!1eM_VU^RhADnC1#N-nuW(:b"dVH[QsYLYbP`A(b`cdE)O5BHGbOdm:/Dok+\T1/o:f2iRXh8&=Vj
%:begGbmT_'b*=i)rq)[)?6Wi^@.^br99u6T&auT%99KHD[JNU_Qr.KeVKM15L/'47;)cS26ROYiUQT2E\^9dBbc6sIar'of3XnNs
%WFUaB]3Z145O%m?Qr.hcWRZ%NMDbD-7'T-FG.mg`h70+agf>pk67f*TcR<u%dT17&6DW43pUHpb<cL9"n^=0rh!'k(6U:o5lMP'a
%/Xp6@qE7%l@j[F>cd4,BZL^4,mcA06nXChtZ.=Q#=]rrjU7/HY:oq3\XC(kUd%5D_69V@SFV7dD*0!=o\!n)$$.S[WC$b@M*;7pJ
%+Z`2nVlb25j`X>BF\@*VrAlbc_iA&qCLE(,2grtI?dbR@DJbNo?O#$8[H"9$QQ:9P![q1T_QaCoPe(&>P;j!PBl0iq02[+6iOC@&
%IJ"PJ3$EUASNd](+XROU_=&.>UaE/F>+YS-GBG^!6<?)HDS:!JZ(0\qdF<&G=rET-4QI0ZiL(Ha))2U71RCWp8_K$QAHO,m;Ke1*
%Z9f*k-6DoC7Q9$Zq'"&G@<nk2]Qs[C\>7>gAThX+7!1!hg"!tc:X-!s9']N0'lk30EB,#%j=GiL,@53cLR-`(jk2L11Tku'4[:!5
%F`i^r.An!4MlO@j)i`+NL6PYmfUCfB^tn,"K;H=,+*D02^D60S>)3jdc,/WkA#JRfp?'s1GHaS/E0TCepIV]Y?S`$tUK[u%^Kapu
%%#4*`!Dk3a]1/Cgm/t%nW17(Bf#;L"i[Js+S)Y7.dVqa80D&07f'k7WJU#]FlF#7T7A'WqH@M`\b<YC@3VrlNAXe'cl@GU6G:.Cn
%)kb1@24G[e4V6ARnN/Cs[67H(e,tu9G(,7M@%b28VL5qHe3fa/+)*n(+_MS*ciZ$4gsm6,X%$0Rg$i$bmeuUg,P([=W+cgLX&so;
%]%F!rDQ5Po>r;Z\dPY&Gcn[FH-#B!i'3`Nsh`?Y4A`'C\9W\?VR[`\aRr<FD>mf;9/s7.ZY8F_o4G7s;KH/ihq3HB-i.B+pJUJ8,
%Mrc?bU&aL1:CC8p1#`I<L-CkJ=5j0*EWJmQ'#eITTXfEfgN!jIIuD\^+!uk*>'32N/lGM<^MDFH?(dW#Sbo0U]]!(N#H;CtRg89-
%FL!h1C8#fpkRgdcN5Lf/U]Z7((QM>%T]-DEF[!sE#XpZef'lXr(Gts;SrJp9n2mamKRr/+Mlb3U84]rn\9jMO:YL*Yr'_i''[V9G
%Xi,H?A@V[XC_8boK2$g5+0/T-r)">]f^fD\!<m3mMDnge)u@H`\:-'=l?L18Y'P)WMd%AhB_A$f.K7BYJ1QMgX2VV>G[Jg<a:I[7
%O8"0G?9lB8-q^<0V>-a*D);JUg,6-"oh1J$0>Ji'SR"cKilNVpZgXTt;#h4rB\m:(q0"2c``*/rb@]A^!sskd[7*hJ?NPtTUlF3F
%9iMmXL4frE#NIiAeqCGL0HOWR3n&W'X(E5QNI$ohZ4lcsXd.0uoWYh?&[f%=iaS`tl@6SDdeW#%Pn%;EVMj9UJfgi>oL-'G(c"r2
%&'k=Bl&tCT&Xh#$Gt$T34o=cAa@moXW8&j-)!:/nSL5>\CjJ+^DFd!j89^T<Q*H>>\<V"":7J/(Lo*<4Bh,_;[XBZQ20G5C^d!qn
%N$7l<[ngWJ!X-?iLYCQYM\<Bc7"N=oDQ#6i<4fV1l4%YOa'mA]*a&kM;b)*-^,1)E4!K9o;(!J;Cc><NlOQ?e%%BKf8-iX=D:_/j
%pnR;Y)1faV/7ZN>.,4/DZ[EMWL^6o>!'jo7E-n9Do',Eo>)lpHlEbP\]t!aW%>cn%p-D%:-'#g8l"f8_oESkXm64[W#aX-][dTqk
%#JAdc%B4#KQTrIqQ-0Bbn)5>p@D`N.a,*.76l"1gA#oj9"/8IWY4kf`n6JHSd9qJ7$cT9kK[M(*["o%<MFZ;k`GJ^u9%`,W&k7<O
%adP8c6L9RKo!._:!bu:M-##)E4"]YZ\UOn$o&G(LXdsa7_FM+"=K?V49ggpZ*iprX:$5K1Jtj27)Wck-f%L>q&+mFSj0?3M]K2(*
%[NVNPeBKU4P0i.IDKL?aR)n,T7k$k5K5*hR&=7L=6'o8e&@@[]Y"0Y9IRu_,%!<:ZhPVW/#[0P#i`JP/PeJ(!8A6R.P%k,gF@'K^
%>i(4t8L+)Ig0uQC,OT.s7UgG[#oLhtG;'[sQ!j)Z:`M0be"n[^H*H9r#Fgdn?Zo<5Gc:)W#:d=gP(&d^KnP=m.k[m)Z:G)OZ4;^"
%M!aRXUe6JRh9h%(c9B+gC`6bT31ih0r1#H.5qS7p/DutPWu2c:S6QLa>@Q"L=6j(c[>j&k#;DAi#(ackHor+&ImgW/Dia\b"-m#2
%&&iPVVMY*i#g)grEs%M-!2&XQ1XM9`i$dh-m^4o>SeR%sP!$ele,Z`"C>CCq<1>^T&D6Y!,8B2q3KTPkWV,-+V4d&-Ij/ijoIe>\
%)!^u?Y$=Oj^B^J5C:gNZ:c3c6%F)7>`6CQ\gK8U*n:J/3P8>t0(#4_79fT"YZ?=-(M5DSg$LB]:5kg!gLOQR/UsaZZe1f7L=klqQ
%%Opfa2/`3LfH6.`5atfl1@;a>cfO&n>$:kL!t81g8:s35<#K]i`rtL(,Z.[sEB[5IG":VeV,&Jc6`VcK3m@1S[cJH.4CjUlb3o&8
%(;Ur(Z]!Rhh'\Mslsqit5B'=&p0\Ph6,qTh!s4JZTKp+CZ)d6HD,bLH-e,[$rJBD+m`ft9]Xn!Bg/d<28.dce9I(+sJZQhF9K9<J
%J&5\3d*O;SFX3S#St!u?dTh[@EQ(UT;62R#%Pq<!cYPI:J<ES,cu#=Q7Y*Dn0_Kh-ToGl<!pb6hSGlRu8YDP?j*IIZ,;LOT9FTr2
%0=X<f/BqFTj+f5liif^!E5/s$@t;\kd4eej9S1BqU*:J)L\\,V@2sW[%uXh_<6T;@1^_U3DepgZZPGo=YaeNG/==`'_BF9iSf&=%
%I9N&GO[Z,*R?RcYeS_SH*hGk+?[oZLq:j@9+S4r,o6lXP>ab`Bp8iu48;'h4>./A8'q`\aIYP($4mr)]]!jab5:"n'"fNMLm)uF4
%o#VN!G*ba1N_cE?Q2os/b0XqPcgrHuff%:?!p\NL0+dPt4enUEJIb>1l^]2Gs%n"8L\!r.T]eLk=H%`e>7P9ne/t9];ce?1/gKQB
%($3?Pk!N)HrJtX7IK>q&q0th_%a_QP?ScGg:YCGKmEkq(6J+u=k=kTLAHQV[qq[#E?'6lObn^@NbsJ)T&dR[hidK0"LBd@$b%3&?
%:0oT-/mUYLL5[nfX4s%ps8C^*s6G$a#>/(`%jT<eJ&V`r)u+#HA2,+Ljq][*rA/d.0d!/oI"j156a%A<q:W$"m<'l`kQ,'H\X:KF
%1pVu#]An^c!/^FYR]j;_g'1T9Q\/fao016E7PSXgB_2!O1<8'q)+iEVhlu4YZ8J-BjL.%;njIN@:gO@?lX)F:I@q)u-o-s.;aGnj
%h?O[g[%lEmJ06g1>M5qmQ!@JA*#tJMZ0aro%aER*7no:a*BaX!)L<J]jF\W*8"HdXe>Uto:IT3EUt7oMrI9ckhI:t"GC@F>Y\glW
%*qm)h8n^TC0+0$[FoCa1+l6]lm-R.-Rgji(];I4sDZt_T!M+TW-rQZ]'E\7,6Ymi]r*r!QCN.tR>"]Rbe0#,VU?(0^46g03a?k;E
%Z+\t4dYJPZr*;5RRK9q^j^hf,ls*ElciIbj5c#1l[[UG'<3Fo2cB'"S%2K]'#g3,*.:TBDL0&?7fa#h(V,+MU1J\dpLnVO9:).$k
%]"3MUm1NkP-Q9#dX]^S;`L<LqC2M^8EFB_f\&MYQh^AX$'!JrnlMT^"3`6kObuqt4X8lYFm?S3(jTf)\jaDM6]lhEMEjM/p[hZ%E
%7_cPmb#[*5X[196=!Qs.Lsta/)p`=0GE:RnC1N_FRHPQf>P$5)/csOTqAN9'CXl?:q';_h]s.JN;7L!NnK8F7@=qR7=H_sUJTm0m
%X!QF0X$0HnCUL\o^muZ6W-Zq2kYONM.iZJB&t1^nTM?/rn^?uU6+FsuT'o\Ycus,pri.IM#oq[oXg`-_Fo<\*nnkEKKL'a*g31Yt
%mR>dIK\,-\]"?rRG"@ASg*PV\MJXsB4.A#>/TluaiPW9enSS#_"[=&sKff4[FNFb!Csk3<E;U7nQI]VdF/XMn]_[>e;.K*CHrpuo
%bJYY=in4t0ABEDSGhFZI3QDrZOgBj4H`ul5\`T)h5iTRfG?N0*h%6BZM*u8J-'e3igo=@ggu-9@k,U\#FUT@krXc6+l>mif+Z2Qh
%BnA54f8jghAar`8a<%Ze,FR?[(h22GC0D</LEMpA\5V#QNO1T)O$0:!TL^mH>qdWDFR$k#WoO\CG0sQXR/=SC?H[]`j$OU155DTA
%`;:lY-VLl``-\ZRq6AWa4ccK)7Zj=;Fuh\l)/=W\cDD"]!hL:[duTs(K(e!'6)Je[B6Bhqk\!liAO$rGLD`]HRh[:8).9P#'qKT@
%]T=9`0;IOM"3;QBc"@K+l*-,:#0F=tXn[Z_D0'b,A\X(*lHY,TV8IBFM0CIg:0VEUeSrhC1J*.BCKYp35?@OV>k?HQ4'oEJ*#p6N
%_#=g:Ph,DEoE'?;K6![gMMuee+EeW/:'6M+WcGYZof\%\7fe$.pZ$;0&?YE*:gDt)8J'<FBaug$c#&nQo?t%rD;R0QTmZ1D_dbVl
%\S)KO<b^LL8s=D]S-\.'8:\51;5V[53id!0S^crTk\2^kDqs=g)5HUJ.\Ql64u\4J"p?uhW&:J$F\AO.nbF*N/:8U*pu))2%Q[d\
%9-B-ojW43;:a93qU;T.I+^?n;%e8o,XH'Q'Ml>&pf=S*X)WkU"QkAfpD&SLh>NB@W+=:?Fk/'orH"I?IeuN<([kU(IX\G#KEm)ZR
%q2E0AAZ5!gD(cj%"5]&AqH:E1a-n`SL'$d$'=s5Bd%Q2;T,C#'I0+L_;/8p&lBV^JUPf;u.E"!U\`!DHN=U0>,@AU%DU^6t#e/p/
%%79ro2Vtb-clq$.(<_6p"j1J/IZ`5dCW==g6!j$J'Tfuk";.gKB\,%Tc)Zh&[n+oVlX<TL6\\,+*7?C"#80'\:"LQa[bCPC^UoQ@
%nS#%<g$VA>X!cuLnZAC?3+n?bbr3A59!jnkMf'mda7s[4HkNu#YI-MX=.CQDC4Bo3L3>O,82:i"dX@k@@ctb>*+eEX+J\8*(A[l:
%Fap'#Y%mU@FSV;o)3k2)I6feA&]?M#&16GL6!h]6_cNg-b0*+=bGC.(GRP1*O?odBa[hRZ%)QRs6/8HsjP1U1I956P,M4gcU?MlL
%ABB6<`8`^<T8WUn(#Z?l'r5.$Q?20%9HL7j#]Euj_Y:Qq2[+4(Wp97QOk`4Hk_7Af7!<Zcn*7LQ56OqC&AXd!iU1,A__['O@tC*+
%=.H;#m@)##BeD_;>1^)<4`mdAFkI\V:t.C"NKbS&ACfK18K&m_a8*A><'Pd&(<oq]<)U,dDLs!%dEOaHmIqD^2H?T#qKN"rX+Bh@
%I,DVUMX?C!5NF7oY8;*dT0en7.bC`8/cmOjNm8T.mJs@m]QM#-K]<5p\VSHL6^L<s],@rW*:=>N3<oMf,:BHjQF>r$:V+aifC=l(
%eVp>u\Y'nC24?G>T@5G^G>#V_4qAZVnB@[u:t(2*O,KC9W5<+53M3h&I7/pM4Ld#SLp!)gX@6^iV>P=HGRJD@\1e!</40SWQ`G"e
%Z8MO0C,%$-`+m+/(.Nunna`a;eaAq185_e9KDq?tk8.i8eDiR,686X^"b]CF!qi=bJ9K.Z;-U5Bhb2;]<Fbl@f*pBbB=hMB?)*R#
%"#!k<I9&]@o[<*hWrsgTMH&c66HfInS5#ED]Chiu@&G>H?4L4H>2OI@!SWkacop'W0S9/ph=K\hg(>^_/Q49qiub*-c0qc_FK?#^
%M`I/b*0tHL_>'rjY1n*HI.'*T5WcJ(M%J%U":J1Leo$<%)Z4k[ONgPCWirGoBVGiV%_JAl9&"T2"LY>f'515/RS]nuoTA3q_+a//
%"c*8G#(8,7b]n/l^oM"#2_U_o*6+seM::r8F')$!r5MPXZ=`n=1op(S\.Vr"Z0q:hWOd#oN;>sg$S)=E[R#Fj5aW@ZNF>7cLtFK0
%M(K&$<q7_$_>5dt2B!g5IJ9b=4rLTF?7XQ-m]4$a1&i,51)U2-\=Q0=Ne=Q$Y!a@/X^E&?oA[MFkU9Mo;^7*c1=1k,$$F*S-V=:S
%9rsOq=<2N:F3H5(iQY$Y-\m,l_5N64CF>R4ouH=RJVr%oTY>=K[:'4g>\mD7Zoj2I2E"95$`G5u=We#="f-GgTM/qbQ&ln@LMkZ+
%<q54nU#;j`V#qEse62RT,/K(.>2s>C.1c"*P,M<=C/F#r?lYiF@hRlDf%$C8L=Th5cj=Qh!MDIGg]V.Q$4TXXNCWtFV^!IEM.4+1
%'8!cPhj'#)=r&W`jX'6.Bud6=S&@HqkUE44+%ps00"?b7pl>pN)U?ul'*:m'!-B@0$m/*N]!^/\4MWjt>t@`+`j(D<c3XMGS:F<]
%WM5Ricu4Pp?ZJJ?(/=3ESDXR%)][\bN<Mp9\eVi5Pj&W`I$RnkZ_dg>miXYki*%[#BaO'f]AVbOmSb4e9b1cgIa@D*'p$f/X^[3o
%h%5/Eo5[mi7^#iN4EpnPc>E#+06DlB2Cg2QbQ,LQ?+H$H4[7QraUE$qBD,IZm(4Re:9h%l<p_sP!2A]%e3B`!9L*(GLA&Hr!9AYn
%C6f4J/3:n+(e;^OA/_R?I;m&02:S-U@5hs,EPc$+Rk_%pDRXpqG5)^/D1\H=b>KW:E$rd8ql4qd\:[6=(c*\$6\e+3YSZt+,$*@*
%n1PohJD;*,/O&7tdNQ!;L!X:Gcd*?PirV)5L%/*]r=kNFPO]9Hn1%#SW+d34XN[nR*dN_'E[/<rJ2Z19=Se/u`<E:1+ss@&4$a&.
%+jjj1EFDk#l$Y;tgfEAM,:NfXg\WTT=`3^7^Jkdhq*S9NMUkS;KpY."afnti4M9rPr+JIK+;F1d)T.*DE@i\H"6qMbn9cH%`IS)j
%I36s1egCZDhlF?7f;RWa6%J%@Ml.0J6a;]KNCU`S&T\@44m\t70FYDVH[X5d<R5k6.l1D:'^VI]B)3qqMF$;6*#8mE%AB5j^.dI!
%Zf1W$O?IFf$R]-.;4F&-q[_cQ<]&@r+$:A-S';\id"["==Y@#d/5WUU!E+,$JeiK.q@ekodc-uB:"^^58]^i8mrV_iD1]^YBA[Hh
%g))%WaWD+US69DDmsC4<f07`R[rBo5;V_DFM;&W6Uk]Wh6.du6`s]7r?aLVq.G@j3"(Zn7GQ_!abo/2f>2V;2=2Xc*U1oPqDIS/+
%gg,Xo"9*tcZ(KTpa)g;/658J;oS68c1aO@QCObZG4mb)%4^AR-m'KK3+.\$\g=+r@oH<$lphXh?mBN]B+1/1[9.VA:U0]k:QmJ%#
%O;Lali15,e.Z()Q]ns`89>kR&d<G-@$.ftM5Iqh^%2Qu*6Rh$:"EZk)f-9M"2lQ-os,^=6Tq_bp[+]dmTj6![P'T'?[:5P$1sq7R
%".(ZqOu-Rf,kgl4f=?V=>Lm)JE`?sPkXg+%V%-Q[9Y>-1b*WEWYdfGr;P4rBA]a`s@8mF_?KPE2"%.b>-?(*;B;<>g&4g8[J=Kc/
%ebYW*:cgr2]s6#LH(YmTL'EPHQLMG!@:;S2B@'.)@"gQFD+.*B8GG:fnCXju0:sMK`WjLoj&Yt%p4X!RWbIoBfQKd=pLW=tYE]eP
%PO.2"WL-/=RZon-X`2IJr9YVKD+b[>7EjnTIBmN?]kjWR3bpQ)D.=BnT7[SSW^_gb'^o^#&u*:<Z%tVt+CaQAr?XJ''"o!mcV"(<
%SdB)^-+"ijW]XM@OATVZHJ\-*dN4M;=SK.m[17#^@Wib)Nom&*6H+q=:4%2nU!p_@Y?N)bFFt4AF=CsN#!u9!=nUG+$&.O(d&[<<
%%lIH$O9Aq=$/tj.kJf?I3+Hd_ZqGF_aOmuSm)8YMNj_Y+2hG@`/G_Y#8#dS2[QFGH0'[aO7m8g=>kPF^4H@PBV0R-s4)0(qj@tkk
%<f:U.X(FY_`>8V<Bcf3NMKl^HrHOi"G\TC!klQ2(9]>#ZP6L:TR`2)g&WgR89Kr[0MuUr#^u""2&ChU+BjBQBZ.PXuMj-3KP=?4;
%'c_o9a>5)].&Vr:YnW!t\*Pm+OPJu/obR&[QdhW:>FI3hpV`Y3d/@[XK6oe7"HTD-'V.cU('h!8'/QdY9iR$sgO:tOV\)fjbNrc2
%i_;^q2rdeWE@+&G&t6q(frFU91BsC2.*Wo\hg]R`h_HE$e7KSQMH<WbDi\'PIY,/,&;b=$9oqFPZ!Z>Q[-3`0]e1]W?>_PuX![0*
%0<;h,SQqX.W,O18/=em'ElhmMJHu/!:TAjqpOUiWEr(fjY<kHK<#M"=/5AMC,_i8AA5>U*;L?`Pj[VAT3dUdHF.#]+>@ceG<>^B_
%^r/-@;i:oKk/PQjLesJ[<8,?p+i/gORZ`#9)Mont"S'`$3RK0)%U(4&PHBR."0#-TeODh!oN:Kh/Ur#\)0=K@[3RbVqaNjP`8W[P
%HcDc,Wdl@g#A,LNYmBSk/WrB*'6@Ai&cPo2o91PH\)s^b6ceiIR;9N8J5RTr1Y3h&"E!niP(RGL;Q!*4lgT,Fc:#fED(Z6&9'6f'
%1CS6SS9<L!6kJ/QW(/U!I@up%HWq7?U/c>'a0_:[QNIjZ!+'r':<a,])L_V3/,*Rq2t'gf`h#Z[a`=Z)OrPX/d:-i'3lMXdH(n#c
%joJ&D<Z8@F7Xfo^qJ&fWRU1Do`'p63>r<^ToS\CLCiR$#[!)WmigL_[54BW7,h$DS)*_]hiBU^3GCD:+/DlOL>pE5Yng$4bI[]+s
%9<Q3]S"Z<rG]*S(n%nNq?Lgnjeko@Z)!^BboCq6H*<j?^_2oE"j)=PWSuMO`UBYO5%29Nj#E,D)RA'G@3]5<r3517W+mFObI/"K)
%AeM\Y;6jAC5*A]=F8I)aT\\%/W9?ZoZ6F[hQY+=jPl@@!+n<>05u!d\ADZ(=Q6C4SB]M'1GI*(Gg[*Pf^d]R#4$e(o"9L_U]V,oW
%<KW7G1Yt#i]Ickg`2[9]G/T2?MHJ9cG;o'D<Kt73mELmY-`b[bG8=s"B)KneZ%@E-Xm2:CK`U1rE,&k[D%TA(PL"XNJ@&?V:=Bba
%J8sd1-@U0rn0FM>OM#.TNluP73gI32G]>$a#`&U/2M<ob0gt>'W.d3NF*8_PDCrMC)N%rYP0H<a_a94%l?SslC^R0TFOP,i/"hN&
%L*fK$6=8#)+VAK6/)bWnf[*-G[GRbt6<['^"7tN1o93B"Yq3hZ(7=rf1fqF(P3f,<%3i4-nlI.f:TbEuX9_IQn6N,(<+h%p$10eE
%O6k>M%>j(/r(gTR$2qr7.%n0>qZIX,%6Si4/-cOhMM-@to^/Z]s"B+.mX>c;^V6ZC0`#ERYg@!3HA(U0h3"YUP-[YQ!Bah7YCP_W
%XIr-XEgQ*u<E@\DB.WmU=X<(a,_m^@$PgL&:.n?8rrGLLW5.:keSNS3TYc5$'Ed.?O((&5#S0Pn;C9I7G4ED_it.I2#o*u]n1I/K
%;)7%"B1PpqAG$)<@=,"5&@j`J.p"K2Uiuj'O=3rkDXMa71BGfTWd`d*i*1R[qd5PY*9&1q;0^\)(HmA_I)pE5MIIq._\DOa&Qu+9
%lQZu]VL8#)*BK3OUJ7iM[rOb)>j)Y6$uAd*JO!0n(k)6$"@K<8.S'Onr9+Hp"cgl`e3OFEi@f.QPD(+?84goF+plZ>XV'BggG`lf
%r=-m\+U"HPUeL;K;MMW0R$.`,Y^^g28)>0:EN=T&RGe#&%,S8`ijVq;#elC=Gi0Ze9+hs\XW3NjKB2113ODkSI=5C;+%dC_*0Oeb
%p&H\*a:-H9'=8QODJ]PA:?!00=]_eSoKk4%\g^Q+*!XjsVP]43,J9LIImg;=E4]`FaWKYJ(X8d3c_F&f$@JSAqCmSU%B-qu"[,-R
%ESn6$%;^?;,G]Zpjpro<[C1YA;G_-Sg:p&\ju:?bZh5`gA(QQ/1j_e8TTYZ]1I!e4jotAglfW@@3Br)-ql3Da!PQ#2r8bi;(!CCH
%FG+V:<noZP\`#tJ&3Qa]Rh,^SH*)%t=2K5SnmrJT$S/m:beeR?gZftc<=kf<3@l"Ne]Q(mY$(%3mr$!dQ_E_0W8oZqNoUcUd%Q>'
%6@;hU\'j90`Ic%gke=TAESl,0p'D'V)q%.p<]]Y67:!Hk3(in%KY2[dAg20iAkP.mEY'^T%:gG_X*Q;H.OLIN:]""WXoo2F)/1hQ
%_ocV)F!q"hk?f-e1P1T5dB/kb(hrJ.8p8.M,DeCWgiSf_j;l'^&dG1_N36oCaWH95+Id^tjnZlqI)?:q%H`Zr(V^hE5O5E9"DWm<
%gXEeAYO,dl\9mJYQoL$>[rPPmQj_DOSt\NZr*#YJIYa4[lT-nYe9An0a8Hm!7Z3Nr9V,?&:$)Q$R:_f)bTm?"6bN8P2B;n+(^pa\
%G!k9C`RLcU#4k)528'=.$&;,I5g6aZ.0HN)<@)fX5\BN5>"SP-Rj%E\.C<_=[(^?"+("Vt:Y">$_qC*Ym-q@B2=Hu,lHL:2(W/B(
%=N$M`m\$2Hat2u,TCN)G<X._/X^24e.tA3bU5!Ng]SQHfY-.RN+WHr#p-.kF(F\h@J*Mon@kf(n%H[?>Ls1B&WdSP"rFXPh&eYUU
%`Uj#Y2U@$5&W+6iIso]3^HO*8(Ta]:JQnoq.fO/,)QcIBBV^L1f>ktl*ma2N-JULH*6Ot+f/uQk-l*h+jqAn$4[GlU6EiMY"adP>
%J]L%2eJ=dsi3;%U+"!n9=\GXdS81A;=&011iglii`.9b#Hud9i]>OM7)Y`'jRl3O-M6H&'C""2\VG!kOKpm):;85]_*+,d9c6??V
%]sQtcJkqd9LO)AO_rOV8.lY=e3rjQF-XR8a'"#q9)eA$C(Te7+iG74R1l'"sRZ/Zj4h5))Hu[l;V%?Vt>gs<(^dM>Cp=61CANRs^
%].AXt4Q9p5#6q^c#AXf6Ji8FE.#oMYP!9A\7<:lSm+/MNjQM[X?:91dJY6`'"R6]Cer42_CO1H4oJ8jA,T%&UePB&IH`$UoIq[E^
%9QBAVSQ!`'BTh,S=D#r@s'=bMAm8/F`-/b&A-`,J\SIq2R^fIl(B%018W.5e>Y`6;3V!HPHCiZ]i^(XT]W+?K33kqN2+QkW3_24q
%o0O(4Wd^k2LVe=#'DdISR+[rrgn.iZab,ASZs&uMRH9itL!5)X<%E7PI;[eS*fU#l4RY%(1&,mX7.+B,$$4bWg6T^G0\P"@jCqmc
%'N$Qi!#2$a[^Asq!5<&6deJ2NZheHT2p%lN[qb[KX3_e'VUOc^PP']"pk+:H:WB76d8MX?>H$%EPQT=5+si-=3TaH,%ec>g=O&FC
%glBlGnt%:Rd\pJ'_#joT&i$a`hJ#;pg!EP9+^7$c(?;3.F%L%i-m*W)$oA2"(SSr3,bJ6l!relnCX1KTpH!Me4"pm%l+D'AM==1F
%Fcp9N6+H9H.I>$*'>7?hgR)K%4L5_Tj(l?S:G1R(E]s?WlVS]fV7:flH*@KD?JB?m$rV_L>;jPnXpH<:LS9>hF.T0iq_\EK5VJsj
%agcatNWD:#^Dh?q<5W:'f-8QD*eCZ=4HKaIl<j5m<Rd3r7r:W_7>5EMaha/B7h%8G6)X-+,?OjuLmlQlosnGU>=J]G/$Y[@,GAh<
%-0g0*k(8!L<Bi]ni@?;NrI=NoK@_Z4FfW"\C%SO&(!=)ll+%aMf(+LoXa'W5S:;VY;66L[i'**G"<i[m?gMGue1>jo*"kfY.u=$Z
%0*G/8@XNT;U+)ObgIZ+j%`u2\V-h:cVC!8,NF4s8(=AP*Id4fi:]NC36S_'99f0qSbm!XC>Ggs.Q<#liCXTt=O^`4=Pclr/5<49?
%9AT>lkfMn:2a=/7dRCm^$TDa*%VHIF#j6rk8K?dU[;m)qWSd.*?&&^46N,'f?g+=3\Qc1.4*f`d3@2SB:q5J=8^OgYM;g95RX[0W
%[U\Th_V8eWmK>n@o4V^t4G-DbBL]0&@1Y;cF5h8M;8G33G=^\Cb-N4HpK=.TQY\:QpKI1[M\5rT\Q<&e[a_>jXqP3=1W3e9Y^Q:K
%7L[G]3?TP:?sH(J/!HYJV;3!E2$Z6$f+s?KUMfTgDFlp1GTQ!5;eRjZDM&Q2#'=Tpd-WgfGK@OlhNlP-8kqoX[Ahd!n!V'\3_<=(
%@M/gkC^G6iA91&Lm$ENuj,:m48bdVFQM(/ZlRCqq3lkpr5>GmM^Ee/7-F?51j-[Cji8eFWrhHc&$D;2@3Ej@/(-S7Xb#U=-7']L^
%W'*!"FL.,>$o(HiKjeq)s5N/lXH34SQlR)Q>LeXg-K-[PbX)N)S>eJtR"UC[K#$.nZ;F1Jg`2qB%aBSJhCsdI?)Tc]hJ6ECYJpLq
%PcJIg*dX]JX+=k0eaTZ.Tr%HQb#S'_L$Z<0ZU])O#+_3'eU/P2LZYffclort/M&YEi,#9ZF"("^Jm-;B9emFE^QH6!O''CInhWh,
%QUQ,`9>p\U$S_N3L`MHeP$J9*CE2E!Th>$\n:g]Pa^7igZYIgcejr2&dRq3>o__tXY=\i3fK\cJ,0>GkiVhb%`Y),WjrF)qqr$fZ
%1DU=N4<od`K/63E)T%4XBp8liilIiqDFQ4`Q^[6Pf^5YB:L%A0C#egZqOE5NC=$M5HNRF425sXU&64QD/3[6q/D=%30LBU16,S<e
%cb'd9%Kt0i'+LsPCI,T!QAM-lMq,mOr%h4D6DlU`,RtmbO_EmTN9a")G&P?"WG;q<cVE@9<tPBT8k!O$K4lk@]D!g467i:`>q%I6
%+d`57Y(LgEL7#]32D+,_c$:uNp$:jFN4q282l"eXOD]PTVYN80n'q,@OtW7s3ci(1MR9L,Asc\DRKc'jGnP8:A91&Np\LJRX8Y.3
%T[jlo9![<1S>]V(1f6NpPhi)O\rSp'r\C6HB9A[ioE!aN6)Q&e<tQ=b,7Y`?!sm"!)b^<MKhN96b[daAX,Jm#=s+t3]1JH-F4>=3
%LbKT8]LZL9,p_BNAoQ)RR@_O&-,eUdH4OC?<Om=[khf(B8[`iH@)/+ebR5I[#eMH;g1tiWcSb_b31S5^:md;)0u!liB4@KH/^l/B
%2]%fi$C4;d+_ep*,ul$))H!JucstTk1hmL)CE*f501rSlVR?3oimg+<&Pq^Q>CM3CaJWKMM#<%4]8Q!!2Rh<cS\!Wb1dCh/j4b'E
%kEW@rLo/@od=n"sl=I_(jqqL/7nhs8MRF>D7u)"FM4kNnh/D"cSn(JO]WM,'P8P,2,`sUJbd]4I4YW<l1"1ce'bYY;9d(JD;*=H;
%gY`oXncfFf,>*WXK=?Y-[HQ2TBP#+:4Ei*o8Ur%=YF(e7p*7\B5>:'*F%Ks2f>RoQc[C=b('O0i+k5^BbrPG\<qlMsoB3rP3]k$>
%KI9!,i!D:s:hte2B=%tp8"J2:3EV!hZLM5:+gYKG7L],:4TEt$(]D4C<uurV9p1U[X>h):(33Vc,NK#_+j0mtZ7SqYf=N,<Att6=
%a!j<>^MiZ2&/K`=NA6[2-JC=b)lJB*m=`;ZXP':^MD49qMTR_kjJrR3QU<&m/D5Aecd*?(\dl5\29eEgiA@^Jq1g>=%J3Oto=5(Z
%&W<UV^'n_\dst2@H_:XW<E,o9b:>(V#b$X_&tl#24knb4h]To?,N@9+kn);-,3P5\]u<4(&C]I20`n0qon8-`DaL0J",rn"Dr`Bj
%.Cr*R-TFS4j1[j']L7gO]SM+!/$QQDFTd'2M_?-04!G)D08*!AI=eF#guS@\2bepjTVVqFI),Q#,cZnX+r)_kjCT[`h.HhMbhG-.
%KS=4MH]"A_E-Kd_/go2g.>O+_';T`BTNE:&I3"GU8]l/N;K)9]2K;<!TMKH_"R=*MYXiFm%l5TW$N"4s"_;6i6]\?iIVp:R?;)<[
%D@=5T)ac8RGonH-U-ZO&q,e(eWA["42UK@c(9ZS-gA+8cq&l3Agjm++hcnoDSfqDk7bd(IWftQ9HIs+8Q#e-4C1]7,S&sJJF.S"#
%fA.+],Lp$XGFhh]M)qFcHh6=$+TEM:5`X!iXeliof)n&*]jpF2EC%QjNNkanOnbjpoY&#IVK>Rm[_1#',amf/@WF1OPat*5quEO1
%*eZ)fK[^GL%`HQd7P@3<3b<=6as#?aR:f'Z'5o%h^sXUEUm$>%#H+2dr;T<gN[qAH1\%N@jJ.L0EU\[fpW^!h+<;_T/iuB->$q;u
%Y+g=q8k&RjQ[DLYK^=C:OV^5Wh8CV3ib0([j0rnkCK8,#*81'X4[\cIC#?L/TV_+oprqF19o+<VbC!Qsna2"P*?:0[(EmW-UdBi?
%\9ll:QXBsMe6qMAJ:NMg3\oU+NZtNM4XDJj9^!S^V5P[=c``H_C6Z_d+S\:ZZZn/0TX0#m5&+?MpX4>)GiI+U%86o[d\UV#oG&ff
%d1PhI4A2-q(]ddF'dip5l702Ao0gPiAn/L7\B:;ce5uhA]:/43pa:j:N:uC=MJJs*-i4=%P;d`Z[IrpD6GqIo"ghsQ[bGhK;tlg(
%PQPl14aX#Y%RE.9jtE)Wr>A42RQ'8#FR,6Z`Wer<\3s'S$6lBpD%R@p(<U0j:nL'd47d`/N_S\=k3d>O`AZpS1sYld2Oa;i"RrII
%!QS;?L;]``L3W&:6UZP@"@sL9>m#l/@[R;&>F-h$3.F/G#c"t%aNC9G!b3[A^S85P/_6EpORi[u4m*qUb,N95)4!IR25N.O8pc!^
%c*L@\8Csptr_,(7<YC3BHXPg@oQc8)<5b0IZFh&gS&AIY^*WdO%L@r39UH<Vg9N_9Q]Y#%9ohg&1CB'lC,PYllq\"Y<37.ukV]'H
%os9?jPZgV/",fj\9<pN!MnhV:n6-)4WpNh@-r<07j5rJIn-j0r_F^\Iht9CVGYF[(+H=dQ+O-%4+9f@@.2s2@XeMq5j$"e<[R-]P
%nEYqr%&8k+_jcPH-Z)'lTKE'VeSoLFhoNAfN=SeV;RFqrH_Y3$E--iW+b5ru*B9=Bm%nf-AIH.tTImI%Y?(H4,I`m\4;qboZH,-M
%c$P?Jof7#(9W[-ScEK`Y./r@I%"/Q&:lO"DIn.n"7R/HU*BA7K<?E49M%u,^,75]A*26UK&4rs<H;H\NqTtbrS:T-0]F&8lkWWFL
%J]s3Xq&!9lg"O*"a=7:6k``CBEBo;*j?SPd[__j^Ti9RtmZ795@f_<8=0_L-*-CP,qmA#NjlgbBh/_cg,ej#'\s+2R9^8@T&fhdT
%?&c9NlYAt\4;4MYS0/msA%EqqSZ3'mY8a"K1`77909Untc0FbFd$k5a'=YceYd`Z/<j^\Q,AHTZjI=qto98bfQ_13O"da)rqu4j=
%=d1*+7Cm&I!C.h2'0<$I,(>nA?pt?W"iu05T<=WIa%9`q:=3<?:/O8kNHLRn+@fu!([0@o<#9qn3ifj@8Quh.4@;^4(L8Yo?A=nO
%j[h-mSR=.GWiN(2c[]gd[>>3E$cA@rQ"&)(`CPbV@:,HN"Oh-Q-+,:sUR-T>L'(,W3[P]hY[.0L64WC#_$Z&o:eJJ=@>nZ?3Nr`"
%UWr7a.X>Fh<puU^_q=V(^$'N[L-:Y!0T`(u11rq9cBJfHB;PE+p.%%5]D;g[iH[]BH8'I+/<6L-dgu7Z2<Nue.Ps7Pl1-g^OVV7#
%\ko,#e:jMA;!g?M2["GHDU^q6b]I2%JT0l;R\Wn1JU4:n`:q3Z?(KaS'tOM4_Rq;+.S^H^(%_2F$qA^C:'-BW)U1r]^]K<>%2oV3
%A9]]+(c5'k2%rn-Y_XL.@aZBlPN`g\AQ"hiNV'dE@Eq%fVt2a082$ND`goi,%QQ=sN!/jVTh;D%`gipZ78Vi2_@,Gbc%V*Jj`8,H
%jo"0_Z4.Hfn*X`Dr$FHcH>-Do9d(NjVX=X6WKo>E4=7TQbGlVOjeI-?<Y,=dUc?2D(kX-S$qBH<N0K<Bf)lXQ3t:;CV?E!Oapp=A
%\A$ojP@b#WolcS7R$A(@-ZV4nE@U\[4L,E/-W)L*)U46_APC"%Cr87nJr%G[9cfcX/bor@"R0tU]LFpD=Nm:</GYcFc;-Y#n2eVJ
%/F\&F]r-)bHj,/_Y9tft"%e63;O`sk9uq!O<Y\U+6d=r`Fe\'P^(O+8,g\s/1lrMRcA;pRdmX/,M1V/rqk"JnDn"[:ZT`4ncf@8U
%O3N"9\!ep5-^2u@[rCbM-V`ZsT-T[o;+>r&03P5''&h=/(p]<%%'ekle61q&6$qfh$&KY@./an@Fi67,q8L1.:Rq3Gpse&JZ0qG,
%c]`$b`duL&Pa]>n*VYu:q2-e1*brDCs*><o,k[]Krn0U,[q^Q830W(SN''Ce\X]9Jr7^d^Z/;D!VQ5\ST*nfTV!=kQ(ekcJF-J/\
%_-[f"D!V%T4mr+L(8F0gbc3m\-X]1"L\gQT(D)2r<ajlHH>%c,CI4.:8kU'l-V49G6^["Lr)MnW%k]9nejc+`M#*r6Ku*FTK49K!
%Q_HTC/,XZ.*0!_E_pcZqBFno,ED\a_otJjm;URBKQ]P-3^.m**G"lY32EQa!aO0KLjfi5dF)nPTDn\4r\V^&#EKqCcIe,LQ)Efrq
%5>Wj$g+;`b#A3S7)5pb7gg^AA2q">.s3=I1)PP)b'.S`UlGP::bQCMVW6qjJd=<Q&(A2fXXto42.-B`iW&\5'k?39f3['6Td:=-7
%(cJZPX1MS0DM!Jl#UNfH:aKt%&dpt1K2sIW*D;ibMhQZPc2#IU?h3UHEH/Pa!s9===Srja`upJQOkJK%BX+:u"I`VJ)cLe^pSirT
%0bZqZ?B\@\Db8N*#6a-R-;Xq@NS1D3:IWP^MV&[jgg5p]Ub\0K?sX?Pfh:(P=E"ni7?3gh?QVnI:qm2taCXRf?N)qs_E40Y(_*0&
%Chh6C8,X?JIa[@m$h-2FYpFmGe)&]m)c[C@U$bdbI1_-3g;YK?6$-';RL7XLM@1?s+\E+Q7=]G#FD<^?T#j3URS2?/"M(s0TT/]7
%;4e]ui7!0Sn,0!GUqh,rEt\fHO,X4iiCkXKQJ'&$R,:\bb`MUDQ/$Fu?UZC;I8c>/%Z+ML[d>bJ>Z(\V.%Y;]&+$*7W@6f^FONn4
%7pV3*7WLBKVQWXF;lG7VN<c8EM;9MuLfpVBe!gENU12c@Te)YTlH__!&XYR#kcH<WNXq5IEX-&FlB#b01kJKJ8K?qOUI/gj>ae7S
%*`e\+9Y;r,1n&a.^JL?J"#]Zl+LP(eUB@GFR1YWtVlmna7jS0CW3jH1["K`7"ZO\hf[i[+bH#LD206crh@0,S/W+J-6<sUqlbO4I
%T_+.AaPr>3T[Mhod4-kh+C0$F3H5<rcBpkp2b#C`i;7M4?uoI=a'Fk50aKuhom.q(RSddAL?'@dL13E$.SBlS(!8fu`i-@P/pFij
%hOoj3hE0`A!0jX\C>&U(Ci9edBqLuh4'cCuFlSAX:JiQ]QRKj:7^jHT":R&m6qP<7'u)tNcI=f@2`3XZ'TQM2h\R`5'IZN`mpq0#
%1lU.m\N--!pM8.O8K/o.>6b")#.P@U)6g%QJ"j9F.X9F3+j#=^C5_gYj4c>r*:Gb[]2lEenPbN"X)F0B<Dmeld,?EG!4HAS-rF9#
%,cRP(fQG7CMHj6abd,U2=VMX9^XL$<`sh4_bV0#0ItE/c$K2rWpVVG(M%4@/io<c)7)fOMC06AE$'KUd7_'8'm-d@:58380.`7m#
%=#DDldPsc83"`7=HKUg$HdQlakC7"oUlK7SP$'h%YTb7qnIQ*PQaA(7$kO/OOA-u>6XEQfC6P4JNQ3fedHHZH'j2Pj$K,#8'pV^?
%kgV_nQ4Q!)kS]kPCMcRiWdBIu<#mD84gfB>2NUS<5;.F)MFpDPj]P#c)U<ULLd@qN#2[=10RnoQ7YG;DF&kBGF";kiLL%#1n*.)k
%:^1S\7@&Us"n!-/1"d5YK4E@EWR_t[dn.r?lk\-FbQ^Ps6htj!>15$!&FHDY>=4A7X87[nc`/=7iO6Bua4+gf\'*18ms3M,qA]d`
%\L';,P,M`\N;&04!tWb()*q$W4.I9$:N'8%H"TOAX5$$=8M9_iCHJ+pHdn*6<39jbSWpl,2&??[=r/Lq7R5"m$jhKRqV(KNRjM4t
%jq:k(qB)E`&Xk7r!c&Gi.JnX?Rt`-&WKZf`a,bUKd1A\/nGK)='2+3%od@!WNS-n^Rm,4B=H84QV&/`Y."&MK`$1"n7;*<L!d0OQ
%LX@9#P/PKTa,bUK5qIbB=>--<W=ZW-R95-^lo#<SAK#g<[$b$&WGq^-8]GR!+XU6a6nAP%=P8JXJVFfUU(Q.@E`UR!6Va^A9q5;j
%b/)XVYnE&L7IKoC5pfTE@bmtO8+R6CF*KN3&.siI,h<+`*2sIF!t?Q5Pp81rjfF&9$jEnB1biG_Gp!`!bet\^Ap:H-Ytqt^b!41i
%C3[BT*^@"_o%@879WUX==:?+QZ4A0\%OHp",IS]UXJ-kmS60]u33`rn*?W3l1hLs!7qL$Ib4[=!>"gK?)J;#-E8O].</-Q<N!?P!
%;!,iI#T\.<8ZWo:&M%K/`*t-NoqI9VbI&,#$iD?U2LV74Aoq_+#->YTb0r;,dR#?oUAodL(i>+Gn#?ZpQ#,qm+VjDJgK:lMk1Ja!
%LJ3fGF"5#l5H%0Z:f53;8dG3Se.Yt"C*$&jj63=S=cpQbJ^P*,S,5J<[7FLD1UcO^+UaB$Mf7I6PSUd&DDed,1:#WCL48$PrlM#%
%em-1lDT6Kmr)T)@]PH=%Hem"$Ak8!^Jr+>+\LROVK*q94BP39q*tDak`3W-B4ffoD//D,bG8gOf)A[bY=3$G]$NL1VC4&nJ?nCtO
%K;9hr63oUDq?__Ic8Y#V>r0'-;(1]4=lYULK8-lZ[`D+7``s('CW/SU^5*n;j=V-gETio`kU6X6EF!Vj0E(f\&'7Zh>p'I,<h;[(
%UXC3.Z*-9R=uBMd:,`b0bGehukS1ZVcmbM+`-UK8Cu(mIT1(;W:=VAb`Du(;X-#]<=mk.NODho0'17bdP/JtM$qc]e!0WM;J2Un+
%`(B^JM2V4g!_Um++GbHX>J,(Ygi!9;L3&=,/MNNRd5Ec:86qQ%"7!XI9pdkc.;Dced?bLU=\?oXZ8<G_KrJ)Ac*'J`,k:/$rb70;
%LI5hE>pJ9A_?:Ic--?WdW"V3RM8b9<iC;C8CU7"b<q9]G3gVrU*.79gX7MP.4s"(;>T,6.)kI+\e,@/2q6o92'rQX=kuF@`6m5OV
%k2_E34rjU!+=6TQN*WP#P2VK6paj&$1(ZOpX.D'n`CGH[AXeLM`gV`0&0Zk%GjI9>j%>qe)@UgBoX0G\nrg'T`fRAAor3M32"O&X
%+8\PMjdAq)rq17e#TDfUPO.a<4$V>[Khnj#@QE?_nXI74oMTcK)l"7(V!=3_P]c<oX]c,?IbK_1]:p2$OTaR9<4#t$:cGA0cq&s.
%44*4cp'R.Yi'_iW]d)N5+3lK-q2WM*DseCeFdaFFZ4Cftamc1eq+9?(S)h"m`p$]bC_ELZ`7It/%V@.tW*,:2@"uU*bgtKF]SAg^
%Ut3,gVfJsFagVWlUrGVm_Rk+!rZ&MIDQ(,uY/7?UffUNa'hR_+q%jktqEjd5)\5ZDG0Qss5G:hKB[8W!NFj&CgjJTaf1IML3TN0I
%>0fJ<LX(bOr'M]D2TJW0i_FStd;j!i<l\h3)e-2+c(%#i>m04R+:k?GR>O9CW@r(Oh9'2?a5\M>Fk:^4;"]$eKZNkhTtVZ$N8Am.
%U3p?s^o\>C@q[RCPe?9iN]QqXVafH(1]@-W'ATPGRk;.u:87XVZ88ZoWO02llOu[5A3tDp;0+Wbl8H["-XH_qAOash?Su;+-HmF"
%AQ[;:MC8S,]9Ik>Lpg$P]PSupQ_">V1J!O\3@Q<h/=//9^.cBTq^2:>B1_1:$3\bJR8D^Ee=(;AlBV)./d4P]oY[3#2]!3m-Q*M-
%oMV(C??J(n%RII=''3stW!g9),hXD3_t*DY51mclDb`;0s1LeFc[D!9h`=THC"r7G[%[b)*)5W^"h5XrDa>:h8_kYJ'WMA5.0`<J
%H@qQ]mW[>sOZHXj$Yi^JnNK*%LY]WLV&0e6OeV*klDYFb-fFrb#.&1CoP?n%W?@M%s-8d:H3%grU5;8#6p=*o75`2%ILbgs7<D)d
%Tc]TbB,V'(^C6*cnI["``O9l[(I8p"6`:[aHD4$^lm-8:US3Cb0uj@Yba]&I%!6r<($V.1?$`.Bc!Q-D"CPP`!<Us*8JUD3f`Z-p
%lgXUc\^fbr=rRs5P`;*)i3,P:^Bh4Q2X1F5\WC`dQQBjZ]NRf644Z+KL6*859P%fkka]`UW9m'"&>mcN::"Y"<GVZ=#W%HP8)9b7
%Gh<\*P9YmN/5^#b$!#DKOBbINK$ZjG&081Cfj&!WF2lK601J";\Efi%UC,+_i.Ys2U5k5J))W56MUrk?aoFu\q#\,<&r'/`?m>:'
%q1m3]e>^!3XC(kUcjFtmF-W4k0tC10aO%[p]oj4l6c*V08R;ln01E:G@X^L[!T"=SA:e>KdUJq_mH*KA^414=#+ZE5*PFYg5Z\9R
%AVU$sHZH@J'9ri:.Kes%i.0N:(co&]NCL&5&!<#qD3^T[+R)r3n*"k60rWMVqFEX.@q!rI1$?l1@al/\/rAIrEI'L#3hJN;8(7,&
%oV<.SQGUP3+EHY;;9;$gc$>T^lIR1`m'V3(LnGPc<Q`YH]J7FUaTTRr&rg=4F"t5lQQNZm[!<>0r%&pXF0ALdRYA=/7#n2Zg?Wc5
%d5me77V/;S1_\-]R:u+NdD@u5TGS-35&=uZ-V++RFFMZXM2"OkQ4Imu`ThK*]*3l'dF?dbdWWir<-g;Kjf#_[EbjfB8t?kEe(ZEV
%8"c3CHW_5?aOH.kf`sf"QjM;?;faiSl8G4T?W;#S6/*KB:kFq,JHF7.HP+CfOJaZd)4YB.A2Ooi9MXD)A@($7FXo@Lk_82W0n$d2
%iib=tH63e5@nAK]SZTl\Z<IYApn5iH;gJqtGuHarHOUc1X]-)J/r\Q5+.Em</]b\#c$<VhlIV_T;`ZsXb4n*n>')Mc0q(L?f\'M'
%0)KeTr1qSqBH$+iP>!^.K11:6O@=XQBJI'QQH!!FNtM$-e;>pg-C0'QK^fNXb(36Z%[\0`8Ptfq$hL+4;f^^,GAAAp+hAX>O`^V'
%0n:-Fb-jHDf0Jclj'^R%WVi]!6Y>$5kUa@*lP)q<#=126$.VmOF$;PJf:__n12.TXTVD(p`l+KMVH.'15VJeB5HR!S8;!6UBNm;i
%hk3o_<R8as725-hD"@fUcE1g,g?PCM)$T;p=1S&d%0L_RcjHEq$1e0h.h!TMPeO<EkWjCR%*AI,Tq]Le:8Nq1LX6ERf(+i:e3-S$
%(\,*V+FB+*mS0Y192U&=Gm9R_>>^k,Kpss;Kc(Z7JeBWX__-Lt]lcL'CmRDpk,K;.r+e^X8/t7qYrHt!=DmWB6aLb9OB25"M4sX^
%;4%FC1,rZ#l,0KC.;F#4VuHk,K`\(GIptFERe3uTn0o8;)a(G`H*S%A\\b]i>_lIo\k_T1<Q>Dlm>:FUVi\<=G0C<(YGmTI)b7)G
%'G".FQNO(0+UpQ>*<EHZK6<#U]g0aaPR>E;_N(n(C9*_qfF(8HB7(R+,b<Yk/=joc/NR'IXl,9;%U2uW7jO[iVfJV7M[q%$Q5.^d
%66)Q9&a''LNaS@+_bFaO_/e^`-O'#oH[h!/G$XIdVD#53\^ISK&ZDq'=#Pm`VV$P_VpD:o""O*]?UA&")q%'De#K9eN9*S-M`a`]
%PGAJ-kksM^O&ph\O1o==5t0Ug,Ug=,e[P[oZpM)9fFgVeo[VBF=LRUuQ4@RiQK%3Xja%%mqKdr_P;:I0nc<KRCNRS@/%$?oX'nK:
%:(O;%ZVJpqfR[`Mno<B4Rhkn[m>#b(k:RV)b^9DVQ,nRtp,/U/5J2TL949=.X^lXm"M'VQ?6RFeHRX&qe^SD\F3Hu;\KLA64?lnm
%P$GQOQJ2*mIq.]=W$OHD1^h&#>)utTdVkE`__UqX=q1F]?A_AJ/V%?gf=uR-E/Q1D!Au8$ZG4nGc%\0Paeee/"_f&i[1Wj-P-V*M
%F.NX("/#&l`MZ=n2c7ms;Eq7K)iC[g6IuJXq'i=>YIGE?SS]'PQRo@d<raNA+/_a8d%_W1n%;o:(FB,[[G6T4C83@TI<E+N8_8n2
%ojtu&nnaE(8q8J^'u=12k$t*V*Q@M1#V2?:W9`:1r1o;"%`B0qZT*>)*9Q^HMSi&hE'sq_%uTF-&*R!\:`21in;saAe/Uj(YC13M
%H8?f:pg,b&Z_3.MlXR&#iIqKrON`'*b'4JT#$2ML&nf2Y*+oD+fWl#SCb2K5RV5,q2/_dsQj'nFW*=o"M5lSBT.?!>%'<iZs*AOo
%);QRujA5)++(]j;U$cFY^+$-1s!5^aTSSP2lq/oG/5XC?>_c-n$.aicI4`ai&^YZp8EQdf$f]PYF)SN3Y$qY#51eA(A@L"i/jlf6
%+[<W>T]!e0W3VJUeR'N+d9^!QD.qc?a^s.&r,#O(eN]1F'@ebV,,l3F'^%=;%Yl@[fNXIh>"qq]Z20*3k9k8Qbh.jmS@dn#0ls(O
%^@f<c8!sC@X>`did#m>m!ujtZ@0,=*=EjW8eChGCa_[1aPMQsnp(3gBZ/bn&l9d-kq\HHCT])`G(,V)68qrEEV"VRugC1(*MT6;F
%RKXKP)])ENGKiB<iLMA<?u(<-W(:l[ilc2("[>gg(o9S-.[Ou6Gd\-`G&)6=K86aQ/90CDW@-02m,S6%5Sm[2!9rfBGa$C63t$of
%!B.cEmsiol`E$\?lKcI,dW(N5D`r=@V-oFsB#Jkk9\mqj4J_?#MlFut<[0aP#mNm/dE'.[pU2lSgJo^7H`54jFLA@tMr$0hAFCPV
%pSJ^M8%c1ZHUkrdY"s.>o8''L\31O(!&`,/e=0[XB[NIWs5R,I-T<<)*DgVH<l0VYDFVq"fg$?a6LoHl1U9Y7qGCEs[uRbqR%#en
%V<Bs^,'J$f+r#<jTXh1?<2fRWD<km2lF:uteqmT9Lp6M`pBqRS7N*M=h`@jX6e(cok8"0JD&8Q6P7-&uC)nTh;RaXi+,;2u4JF7W
%#M62!]31tg('MX=<6`E]IM&gL,`qaf0?DM/LR]*f=5fl*f+-QNWfI849'I"rm/')6mGXhR[h@R.9A!u#hJpa>JT!#gehmr5lE?22
%m7+TfaXgp02gb@f6\^;g,NU#?q[DkQ7>/f9e^0NA'7tpFT"_luq)1,tG1+8W4Wn9=DWTPim$R.X9/Zkb)rUWEWNg$l>)V^@f3oR?
%oF]n]>q6hu%0LYjU[jD7fsp6X?lhcU@Z>_$AJ\LNguR'#eIoZVW-ju*hF`2S37L%pW9CYFKhtgETB4L0WQp'P-Q+1d,b*n6;Z]7G
%mSOpMQ.5atOh-k"#Lb7Um!p@tUd2W\jZu*AY.>=ta!g.oX3#FUk+L\s%$gjjZto!<Uq!SrQM;!J$PH#+89\-XFg_1$AOgc/j=!V7
%hU(=o6AWnl&Kn1NpSkR(X3Ts\LDUED/@t`.A_4)5ht-,GC)3rO!$r0aODG'5)(`^]@OK+h`FcNl^$F!0:`?4E>VLfb-&\-"+W.4M
%&m9qLm1R+udBI\rRG`kf3OBhdc9DqDQiMs:_l2)2`pY,H9/;Ze;RH&?]KK&`:oLk!4pm1`%]5C`\Ik^K5u5_EU(M?jS)55kTh1=6
%>u,HpM*s.jbjhr`*7aY&[^'\L;WE0"P;%&rK?]fGFMd(g,SYnOUN\IJ\T2@"igE<&VFceu2DlT9^(Wiggl@+RU!Mpr4=FkiEbJcN
%?;]ioa)<&pK90fA)f(s<Tq.Qu*b#i4f>97c@R##KiRBmTbXiX/YK*ZBKc%Nb>qs[]'R#WCn-]"giS@Ma9FlrV)0qU10n!W6T'o'p
%gNPkC_fI.S;0t%L-qIn)WtA*6Kg`RR3];+CUpmtEE0?>S)4..@O,=*ML#"o5ekSW"SdSX#ab'^q/@Q#[lXUu8,EYo?^M2<nik/$D
%nXqo7koukgn\rN)0":_pW(MHIR,?\T66oWEI`^rIP9QN'_lno8<i??&@]hA#aT]:[O^TLbHqDL'VCEb:695QJ!?a14U\OF(kBr(9
%?1U==(>j@]f0Yl+Be,7?-Bqn&<nftj$%:iOgXpAb25VnNA'Qe.,)$LO)>g9=V$<fE2c#K)QdO?<];m"=K32K^ZR;ES9,q"fmjHq7
%i!a7DI!*sr>5ZBb^+_u=n*TL_`ug\%2Yi02H./8>-Qc#2Y*/^rTGh'Z(1b3Ne$kTsi!3_C4H"`7Y\uEQYGE]K;H&g`j)$"!31[&2
%pblMh<BUl*1J-5Ej&l=IHC*j81,Y#ZoQ\BQ'%Il_-U^m8jt#%ARNIG,E`M3U(\<30Sa#8gkPKM/[C=<g^[f(.kfYM'Pe?HAm$9&I
%[Ai_WF]&tW[+<3J/4:9Z,h9O1P-DD&$`[5]c_-9fn6l!"1%5t7@_jPRo+a&JgIedFW.bu"$q7&ecCR::h:\DA>rb?TQJ3`IGKu@0
%g4V&Tr2NqDM>49Cp+L@P>4PQf\KC9tC*rXX<07p"=t)]qK*&$k9sVoRpM.sC!4>8M5bM8n2AJ8\0>Z$:UldB^7-4\a6Qmm7qV21<
%b<NVOU[X`AGsIZ7[N6JB$F"F5IoR&9aE&#()%QZAREdpokH9b40Bk0h5`G!rE&@M4]qSPN/Xd7?J3Kt3@O>LSK^&<al8t,=Y8V=u
%=45\QBMmUoOSE7[EgHP5cDl>\f4Z'U?`_fu.D!k.3jhZ]@C!kkiOW;93Hg(LS6K._1La40HUP?<`IZe[/^/pF+-]E^o)?l*Pl#<8
%dp_Z@<or04&L9oBIp>G$_UIhR\KcL1'Pu>=MSqg4`Q>RK;%hO;9q@uA`r:YJB0G*6Br$NqOb3#*jcI9DgN9]GesB7qNXg&\MR:4\
%999GdBYM0I>YF6gf:2%hT:;ia)'B6-$I8nu6;ZAW#MkDZ0e;f[HEG6+M5j2!ak#hT['O9l0C3baPjTP`s+bnI?qXN,j+>"JUrV_4
%7IGY(ZtTjS"kO=_[&AOh(J>!S5;a#qbpo(c.bslAqPnbP:O^'R9t0[&>:4^&=Z>[9!<JA[GJ]q>KE7l_ii)WdkKfWgMomXg1E)*c
%Bs#Gf^c3Ur6u9BP=ujsn?r:k),&!IRl@W5),(t-h]AM,4YcB[@74J4t.)U3GfrYu)KtWA*+?q%'"gNP:k>2h=+s.&L*0!D!4TZ(W
%eb\GDRfR5"dT@lZRuG"fNA&@WA2F.8[a#<Uh?@3?/uaONci$gdQtA(H-!q.r_*tNd)uT5D[9k_D-#Z\q+@R^?]9$p@@Vtk0*dDN<
%<G,u'g\QV.O!dbG8A"c,9HZ5ZatQ;'fd)^D\=<JJRkBViL^e5?>d10b^QhDZ#MP>UaRe8`cEZfCNf_Q-.8hWdg1.k:6?f?b?1Y1=
%lfh.(C..pZYbco(6Njg;]?=:@0mMR@gEd#.nJhZ>iQ=k:g>n]R+0;5/6lOOkJWG98e\_F+F_<>6XfHh`BJeUYf:CZ-\@kZ680EdJ
%'H&34NOMqtj*9Y2OF+sqaeF"XCQqa@Z]X#,D9,`;J!MQRHd$<X6G?dE-!aI;*Ot>pS]]O]9bd6MO>HVAYTG*J]tbY-Y*Mm08T@"a
%75nD61%nm@l=GQL,r+$3-ar0fCW3Z&Z*Cd]m:N3rCEd<2WSJ2!/ihDYnPbXP"VT^(/k$K$[0=u\X]-q$7H9r?B#n2<nPZN)(Z5P#
%-ju^H=?2H3@:Lio&S!_WOQSL`bW%U>=+TST3mZ9e60FC/BV[IaSj&9F9#m4u2FB5U'CbX]`%(8/f&A4VgJ8!4q:*5Y,S(A*HS%>J
%dI[@o/pI7l3([,roVOQ9V8%GQ_P%M-//s`g\?Ya_"k7_CLeb"E$g@(^!gIjmcB[9]"s'uiU(<+g/>fQf\$U6P()@-f[BrR#+9U&l
%]W%O>j"3Rj@,5VKU+ZB3#t#\]6CSAGc%Y)3WrD(aiba[#M"O\a$SeMe_T/gf@ETM,Z:JAW5k:hB0&L)k^Z4.[VDg#U8EqtiZAs'O
%F]hE:3C(23V7a`^e-?5cCq:ilWZBGiRjjsRaP.NO)6ie_@n8Ykhd=^jEP!Kb#8q)[%p$897d5iRiuo)4BH,\$Te-6IK&ghXB4=,B
%2%ce1V_k>>m8XZamCG(NDFec&-[8NRN=0hl"XY:`;qG2u`rM[bEBJ,J/5/[Z.GG'c"c8rC9fGMTXm/QQX\K5r')[9eD/RR@edQBp
%q,K4r!*\-&dNTXD98,qM#186Q3U3te:HO$;Uk:0%KPD`[[@TT'M^$PB)7O.T75JY:Q=0dIWJ,7deR8IN<<>H*GmH+KE]sW@,48%?
%k9F=?5u0p2@%g8L(t1;)$$D+W\!l<"3nDIqoUns\lCe5Wl:2#"=CFsbF#3G5ON"$c],?mqW(!^d'`^9Wa]eLja#Ki7Pp?^8=n-^?
%a^*qi,ksp'l>jmVf`JB5(+W`%<,/lMHD#]PX?phTbcH,oA^$_tU]#4&njPqa6Pfc(#V5:GGTPg1+O77<>+6(uQ66\@`jMs,jrpWA
%@3bJ6P$k"PrEW-uLDZ5+8g@M):%Qms"S6b&E/]`I-0gWapDLB?8O*o[,QrG]#V&7,Rn3PfRU'/':Z>[jD'qY?i;*<+/l*4'kS66p
%4S2ksf"FfH3-nYJYFbV@-m4ob:[6=,QL.C_'T8:0pFu7X&jm-r[W:uOel?*AYc'?tPjYK(0;8lT00S_fl0-T9P8'#4*"ldZ8EcF4
%a<3QS>A=#.I.0t%AW2GU$4LF6Z6-&@2as*@/GKqN'SiN-V8"rHkR1T,[/$!%<K#(\AnZuuOqO\p+heZU^q0CJJXAQuC7RR(Q:K7>
%-H%.k-OXL=eru]g#ndqRMl'.J$f)lO#?6)a.Js[@HE^idr(uoETURQakQ6U0T;+!dPTjEEf15`C,PqS8nUtRcKc[nlSlg<cNu5aX
%G;8sjrYR;Q<kO8qCugApm@AhWA#SHl7NU(5/[IcA:%#+05,+o!_u\-@<c9J0,[leY+\=%&XI^UJm-/5?\#XLE'O;sV_Rt>9X@3;-
%j*,f'Pc;Yb@8("l$(J`*Rba![di<7!_G,`l)013.UF5=0TDletGE(4q+#u2OP".</m]>`l$#jf'c.Fg3BPAmD""&T!Sa7eR4<r\B
%D'ZN'6g+6(KX1CZPEd_PYnRSCO7f4Pbr\L=EKDC]Q<*GbXaBfTocGdm@PUb*@@J812A)j^G;?CAIQr>?)U/fj(R`>qgtT%&R783f
%C"-#:=/8dG`WT\D_A'#7,"7ZYHcB[=gWV@_lRdL66k>9ha<,D1PQoS@MdE$Sd7%$'RnK?[#V<BT?^PLqJgWn]QGu6@)2D$3).qP>
%g,o?d[^'gT^%X^Y_.(+K3FD#-N3NYC&>%_ghPKC0rc#F@f@9#e40tKX5q:6nY)..%Q5&Njf4]UVaK[;]rCa-fJK.75V_)rrSi5.G
%GbP2%KkI"Akfbi0f19R%Za%PtfdH"]_K)[_4OHmN;J-8h)[JnK1(JZj"=<)1T<O_S]ui+TpaiE_daC*c(,NFp)*0E6^V3f6)uW;o
%0cJd*Y"=P[n\p[CI)2Zb9o02r/#oUdAdh$2Yr:-O'YA;[DXQ^%6/4*7j<LH./&<8p['kV&qr=HG4?]D;Ch=`BEpP.<[n0bHe)dBf
%_T"$V;PmBhfb69.g,H;URsr#:^9Vr*P%i?;lVcDH7!G?kfpU$>V7]T9l)-Lij$mq!&%d<0n#c<a6^CP&])l_NNt<).g&;)=%![5J
%2]GRur*72_W'rC#9'HV9r1]X@k,<8'qc%^4XK%7MjhaMEF#;BGM>i3/*,k8d#Gg$=*%^$W7(ArX[&@IXU]0jFpJ#;[&17OT,9WMG
%ELR+'@3R\Rek^A/'PEY*K*O6]PQ]3o)G\aDWIX9r/1Z*Bjrq.MUhOIMOX0Z&Z3HG[5Y_T'k@j$`c2;:b]S7\rA%),kj!3/KU/QrE
%)85L_/SE:t'4r4[mi%M%mY,PJ8CX(rSM6I-2aO)m,R*r[au2\IJoCD[pdKB7dndRX3:7PI&aQ#5hl7SWBu1f-0"+)j90b:;En&[j
%.UI!qeVq6sU]+2HnpijWJ4@hPAi[iO<60cL"?2&F(Xjh_IaK"%0F&^=EYJBt=b/r(MF\8h%3e,@do[3uQ)8XFf"B(`4\;+TEZ&JW
%.HE7c;&jVE#-`J<b[``CYbt2M^!EW[kgURgWSqQub:%7[Uj:@(nRH(mKF4b-M][8LTsOm@U1JTOZ4YZjFiEQ12oE4d'E#><"D?(t
%ZU3!n@b4=XM^*#'TMqtmo=Zd-O5&c55M6Smle*;rDi/`&@2'2EgGQ>!H!?"0bpH:DVHFlA=Y>#()e4MZ@d<+GpgVPVgEe(6<>:Fb
%"IKXqLf"'+Uh7q9#U;m9G*l%+RW;;**hir/cdV%',])UqH"BB1<EqGRA7XG+U6MGEr>,c35q.rV2FETB9;lt=#IJB<Z+tcDH?.)/
%YJ$F(<7a`g6MSf^as_cc$mhVC13N4QU[S;oT(.mup+YY9oDr)O<sh@SNgl]<=C<$%CU4-95,0/AS?I]P/LULY_Ies#B!>-O_i!^a
%kC_8BK1<'LL9WhWN!M/ar9Y.Q@7SK0r=RS!i-a:3%V`M=#TP=<TFXr,FWk.Fr!^S`3soZqXr.kA1a-3(+.uo0T'grT7-3dsb:^Vd
%(L^)4FdlI*pZW%.Wmp8FFHF"d2i_AOa9"bIZYZdA:?fHJ@dV9A6W(,q#<PDAW<pq%TkC6M]4BG.N`]85:cC<3,Z,S#5Z,orM?,_p
%$5m%-3pK&IYe>4&<>h^EiE\5^99Ia7%4F>$l0Da`ql%-CB[abJn19EYYE!,a6GJ'5\uis?C/]ZPm=bp:U=SFdV(oS88`!1kPkZ)C
%>"eqHUY&LLe$-Q"G*sbOXgkAacj)[H9NHT\p/<N3`jc#JW+CYi)dAs2;r;[]1a`dsd]jfnZ9rGD6@-#(%`tbBfJtHH\0J>QSb0>'
%8(9a$.O$RJ5J.MFD\i<iF$Q6en,("sm"gMRH1?'2qeWnlJ@8Y5g"$1Gh54QS2'B==8KZ!]o3N[<<pPhN73L7\:hpN&c>GA%6t8<K
%I8#Cs&@i#-</h0-m@><*++rZ2ZL;*&.1R#cH'(D=8+,VXhC_ST$#'+ie_4m[\]K+T]gF9ZX:99KPsY7&kBF6l227sL>r9uA1%t,l
%6mS`lR*%6qq<dgBmh*`a7/8ekM8g)[Cn`W1FPY0K$]02g+PLjV]eH.Ji>BpUL1ncH^l[mELIFnrnnsW"=f_XL1#M-*$uo24He?C1
%EM_I`*(A6'P0\p5+PB]#1/f5,&,HLlf7nr]NoT)2M21m$]U0;U_WkFQZR*oYb;+6UBn`\WiGkGjfn0rO45/q]$aFCKdI%Y4A<<>8
%C#tbEDjTO5FfD(fZUaUd,a%$oGS)^"/O?frGh$\+lGSJ+5[I&rds>3mK1F0eN<aFo\.f_t;O/pL)I0?k(KHAVc@SS(P#Su^!dqm]
%Oa:7X9;SZMV3o_J.Q=>lC^pQGHVj==nFB9T7lXl)K_qg3b9ck^AVk[T31tEgRW:I@_m2M)\o9oMeVWZCUkYpWQ<5OGT)EtM85Q`4
%Muq1:k`7]^f@[#M6RMZ.=;PV4_o%iaE`fu6/+Y;s&6X6,p9^;FAH!7%Z`#3B=A76RRWst0@F-Yg4t/4S*^*[0Y8'KAg5C]MakU&R
%)aDRPRX3MT0#4E=rYg8!g9W;.ZCH)C@GuIT^mB"mA1j)dQdrc]na9Pf!H5J_T+C2RlK%NlLAoU5js=g?VQZe:;]LjK`j+d>5S=H[
%GIQGQ+hLoqHutX$N@OBoU5MKUgQlulA:9CABBES]ETpJ9RBKql;7=GMG`B)9=?RPYZ!qG'/cQ`#na)VK+/PIDj)\+go,t)=.&6FC
%oL^q[PqS!B4U*<4MX>riZ!5`cO+D,*H-N,o-_K_!-1<1('&,o4o8Oqd4^lgh,b9b=aJ+i;[0V[&jX]-a;u-eV9$;MeR`^5$3%Yn_
%M6+G1DAa.&2[3Zb;*VNkNftr"8J^KlVK*p[iZ:adPurtRCqLnOgEh.Fg>*N6oJ_1u1F_*9Sjs>=)_'+*B/MI0Cp%Xp1BB@oI_Ha`
%,#%R9`f?q<-<UaN2CEku\\2m88Rd6(@6)q'dhusSm1@EZrWfLGZCX-48kuQ^c5S2<1F24/a`f`gNmURbV"mM5+`S7=R/OIL!`aND
%KMs?R+.,a?.PL8e/JT/ZH'^u!26@3CIE^G#)E$Xt$?'2i;d8Dg[sa<]':%;+G<MsP=%AuahWS;AN+E%UeFk"AW,3ehZdKCO<8\'I
%G0#T>cNooY5+l9X5Y!.sb"%QpQ@`*2BoU3Y,TJTJ\L_!k+hqG_cG%r1F?.Z/A>V$teut;VK33"BE?Z*'ZAfa-kl'ZHIChQ%Hk/9u
%M>UC_!Ier!&+J=*1*?*+j:m<\0-f"%Dq-8'OSm3N1>!&9gb!od_#gCO>RhU2S7YiNE7F(PRX>o5+D#MT5mO6T@'#k<W0E0Onh@sh
%?49TA7W*O'KS,l\/\[OHC*T/-WBfk'k]IYtnpDG$^<&mj.dG\Qg_L"<o9^$")f,%;N\2-f47qs$)O,Nb-dN,sJ2]&*L.M,3\K^TJ
%BjR#mQ'+`bWh_`j^>>*$,!F*:M[/mWP,>Wa#g*V8$9->;6Q^\"qV0Olpf.tTWg.]7O%F[kTP9[J)J3Eki>Pp7j[%E8=Z*Yk_%-kf
%4oT=6r5_tS52`e/Kr[8Z;fQrK+[td#iL`Zi7t_E6:oVf_Rb6D.!+a\L9YW^=4;-o:AtrP:DNpn<J^jTV^Y9r*geu,>Qj<u>o4`<*
%gb=$(NKZr'@DW-mjXb(@*ATF.)F`mV\"(n0gr)8PDV.fqHss5'8VCMrRVbD%[<l\28K3oMI9NVS0a"Fn?^jmh&VagDJ'eMO6BXF%
%njq+rR)UKT$6+:h>)F^oNs$cZ-Kq7r57uD;,N`JK*eQRMiE+)fpO##?QY2U;^p#aea7)#63ii41!`rjU$(DnD+hm<));)(h<BTFk
%e,3AdTAjL%e&HWD`\_X'>Qd@"\-*;mK5sh'<s.X?_"H.VLMOOT9+]BXFY?Fa%Wbt!(2igR!Q=]NZXYTMO,:VC9oLne!g3<hdkZ4J
%AQg_XhOq3CeM5JfRLeQK`95"E3rNmI?t4H"@!iGmd@DUW]Zh6=%)fDka\@&7_r@1j&U*Eo0S5,4#8dRTf'jrKB/72,')0qQL2tmc
%kCt#`'lIfXB=il]CUpiteH@N@<`)O56MON[7F7Mm$(C(9_@3L2%3Zpj&uF^$]-rZm_rgH1JK#otXDTaajs\5]ijF^6W(q%!KNuko
%;,]&"bF1ePk-.tT#ZWT/gbgU_(kBnF7-lc7AlLn.^BoV";\@:-9udgA#R+G?_J2cR_Mu5m.UEiAlat,7WeOQdhb^#e<>1m8Ks-(c
%WI!]q@>-tSECI+?,62d>-ksoH@2(3!\OMHC2qqe&Moq*ZZ;b%RTF@(,dABX@1'8F]5P:tJ_a4Nq891CV)Alq#c6-)_Y:u=qQE@6G
%IkDjJ#V&73oq]K0+gZ)+?$Sh(Coot!An;-SeehrOl>B%?ebF]1MQ2<5Q)#rP#93-+I"h8c$aKC#:u3gc.c4ecN3RYVKjBU/ig$i%
%G%anQ,04o6I$KsW`!\09Xp`eVE-4B9fO.#aJ'.==Wc;p3=cHDK7_paY4mh^4*2A7aZ>a/ZO#Urg<!ttK3b9G-.o`HSm89j]LXqNG
%X.^^JCJmubJl@fb&KEk_4?Gmkqp&_Xc\Qckr@&7[-sG/9Z&q(:a-b@7iW-.=jhsIn9Nl!RP'EAuIKMXr@c?:GP?)pD2W?I^C2ueq
%E?QBoZ?DqRQ8=-T8S(B!f!8)_2<od;ZPKMASlEOp3ps5Y=qNdFkRj'2/SJ@rr[0b@>nQh7?=f>4/rj!Oe)M":>9Qc-jF;tqSW8Re
%r:t63k2c98`<r,i7H(D=VG&>m-F(2I>R=l-]J.1VdTmM+0V(6=XH7]haa:pOS%KR2.^8u:Dqt:f'D"qFrtXTW+-?+<1BBruLM4Je
%#;@00ES!l*[CDILobLV13p>Su9qK#-%+F;S=(XJtF.M!:=L#-ZUrR?JG=D1>:'Y="hK2]97F1Bq])=3TKho7i<U#U/qmE/iMhcMU
%\!>7P5p,km7pKqh7-X@RfkGI;LQId"$W/IgbosDfDX!8MdX<,K?mKZeW&V=N6_mDbGmL#+>^nrg\')\7QXTBUE4*A.s!\J-[CG;G
%E>Q9"o'jW+RBAf,ggNbBP!d6W>WQbS';g+(LWjWYB<CDM$N?MYV-qf:o-lYFHDu]kgm8cM_rUHIM^5uG6$Dn2i*>VbHUdI].`&$d
%NfK0Io]SQ'lS#EioF]NNG=Q,tcKoM/><EpiERtlm$C8Wbk-@@a6VY-_O(h@H?)o-NU^o@oRe5*1-j"1R4h;dK3I"VN;^Eg&_-F]H
%VsuRbh_#GVY6T"Be1B7qRR_!EObKsQL>*qV=2/d62%J6j1^QdX:o=\0[L#7C>-W?b*I$!i*qh!b&``fFE0lt=`64+.9eN@6>F'uM
%qkRdH'cI&,%R.-[r[oX;5!UqS=NWH0JnVlLk/,JVj3&7R40:<p]"T=*<qfh7@S\DYcia))`<u$(s04L@;RsmhbGupjIk-%k\#O0_
%5[#5D[R1I&`b<,%$p_Bh6lS"tBAK=Y[k'1MU*1i;f:nLLrbAg\1:bFWV5B.4*.H@gm&NG`p8?6U)Ge-6F\$1r'Og+0+Ge@(UD2tN
%T?Gc3hV6fHN[M"a5(Rau#FAY@;bR"uQBgnt'^sb&UJEU4m$U.R1Ikg<Ve!TkY8Ujc6tpL/O#?%#1lS6]'0<&GYUu_@I%q==OO5T0
%p5b_Q*g&\!b/1H*^cYRI_I!q"U2t6>[^rM?2TuDg5eP@698J)Ld4!"*Z&^Ms_+8q*D(:!GUI2-u)d2d[`fJa9BjYeF]7$=+GY3iG
%md1/k)?LuZ;#9*l&F@HnNrLk0!NHM\W$Asa;uV;^^gFhY<W1,@pFBT[/H>LN^AJMG+VKhFrS&\MMVbDNLa8g&;U&:ml;k=je=)(A
%H;>5;2Ql/i#>qY&,C<hi3dP>8Tl*;fOSD2`2.+Kc9.RBl")"J!b,JHEGnq*.EWe&4:a=6Gj"]&L7.p6)+l<b9EdS4#*#-8>79+[b
%2nHlATZL+QY3[mmF[:Xibc!kbD2^"q(!2@D_E*a?U<]q`rs`t>L]!f%f6Kfic)O5bN,+6)@heF9NU(7OBLSlC(cr/J0IL=e)X?7:
%9Q:IP$_38$dhop2Y:)n)r[3W88kU:+5I@:6=F9;7K4.;;%JH\VOl08?0*b^6EeM7FeI1m+&8\`S["ERMmF5Ch=4@RG]lnd?O^pFN
%=@?/Y(!X_%V&7j6BUrMsXe_N$_SX(<,(&'4SDI[]mQ>CkChM;Oljk6U9<JKK_8NopIh2AJ^":o,W\qSR[6D$,Kj@a@fNiM1'&ZJY
%Yc?Lc?eQ8MPBP4I_='t$5"OA],%4=.'WaX2P')h*<se>Gb&t/<KPQD2WieWML?.@r%l!"aM_&htr'-:K>GZ?N;1AaQ%sFhAi[,N'
%"pkJQG\C5l4.J7c_"kp/?2]h8_h(]Ai=n1:EOmM7$\E4t"RuYHZfckNM\cNQUY71L#e[Y[:D#C"p]>iG]HAUq[_[/-Nua!ic+U-J
%DT)XBRM+WscU66V($_O5@:=cJTqOuYg+H*R4[PIU:J9%@,JJd[SS5U'56q3)dUm'\LLpB,#Qa(J*4]!_PEe<ZEc/1LSK:taJ`YrT
%:2Z?p:o7kn"\?I+e/(R:!Gm_Gotli*$I%7K]@p3>CCr>+PD;W[nqLZJ,+I5*?s&j#[Ai;rU24_0&JJ@f""R7Q0%_)bYtL)/i)dH1
%`7>LRZ6.<hTU$^E.6iO??1J8)Q>-_g'fDDd^G#SjS[*6>PGI>qI&2gaBu:%SW+Z4Cn5%"Di'5:A71:\!PSe^O3\a"9S&UaeL-Ii0
%R)(@<"kG+[8bj1-,1;WfN(XfBZ":'%Bp?c]c[0oKg/pGqZKk>81fEMd1?[;4aKW:8)_<)GK_"ZUcis^qJ*kfk`4=.fSS]7?.ja$a
%#1gebYTY=!*Q6qq3$OhGLHOT9Hs[Q9gJCUOqC\Ep(6VTSfUo"rbkUs22%aC%S(4>dC+.u$aY*7DIGkeV-WK(HjM_+CD2XXN)S7EJ
%X>^92<:tZ.+*%e6,.&+#lS*ReH`Gb()f?*>fV$'4qVX86kf%?<'<Nh0G%`gQV9KJ;:@6_n0G;V\#IkI&&/K9ajq=F'n35,6OQ2Q0
%gK6kWipiURWaH`S>h^Cu8o8?WWOUA73''KUB\GjDhV5.fjt:jPOo8I,fS]Sd`pDp9DJ3n9\*9k*7P.)=S^>bne`%'@c>mat20$NA
%T?"Ypit0tpL>&/U8.Rkp%q3(rK3]Lg-(8Elj%1g,KXOrLJsENRb:3(#l+1*4i#Vq-?.EBhE*:!Y_!TFU^!MFs/a'3fF^n)AH?OUH
%\(FCSG1&V'.2SI0XN*$Da.-3Z(LeF*P;sak,iT4Rk;^;0,b?WL[8kk.Q*?/D2N0;#?_&+JD>4Z[`s4j=ib/KY[c?.r)MVF>4:pnR
%j[h_kj7u$b#FuU'WS#$cdulWa<N@`cNBX-VWe11QMB+[U-:J349*\<+&Y=jW'WTD$==K:RM*Ds7=AhH-jU5m5=YTX37Qqh_A<,3I
%Z@'klU449.Hq:/-@=GX">?g>]aNa7;K1?F5P;qmqMVTa8hE^IS"b8#4kY:)p8$R7>mgL++$eA.R]2'7Pb^J<12guHo4=TC%l"q-O
%Ogr:ZN/*%O+D^ikkaI<Y;OqY+le&@gTAQeG9=7R%p@WEKp"LV&NYO_c1)u="KbLOb7VdX/;+d0[JuFM7Po(W!2NRPd&4m2gnss.&
%"F9pDCSt@q-(*G<nD7_.f,1^Ie')r'$:6d!)Us9$NBqm#+<X>48=(G.[%IQU;:^eZ1"(%OLG1NFShPKdBp:OP3pnuW/*?e(OM6T9
%BXP%q(f0A[MtTdLB%E@LZtU6$L5$M59qr+$V,b4aVGU1S[0U\BRmmFj44Z!#)?iV(_K'.;]hA:>,W?KlUm?]C*J4rV>E[cD+Ejsc
%3Q[6aRY+([QonTGU1n_Mfe`t+of#1CC#DWb%,Pe=pqaf-c:RfO\9@*=kRr5.J8+=rM?>k-Os@1DbBi_XLYc.L1C?Iq&V@nI%4o1>
%0t9dWgS6o'gn]L,*$T6l9H"(W&_*>A-B3TZXF:1+Bb]>*LKGnIUesr]>U#HTUf$(8d@8rc)OQW[ehS+oVB(6k2RXcS2]dR1[4SHF
%J-@uB5A-HTfahlNm5BrU:i8uH='[D/Bi>*j'cp_f(58X&is4+H8h)qmV7ne$@PMg6ZU/QMoYtX0,]C;pMia!B'3a4hJb9^sRP4?h
%7+X2u2.Km(g,-$d<lZe/)UBe^:@d)G3]&?K!;DJ<*?aM_b"`gU],#Q7AZ%knOqr'j2cP#-7!SE><]"h2lCuh-n2Ns\5Wf5Yd[@+1
%Kq31hCYr-_MQ/Dj[.Tp#,-"E+)*dGDO@Vg5WB0g='"t>,'tt<gKVYW#@3*o$;YLA_Df.`M<Mp<MCL=HO8Vi?@E`T,"'mbVC*ACKk
%U@He]!ALM<<*8.fPD6(u\\PB5!)]LDWB,9""QWC%n9J_e)QF9jk)`JsV!CuJH*,8U\dl/a>ZG<\_">hpR7sVIOc`21GRVG:C'mYU
%@4#72Fg.H3oLYDHZ0W*-&@tV*d'Qao,$h+@n<"Yh?.ZoVio1GR#@o&s'u/ocLf<XWV!B<%\ZS<k;>-3CRQLpmUWJD`:t(:WnStZ$
%Z5NCXAI!Qok$"B68ejm^.9C[*+_?Eo;g*]`I\a9%DsJ$tZ3,E7n<Hgn5_.^i6BrRMZs1O1;/OpbI%fofqRNna-/MV)8S&,gU"=uK
%4#gV?bHC1C_C*eu<uLR-Y3^[P\obM2^0"IOm[Or#%sM$'JfFN-8D1hteRTCjq,-e1@o4&A+mZ]LepWm4^u.#R2a22baKmM^V!C-a
%>NN^:Q`-2Md>0c(pP"%J'j!+t<erMG&1LfXQOnCcN1C0_TA'&FT@2k]/g8^b28-fIr2e[q'O&:f(G7e@)Z6Ru6s>^c+SES[OLI.6
%h%^GP(?W,r<*!edU4W0JC&oXr0fP9'(k\h?h(UnZ5[7o`(B^`_)r^D:FtNM=+r&N1e$\e4%!8RJdt"TW=frK`5po;J`jK!-,r,T-
%`RUog\S;D.N1ubSN6WCSHY_HE8TE1'+tsLA*W6,gGSq$CT"@mFl_&O%Uq:@/+qNFKmAt#23fCA9Md$iXL*`7C039t:PCf\%=:=Dr
%g=s+qX8^breL+>W"n>.UYIN]FjUjoRA9LNSNr4U",;r9QY2E+(bK9tqq1WQQ=>Y3"i4FWiLU,V;=\DiW-t7hqH=tsYZtMWi%%uZ_
%A.Db96k-e&"O0`DkoG>1<k"CRUDUE45/%)F'ECnTklAV:X4X$V=?kkD9PW*E`eS_MOl&S0R'e:^!"":h#adm$O*#]s:n5t?8nYsE
%H1ZL+h*g9;1d2lQeDQ7?)I'&3XLu&iJ7KJ6!T):;X24<J=jHDd%?W;sLs&QdRi\Q/@Ncb7NHtrk6N0SSNQf"OJAS-uRsV&PRa`&]
%[q*[s:C"op?]6rl83)D0-@*abiXNMje/j0CkaKX6$5"*\Bu95<gY`]1iY=&8V2fbdGQ;Ta%M+Jf!#I[>6(sZGY//Rbh6,>T=oZ"j
%bGio5;YAq3.9Y<gXsSVA5uK>OqB\=_&8$n3]'`.kf-DYir/_7%BMiFHN\Llt$[(87_sNV4k5ljtIM*MA_h]_1NucdWd!:%9Q&B`R
%fbup:l6DBr`MjM2QAlHig_/DLGVD="OmuG:WZ6UDT8g3n@kT'E9Lt^Q/shVZ94R5;,P;2,p7-f<!LEgjB:jlaHJ$!e`L`6:#rRt!
%ra9h8-"Ib;*S_g>a;gk_*N2X@5J)/"HV3-VUhZ616nq#p\4*eZj2U<9[A`In9I'+32*&si=mno6(G,`(IjHEWOQfI6L'[DWlIsU>
%/,I_S_^>mjjfQd"FM[j2P3J(:[6/uIc<-SXd=8-!:TBer?d$sKm8Uh0Q&e,82^sAc8T8uW5^ZpKV;1j%@I3kP?PkM"(F(US.?GR:
%"V<2eUa?:k/NWQm3X<SI:/,m:d\XXi)_:8DA`bTGjU_4P!?F^9E#=+9g*`t,l:Mt8lpe\U9J"@VJL%ju]6Wtr&==<jn]t1X=2W]B
%Lr-:3D[a4R76\%lUSf!2dUO]0CgNK"<5^\_biZQA92B>W&kdjR3!:mE"#WA#[?E]r#9o>WSb=7a3tORV!MURBm\'tcK1m3[@6:l\
%=bMg6?%<chRdaS$^f7[S%dZ9X<U!l%S"+:tZ\EcMYqLjeY4fc9R_[%V9k9C+j=F=!+9j'9"`Zn;bgO(^mh$a=]5D'_4>HqQUl@as
%MIC<f@P2Xac:,<MY$*eK<*=V'$F@/(j-cfGfl8X51ND\DRAqjic&4nl.u0hm=j3aW#>)"W9P_gD`7)RY_lnj(5+!19K"4>'B&aLL
%LWWqiaI9^@ae=m$?\5rR'ra.8nM)^77+D.KJ='n1c!(tfh/l"jMY1ZH#pC1X7hi*jU@*,4\AWKGka/mRDIX*4J2dVS3[5IWW0[gC
%buf'LIed]6`9m%/m9o>Z(ZS"[$'eiFP;b=dTf4l@/!Aln0H59Nq".9)TSD1k)T8Q^rl1<E/FO8)e1sXP\RZUNBT"d9Wa8&S^nU[u
%1ph22FQ>?"=g`h4DA8arf>'C/rktD^Pb7'(OA[DsGP$5D'#$3AgI=VfNLUQLi:J4U*o+f!??_+Nl4Ac#,,fOSM",Q]YSU0B9bj"/
%U@Yp@Shud^JL%Ub&Nc=,'lPY_*4shRB"*,7$'o8(@_t?cVWq>!?\_(#NLZ)8SHO![SnLXY$;!L8GKi'4Jjf9&>0pZh99<7E-6uiK
%3Mo]V44toL00bHE7NZb>kWlrEJ9W`fZ6Y5,;K!#4c'?er4+fX_mtH#ro'>IRc(8T,hAddFj'>J$5anK]:k`S1=&>B81\`q:>mB@V
%N;oM'T7-_0otQ"I]<D5/amVFlnh9l!J,]F3^O#Y5rK".c#5n#i\)2Te&6OhhZ]'D'mie("K>tnc*.QXmIPnk<R6:GRIfAogpZ!LU
%r;DsHrqr\_DEiXF_tWVKr:'9(_7ooHYQ!oBIsUqhMa%*aGkqq(T7-O%FnoW355s$o07S`^s+#TMH[^g$IJpX9%JA2"IeW7,J,Son
%GBXJfgRm@$o)@b,pYZ#?o=LXPs6o_Y0Ald(rhlB<q!n=+:]LC2hgjX]Gi@+Is8:JupuHZ!#=i%qWr~>
%AI9_PrivateDataEnd
